
hbot_firmware_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a80  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c8c  08004c8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c8c  08004c8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c8c  08004c8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000000c  08004ca0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004ca0  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b275  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b32  00000000  00000000  0002b2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199e0  00000000  00000000  0002e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9e1  00000000  00000000  00047f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098768  00000000  00000000  00054969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed0d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003318  00000000  00000000  000ed124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004c4c 	.word	0x08004c4c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004c4c 	.word	0x08004c4c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 ffdd 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f8d3 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 fb0b 	bl	800084c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000236:	f000 f915 	bl	8000464 <MX_TIM2_Init>
  MX_TIM3_Init();
 800023a:	f000 f967 	bl	800050c <MX_TIM3_Init>
  MX_DMA_Init();
 800023e:	f000 fadf 	bl	8000800 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000242:	f000 fab3 	bl	80007ac <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000246:	f000 fa03 	bl	8000650 <MX_TIM8_Init>
  MX_TIM4_Init();
 800024a:	f000 f9b3 	bl	80005b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, dataRec, UART_REC_BUFFER_SIZE);
 800024e:	220c      	movs	r2, #12
 8000250:	4957      	ldr	r1, [pc, #348]	; (80003b0 <main+0x18c>)
 8000252:	4858      	ldr	r0, [pc, #352]	; (80003b4 <main+0x190>)
 8000254:	f003 ff8e 	bl	8004174 <HAL_UART_Receive_DMA>

  memset(dataTran, 0, UART_TRAN_BUFFER_SIZE);
 8000258:	220c      	movs	r2, #12
 800025a:	2100      	movs	r1, #0
 800025c:	4856      	ldr	r0, [pc, #344]	; (80003b8 <main+0x194>)
 800025e:	f004 fced 	bl	8004c3c <memset>
  HAL_UART_Transmit_DMA(&huart1, dataTran, UART_TRAN_BUFFER_SIZE);
 8000262:	220c      	movs	r2, #12
 8000264:	4954      	ldr	r1, [pc, #336]	; (80003b8 <main+0x194>)
 8000266:	4853      	ldr	r0, [pc, #332]	; (80003b4 <main+0x190>)
 8000268:	f003 ff18 	bl	800409c <HAL_UART_Transmit_DMA>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800026c:	2104      	movs	r1, #4
 800026e:	4853      	ldr	r0, [pc, #332]	; (80003bc <main+0x198>)
 8000270:	f002 fcb8 	bl	8002be4 <HAL_TIM_PWM_Start>
//  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000274:	2108      	movs	r1, #8
 8000276:	4851      	ldr	r0, [pc, #324]	; (80003bc <main+0x198>)
 8000278:	f002 fcb4 	bl	8002be4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800027c:	4850      	ldr	r0, [pc, #320]	; (80003c0 <main+0x19c>)
 800027e:	f002 fbf9 	bl	8002a74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000282:	213c      	movs	r1, #60	; 0x3c
 8000284:	484f      	ldr	r0, [pc, #316]	; (80003c4 <main+0x1a0>)
 8000286:	f002 fe79 	bl	8002f7c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800028a:	213c      	movs	r1, #60	; 0x3c
 800028c:	484e      	ldr	r0, [pc, #312]	; (80003c8 <main+0x1a4>)
 800028e:	f002 fe75 	bl	8002f7c <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t pwmLeft = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	80fb      	strh	r3, [r7, #6]
  uint16_t pwmRight = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	80bb      	strh	r3, [r7, #4]
  while (1)
  {
//	HAL_UART_Transmit_DMA(&huart1, dataTran, UART_TRAN_BUFFER_SIZE);
	HAL_Delay(10);
 800029a:	200a      	movs	r0, #10
 800029c:	f001 f806 	bl	80012ac <HAL_Delay>
	  pwmLeft = abs((uint16_t)(velLeft*1000/37));
 80002a0:	4b4a      	ldr	r3, [pc, #296]	; (80003cc <main+0x1a8>)
 80002a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002a6:	461a      	mov	r2, r3
 80002a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ac:	fb02 f303 	mul.w	r3, r2, r3
 80002b0:	4a47      	ldr	r2, [pc, #284]	; (80003d0 <main+0x1ac>)
 80002b2:	fb82 1203 	smull	r1, r2, r2, r3
 80002b6:	441a      	add	r2, r3
 80002b8:	1152      	asrs	r2, r2, #5
 80002ba:	17db      	asrs	r3, r3, #31
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	80fb      	strh	r3, [r7, #6]
	  pwmRight = abs((uint16_t)(velRight*1000/37));
 80002c0:	4b44      	ldr	r3, [pc, #272]	; (80003d4 <main+0x1b0>)
 80002c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002c6:	461a      	mov	r2, r3
 80002c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002cc:	fb02 f303 	mul.w	r3, r2, r3
 80002d0:	4a3f      	ldr	r2, [pc, #252]	; (80003d0 <main+0x1ac>)
 80002d2:	fb82 1203 	smull	r1, r2, r2, r3
 80002d6:	441a      	add	r2, r3
 80002d8:	1152      	asrs	r2, r2, #5
 80002da:	17db      	asrs	r3, r3, #31
 80002dc:	1ad3      	subs	r3, r2, r3
 80002de:	80bb      	strh	r3, [r7, #4]
	  pwmLeft = (pwmLeft > 1000) ? 1000 : pwmLeft;
 80002e0:	88fb      	ldrh	r3, [r7, #6]
 80002e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002e6:	bf28      	it	cs
 80002e8:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 80002ec:	80fb      	strh	r3, [r7, #6]
	  pwmRight = (pwmRight> 1000) ? 1000 : pwmRight;
 80002ee:	88bb      	ldrh	r3, [r7, #4]
 80002f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002f4:	bf28      	it	cs
 80002f6:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 80002fa:	80bb      	strh	r3, [r7, #4]
	  if(velLeft > 0){
 80002fc:	4b33      	ldr	r3, [pc, #204]	; (80003cc <main+0x1a8>)
 80002fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000302:	2b00      	cmp	r3, #0
 8000304:	dd0c      	ble.n	8000320 <main+0xfc>
		  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8000306:	2104      	movs	r1, #4
 8000308:	482c      	ldr	r0, [pc, #176]	; (80003bc <main+0x198>)
 800030a:	f003 fd29 	bl	8003d60 <HAL_TIMEx_PWMN_Stop>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800030e:	2104      	movs	r1, #4
 8000310:	482a      	ldr	r0, [pc, #168]	; (80003bc <main+0x198>)
 8000312:	f002 fc67 	bl	8002be4 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmLeft);
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <main+0x198>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	88fa      	ldrh	r2, [r7, #6]
 800031c:	639a      	str	r2, [r3, #56]	; 0x38
 800031e:	e019      	b.n	8000354 <main+0x130>
	  }
	  else if (velLeft < 0) {
 8000320:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <main+0x1a8>)
 8000322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000326:	2b00      	cmp	r3, #0
 8000328:	da0c      	bge.n	8000344 <main+0x120>
		  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800032a:	2104      	movs	r1, #4
 800032c:	4823      	ldr	r0, [pc, #140]	; (80003bc <main+0x198>)
 800032e:	f002 fd13 	bl	8002d58 <HAL_TIM_PWM_Stop>
		  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8000332:	2104      	movs	r1, #4
 8000334:	4821      	ldr	r0, [pc, #132]	; (80003bc <main+0x198>)
 8000336:	f003 fc67 	bl	8003c08 <HAL_TIMEx_PWMN_Start>
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmLeft);
 800033a:	4b20      	ldr	r3, [pc, #128]	; (80003bc <main+0x198>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	88fa      	ldrh	r2, [r7, #6]
 8000340:	639a      	str	r2, [r3, #56]	; 0x38
 8000342:	e007      	b.n	8000354 <main+0x130>
	  }
	  else {
		  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8000344:	2104      	movs	r1, #4
 8000346:	481d      	ldr	r0, [pc, #116]	; (80003bc <main+0x198>)
 8000348:	f002 fd06 	bl	8002d58 <HAL_TIM_PWM_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 800034c:	2104      	movs	r1, #4
 800034e:	481b      	ldr	r0, [pc, #108]	; (80003bc <main+0x198>)
 8000350:	f003 fd06 	bl	8003d60 <HAL_TIMEx_PWMN_Stop>
	  }


	  if(velRight < 0){
 8000354:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <main+0x1b0>)
 8000356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800035a:	2b00      	cmp	r3, #0
 800035c:	da0c      	bge.n	8000378 <main+0x154>
		  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 800035e:	2108      	movs	r1, #8
 8000360:	4816      	ldr	r0, [pc, #88]	; (80003bc <main+0x198>)
 8000362:	f003 fcfd 	bl	8003d60 <HAL_TIMEx_PWMN_Stop>
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000366:	2108      	movs	r1, #8
 8000368:	4814      	ldr	r0, [pc, #80]	; (80003bc <main+0x198>)
 800036a:	f002 fc3b 	bl	8002be4 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwmRight);
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <main+0x198>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	88ba      	ldrh	r2, [r7, #4]
 8000374:	63da      	str	r2, [r3, #60]	; 0x3c
 8000376:	e790      	b.n	800029a <main+0x76>
	  }
	  else if (velRight > 0){
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <main+0x1b0>)
 800037a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800037e:	2b00      	cmp	r3, #0
 8000380:	dd0c      	ble.n	800039c <main+0x178>
		  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8000382:	2108      	movs	r1, #8
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <main+0x198>)
 8000386:	f002 fce7 	bl	8002d58 <HAL_TIM_PWM_Stop>
		  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 800038a:	2108      	movs	r1, #8
 800038c:	480b      	ldr	r0, [pc, #44]	; (80003bc <main+0x198>)
 800038e:	f003 fc3b 	bl	8003c08 <HAL_TIMEx_PWMN_Start>
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwmRight);
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <main+0x198>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	88ba      	ldrh	r2, [r7, #4]
 8000398:	63da      	str	r2, [r3, #60]	; 0x3c
 800039a:	e77e      	b.n	800029a <main+0x76>
	  }
	  else {
		  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 800039c:	2108      	movs	r1, #8
 800039e:	4807      	ldr	r0, [pc, #28]	; (80003bc <main+0x198>)
 80003a0:	f002 fcda 	bl	8002d58 <HAL_TIM_PWM_Stop>
		  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 80003a4:	2108      	movs	r1, #8
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <main+0x198>)
 80003a8:	f003 fcda 	bl	8003d60 <HAL_TIMEx_PWMN_Stop>
	HAL_Delay(10);
 80003ac:	e775      	b.n	800029a <main+0x76>
 80003ae:	bf00      	nop
 80003b0:	20000214 	.word	0x20000214
 80003b4:	20000148 	.word	0x20000148
 80003b8:	20000220 	.word	0x20000220
 80003bc:	20000100 	.word	0x20000100
 80003c0:	200000b8 	.word	0x200000b8
 80003c4:	20000028 	.word	0x20000028
 80003c8:	20000070 	.word	0x20000070
 80003cc:	2000022c 	.word	0x2000022c
 80003d0:	dd67c8a7 	.word	0xdd67c8a7
 80003d4:	2000022e 	.word	0x2000022e

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b090      	sub	sp, #64	; 0x40
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0318 	add.w	r3, r7, #24
 80003e2:	2228      	movs	r2, #40	; 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 fc28 	bl	8004c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003fa:	2301      	movs	r3, #1
 80003fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000402:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000408:	2301      	movs	r3, #1
 800040a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040c:	2302      	movs	r3, #2
 800040e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000416:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800041a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041c:	f107 0318 	add.w	r3, r7, #24
 8000420:	4618      	mov	r0, r3
 8000422:	f001 febd 	bl	80021a0 <HAL_RCC_OscConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800042c:	f000 fb2d 	bl	8000a8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000430:	230f      	movs	r3, #15
 8000432:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000434:	2302      	movs	r3, #2
 8000436:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2102      	movs	r1, #2
 800044a:	4618      	mov	r0, r3
 800044c:	f002 f92a 	bl	80026a4 <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000456:	f000 fb18 	bl	8000a8a <Error_Handler>
  }
}
 800045a:	bf00      	nop
 800045c:	3740      	adds	r7, #64	; 0x40
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08c      	sub	sp, #48	; 0x30
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	2224      	movs	r2, #36	; 0x24
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f004 fbe2 	bl	8004c3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <MX_TIM2_Init+0xa4>)
 8000482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000488:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <MX_TIM2_Init+0xa4>)
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048e:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <MX_TIM2_Init+0xa4>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000494:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <MX_TIM2_Init+0xa4>)
 8000496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800049a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049c:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_TIM2_Init+0xa4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a2:	4b19      	ldr	r3, [pc, #100]	; (8000508 <MX_TIM2_Init+0xa4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004ac:	2300      	movs	r3, #0
 80004ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004b0:	2301      	movs	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004bc:	2300      	movs	r3, #0
 80004be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004c0:	2301      	movs	r3, #1
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	4619      	mov	r1, r3
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <MX_TIM2_Init+0xa4>)
 80004d4:	f002 fcb0 	bl	8002e38 <HAL_TIM_Encoder_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004de:	f000 fad4 	bl	8000a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <MX_TIM2_Init+0xa4>)
 80004f0:	f003 fc94 	bl	8003e1c <HAL_TIMEx_MasterConfigSynchronization>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80004fa:	f000 fac6 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	3730      	adds	r7, #48	; 0x30
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000028 	.word	0x20000028

0800050c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08c      	sub	sp, #48	; 0x30
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	2224      	movs	r2, #36	; 0x24
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fb8e 	bl	8004c3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_TIM3_Init+0xa0>)
 800052a:	4a21      	ldr	r2, [pc, #132]	; (80005b0 <MX_TIM3_Init+0xa4>)
 800052c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800052e:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <MX_TIM3_Init+0xa0>)
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <MX_TIM3_Init+0xa0>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_TIM3_Init+0xa0>)
 800053c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000540:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_TIM3_Init+0xa0>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_TIM3_Init+0xa0>)
 800054a:	2200      	movs	r2, #0
 800054c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800054e:	2301      	movs	r3, #1
 8000550:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000556:	2301      	movs	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000566:	2301      	movs	r3, #1
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	4619      	mov	r1, r3
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <MX_TIM3_Init+0xa0>)
 800057a:	f002 fc5d 	bl	8002e38 <HAL_TIM_Encoder_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000584:	f000 fa81 	bl	8000a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_TIM3_Init+0xa0>)
 8000596:	f003 fc41 	bl	8003e1c <HAL_TIMEx_MasterConfigSynchronization>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80005a0:	f000 fa73 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	3730      	adds	r7, #48	; 0x30
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000070 	.word	0x20000070
 80005b0:	40000400 	.word	0x40000400

080005b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <MX_TIM4_Init+0x94>)
 80005d2:	4a1e      	ldr	r2, [pc, #120]	; (800064c <MX_TIM4_Init+0x98>)
 80005d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_TIM4_Init+0x94>)
 80005d8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80005dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_TIM4_Init+0x94>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_TIM4_Init+0x94>)
 80005e6:	2263      	movs	r2, #99	; 0x63
 80005e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_TIM4_Init+0x94>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_TIM4_Init+0x94>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80005f6:	4814      	ldr	r0, [pc, #80]	; (8000648 <MX_TIM4_Init+0x94>)
 80005f8:	f002 f9ec 	bl	80029d4 <HAL_TIM_Base_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000602:	f000 fa42 	bl	8000a8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4619      	mov	r1, r3
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_TIM4_Init+0x94>)
 8000614:	f002 ff26 	bl	8003464 <HAL_TIM_ConfigClockSource>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 fa34 	bl	8000a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <MX_TIM4_Init+0x94>)
 8000630:	f003 fbf4 	bl	8003e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800063a:	f000 fa26 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000b8 	.word	0x200000b8
 800064c:	40000800 	.word	0x40000800

08000650 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000656:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800066e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2220      	movs	r2, #32
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fad7 	bl	8004c3c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800068e:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <MX_TIM8_Init+0x154>)
 8000690:	4a45      	ldr	r2, [pc, #276]	; (80007a8 <MX_TIM8_Init+0x158>)
 8000692:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7200-1;
 8000694:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <MX_TIM8_Init+0x154>)
 8000696:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800069a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069c:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <MX_TIM8_Init+0x154>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <MX_TIM8_Init+0x154>)
 80006a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <MX_TIM8_Init+0x154>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80006b0:	4b3c      	ldr	r3, [pc, #240]	; (80007a4 <MX_TIM8_Init+0x154>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <MX_TIM8_Init+0x154>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80006bc:	4839      	ldr	r0, [pc, #228]	; (80007a4 <MX_TIM8_Init+0x154>)
 80006be:	f002 f989 	bl	80029d4 <HAL_TIM_Base_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80006c8:	f000 f9df 	bl	8000a8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80006d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006d6:	4619      	mov	r1, r3
 80006d8:	4832      	ldr	r0, [pc, #200]	; (80007a4 <MX_TIM8_Init+0x154>)
 80006da:	f002 fec3 	bl	8003464 <HAL_TIM_ConfigClockSource>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80006e4:	f000 f9d1 	bl	8000a8a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80006e8:	482e      	ldr	r0, [pc, #184]	; (80007a4 <MX_TIM8_Init+0x154>)
 80006ea:	f002 fa23 	bl	8002b34 <HAL_TIM_PWM_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80006f4:	f000 f9c9 	bl	8000a8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000704:	4619      	mov	r1, r3
 8000706:	4827      	ldr	r0, [pc, #156]	; (80007a4 <MX_TIM8_Init+0x154>)
 8000708:	f003 fb88 	bl	8003e1c <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000712:	f000 f9ba 	bl	8000a8a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000716:	2360      	movs	r3, #96	; 0x60
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071e:	2300      	movs	r3, #0
 8000720:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800072a:	2300      	movs	r3, #0
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000736:	2204      	movs	r2, #4
 8000738:	4619      	mov	r1, r3
 800073a:	481a      	ldr	r0, [pc, #104]	; (80007a4 <MX_TIM8_Init+0x154>)
 800073c:	f002 fdd4 	bl	80032e8 <HAL_TIM_PWM_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000746:	f000 f9a0 	bl	8000a8a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800074a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074e:	2208      	movs	r2, #8
 8000750:	4619      	mov	r1, r3
 8000752:	4814      	ldr	r0, [pc, #80]	; (80007a4 <MX_TIM8_Init+0x154>)
 8000754:	f002 fdc8 	bl	80032e8 <HAL_TIM_PWM_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 800075e:	f000 f994 	bl	8000a8a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <MX_TIM8_Init+0x154>)
 8000786:	f003 fbb5 	bl	8003ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000790:	f000 f97b 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_TIM8_Init+0x154>)
 8000796:	f000 fa61 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 800079a:	bf00      	nop
 800079c:	3758      	adds	r7, #88	; 0x58
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000100 	.word	0x20000100
 80007a8:	40013400 	.word	0x40013400

080007ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_USART1_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART1_UART_Init+0x4c>)
 80007e4:	f003 fc0d 	bl	8004002 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f94c 	bl	8000a8a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000148 	.word	0x20000148
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_DMA_Init+0x48>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <MX_DMA_Init+0x48>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6153      	str	r3, [r2, #20]
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_DMA_Init+0x48>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	200e      	movs	r0, #14
 8000824:	f000 fe3d 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000828:	200e      	movs	r0, #14
 800082a:	f000 fe56 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	200f      	movs	r0, #15
 8000834:	f000 fe35 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000838:	200f      	movs	r0, #15
 800083a:	f000 fe4e 	bl	80014da <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_GPIO_Init+0xa4>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <MX_GPIO_Init+0xa4>)
 8000866:	f043 0320 	orr.w	r3, r3, #32
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_GPIO_Init+0xa4>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_GPIO_Init+0xa4>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_GPIO_Init+0xa4>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_GPIO_Init+0xa4>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_GPIO_Init+0xa4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <MX_GPIO_Init+0xa4>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_GPIO_Init+0xa4>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_GPIO_Init+0xa4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <MX_GPIO_Init+0xa4>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_GPIO_Init+0xa4>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2104      	movs	r1, #4
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_GPIO_Init+0xa8>)
 80008c6:	f001 fc39 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80008ca:	2304      	movs	r3, #4
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_GPIO_Init+0xa8>)
 80008e2:	f001 fa97 	bl	8001e14 <HAL_GPIO_Init>

}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40011400 	.word	0x40011400

080008f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	__NOP();
 8000900:	bf00      	nop
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000902:	2104      	movs	r1, #4
 8000904:	4854      	ldr	r0, [pc, #336]	; (8000a58 <HAL_UART_RxCpltCallback+0x160>)
 8000906:	f001 fc31 	bl	800216c <HAL_GPIO_TogglePin>
	memset(dataTran, 0, UART_TRAN_BUFFER_SIZE);
 800090a:	220c      	movs	r2, #12
 800090c:	2100      	movs	r1, #0
 800090e:	4853      	ldr	r0, [pc, #332]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 8000910:	f004 f994 	bl	8004c3c <memset>
	dataTran[0] = 0x2B;
 8000914:	4b51      	ldr	r3, [pc, #324]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 8000916:	222b      	movs	r2, #43	; 0x2b
 8000918:	701a      	strb	r2, [r3, #0]

	u_int8_t cmdLen = dataRec[1];
 800091a:	4b51      	ldr	r3, [pc, #324]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	74fb      	strb	r3, [r7, #19]

	if (dataRec[0] != 0x2A || dataRec[cmdLen-1] != 0x3E) {
 8000920:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b2a      	cmp	r3, #42	; 0x2a
 8000926:	f040 808e 	bne.w	8000a46 <HAL_UART_RxCpltCallback+0x14e>
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	3b01      	subs	r3, #1
 800092e:	4a4c      	ldr	r2, [pc, #304]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 8000930:	5cd3      	ldrb	r3, [r2, r3]
 8000932:	2b3e      	cmp	r3, #62	; 0x3e
 8000934:	f040 8087 	bne.w	8000a46 <HAL_UART_RxCpltCallback+0x14e>
//		HAL_UART_Transmit_DMA(&huart1, dataTran, 5);
		return;
	}


	u_int8_t cmd_count_add = 3;
 8000938:	2303      	movs	r3, #3
 800093a:	74bb      	strb	r3, [r7, #18]
	uint32_t curr_rec_count = (uint32_t)dataRec[cmd_count_add] << 24 | (uint32_t)dataRec[cmd_count_add+1] << 16
 800093c:	7cbb      	ldrb	r3, [r7, #18]
 800093e:	4a48      	ldr	r2, [pc, #288]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 8000940:	5cd3      	ldrb	r3, [r2, r3]
 8000942:	061a      	lsls	r2, r3, #24
 8000944:	7cbb      	ldrb	r3, [r7, #18]
 8000946:	3301      	adds	r3, #1
 8000948:	4945      	ldr	r1, [pc, #276]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 800094a:	5ccb      	ldrb	r3, [r1, r3]
 800094c:	041b      	lsls	r3, r3, #16
 800094e:	431a      	orrs	r2, r3
								| (uint32_t)dataRec[cmd_count_add+2] << 8 | dataRec[cmd_count_add+3];
 8000950:	7cbb      	ldrb	r3, [r7, #18]
 8000952:	3302      	adds	r3, #2
 8000954:	4942      	ldr	r1, [pc, #264]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 8000956:	5ccb      	ldrb	r3, [r1, r3]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	4313      	orrs	r3, r2
 800095c:	7cba      	ldrb	r2, [r7, #18]
 800095e:	3203      	adds	r2, #3
 8000960:	493f      	ldr	r1, [pc, #252]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 8000962:	5c8a      	ldrb	r2, [r1, r2]
	uint32_t curr_rec_count = (uint32_t)dataRec[cmd_count_add] << 24 | (uint32_t)dataRec[cmd_count_add+1] << 16
 8000964:	4313      	orrs	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
	if(curr_rec_count == rec_cnt) return;
 8000968:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <HAL_UART_RxCpltCallback+0x16c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	429a      	cmp	r2, r3
 8000970:	d06b      	beq.n	8000a4a <HAL_UART_RxCpltCallback+0x152>
	rec_cnt = curr_rec_count;
 8000972:	4a3c      	ldr	r2, [pc, #240]	; (8000a64 <HAL_UART_RxCpltCallback+0x16c>)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	6013      	str	r3, [r2, #0]

	u_int8_t cmd	= dataRec[2];
 8000978:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	72fb      	strb	r3, [r7, #11]
	uint8_t params_add = cmd_count_add + 4;
 800097e:	7cbb      	ldrb	r3, [r7, #18]
 8000980:	3304      	adds	r3, #4
 8000982:	72bb      	strb	r3, [r7, #10]
	switch (cmd) {
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d161      	bne.n	8000a4e <HAL_UART_RxCpltCallback+0x156>
		case 0x00:
			velLeft = (int)dataRec[params_add] << 8 | dataRec[params_add+1];
 800098a:	7abb      	ldrb	r3, [r7, #10]
 800098c:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 800098e:	5cd3      	ldrb	r3, [r2, r3]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	b21a      	sxth	r2, r3
 8000994:	7abb      	ldrb	r3, [r7, #10]
 8000996:	3301      	adds	r3, #1
 8000998:	4931      	ldr	r1, [pc, #196]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 800099a:	5ccb      	ldrb	r3, [r1, r3]
 800099c:	b21b      	sxth	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <HAL_UART_RxCpltCallback+0x170>)
 80009a4:	801a      	strh	r2, [r3, #0]
			velRight = (int)dataRec[params_add+2] << 8 | dataRec[params_add+3];
 80009a6:	7abb      	ldrb	r3, [r7, #10]
 80009a8:	3302      	adds	r3, #2
 80009aa:	4a2d      	ldr	r2, [pc, #180]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 80009ac:	5cd3      	ldrb	r3, [r2, r3]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	7abb      	ldrb	r3, [r7, #10]
 80009b4:	3303      	adds	r3, #3
 80009b6:	492a      	ldr	r1, [pc, #168]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 80009b8:	5ccb      	ldrb	r3, [r1, r3]
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	b21a      	sxth	r2, r3
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <HAL_UART_RxCpltCallback+0x174>)
 80009c2:	801a      	strh	r2, [r3, #0]

			tran_cnt++;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <HAL_UART_RxCpltCallback+0x178>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <HAL_UART_RxCpltCallback+0x178>)
 80009cc:	6013      	str	r3, [r2, #0]
			dataTran[1] = (uint8_t)12;
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 80009d0:	220c      	movs	r2, #12
 80009d2:	705a      	strb	r2, [r3, #1]
			dataTran[2] = 0x10;
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 80009d6:	2210      	movs	r2, #16
 80009d8:	709a      	strb	r2, [r3, #2]

			dataTran[3] = tran_cnt >> 24;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <HAL_UART_RxCpltCallback+0x178>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	0e1b      	lsrs	r3, r3, #24
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 80009e4:	70da      	strb	r2, [r3, #3]
			dataTran[4] = tran_cnt >> 16;
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <HAL_UART_RxCpltCallback+0x178>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	0c1b      	lsrs	r3, r3, #16
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 80009f0:	711a      	strb	r2, [r3, #4]
			dataTran[5] = tran_cnt >> 8;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <HAL_UART_RxCpltCallback+0x178>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 80009fc:	715a      	strb	r2, [r3, #5]
			dataTran[6] = tran_cnt;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_UART_RxCpltCallback+0x178>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 8000a06:	719a      	strb	r2, [r3, #6]

			for (int i = params_add; i<cmdLen-1; i++) {
 8000a08:	7abb      	ldrb	r3, [r7, #10]
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e00b      	b.n	8000a26 <HAL_UART_RxCpltCallback+0x12e>
				dataTran[i] = dataRec[i];
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <HAL_UART_RxCpltCallback+0x168>)
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	4413      	add	r3, r2
 8000a14:	7819      	ldrb	r1, [r3, #0]
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	701a      	strb	r2, [r3, #0]
			for (int i = params_add; i<cmdLen-1; i++) {
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3301      	adds	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	7cfb      	ldrb	r3, [r7, #19]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbee      	blt.n	8000a0e <HAL_UART_RxCpltCallback+0x116>
			}
			dataTran[cmdLen-1] = 0x3F;
 8000a30:	7cfb      	ldrb	r3, [r7, #19]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 8000a36:	213f      	movs	r1, #63	; 0x3f
 8000a38:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit_DMA(&huart1, dataTran, UART_TRAN_BUFFER_SIZE);
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	4907      	ldr	r1, [pc, #28]	; (8000a5c <HAL_UART_RxCpltCallback+0x164>)
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <HAL_UART_RxCpltCallback+0x17c>)
 8000a40:	f003 fb2c 	bl	800409c <HAL_UART_Transmit_DMA>

			break;
 8000a44:	e004      	b.n	8000a50 <HAL_UART_RxCpltCallback+0x158>
		return;
 8000a46:	bf00      	nop
 8000a48:	e002      	b.n	8000a50 <HAL_UART_RxCpltCallback+0x158>
	if(curr_rec_count == rec_cnt) return;
 8000a4a:	bf00      	nop
 8000a4c:	e000      	b.n	8000a50 <HAL_UART_RxCpltCallback+0x158>
		default:
			break;
 8000a4e:	bf00      	nop

//	char msg[30];
//	sprintf(msg, "velL: %i, velR: %i\n", velLeft, velRight);
//
//	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)msg, strlen(msg));
}
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40011400 	.word	0x40011400
 8000a5c:	20000220 	.word	0x20000220
 8000a60:	20000214 	.word	0x20000214
 8000a64:	20000254 	.word	0x20000254
 8000a68:	2000022c 	.word	0x2000022c
 8000a6c:	2000022e 	.word	0x2000022e
 8000a70:	20000250 	.word	0x20000250
 8000a74:	20000148 	.word	0x20000148

08000a78 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
//	dataTran[7] += 1;
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
}
 8000a90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_MspInit+0x5c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <HAL_MspInit+0x5c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6193      	str	r3, [r2, #24]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_MspInit+0x5c>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x5c>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_MspInit+0x5c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_MspInit+0x5c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_MspInit+0x60>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_MspInit+0x60>)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010000 	.word	0x40010000

08000af8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b16:	d12c      	bne.n	8000b72 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b18:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	61d3      	str	r3, [r2, #28]
 8000b24:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4821      	ldr	r0, [pc, #132]	; (8000be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000b5c:	f001 f95a 	bl	8001e14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	201c      	movs	r0, #28
 8000b66:	f000 fc9c 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b6a:	201c      	movs	r0, #28
 8000b6c:	f000 fcb5 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b70:	e030      	b.n	8000bd4 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM3)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d12b      	bne.n	8000bd4 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	61d3      	str	r3, [r2, #28]
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bac:	23c0      	movs	r3, #192	; 0xc0
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bc0:	f001 f928 	bl	8001e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	201d      	movs	r0, #29
 8000bca:	f000 fc6a 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bce:	201d      	movs	r0, #29
 8000bd0:	f000 fc83 	bl	80014da <HAL_NVIC_EnableIRQ>
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40000400 	.word	0x40000400

08000be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <HAL_TIM_Base_MspInit+0x68>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d114      	bne.n	8000c24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_TIM_Base_MspInit+0x6c>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <HAL_TIM_Base_MspInit+0x6c>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	61d3      	str	r3, [r2, #28]
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_TIM_Base_MspInit+0x6c>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	201e      	movs	r0, #30
 8000c18:	f000 fc43 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c1c:	201e      	movs	r0, #30
 8000c1e:	f000 fc5c 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000c22:	e010      	b.n	8000c46 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM8)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_TIM_Base_MspInit+0x70>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d10b      	bne.n	8000c46 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_TIM_Base_MspInit+0x6c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_TIM_Base_MspInit+0x6c>)
 8000c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c38:	6193      	str	r3, [r2, #24]
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_TIM_Base_MspInit+0x6c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40000800 	.word	0x40000800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40013400 	.word	0x40013400

08000c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <HAL_TIM_MspPostInit+0x8c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d130      	bne.n	8000cde <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_TIM_MspPostInit+0x90>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <HAL_TIM_MspPostInit+0x90>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_TIM_MspPostInit+0x90>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_TIM_MspPostInit+0x90>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <HAL_TIM_MspPostInit+0x90>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_TIM_MspPostInit+0x90>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM8_CH2N
    PB1     ------> TIM8_CH3N
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cac:	2303      	movs	r3, #3
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <HAL_TIM_MspPostInit+0x94>)
 8000cc0:	f001 f8a8 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000cc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_TIM_MspPostInit+0x98>)
 8000cda:	f001 f89b 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40013400 	.word	0x40013400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010c00 	.word	0x40010c00
 8000cf4:	40011000 	.word	0x40011000

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a47      	ldr	r2, [pc, #284]	; (8000e30 <HAL_UART_MspInit+0x138>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	f040 8086 	bne.w	8000e26 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1a:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <HAL_UART_MspInit+0x13c>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a45      	ldr	r2, [pc, #276]	; (8000e34 <HAL_UART_MspInit+0x13c>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <HAL_UART_MspInit+0x13c>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b40      	ldr	r3, [pc, #256]	; (8000e34 <HAL_UART_MspInit+0x13c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a3f      	ldr	r2, [pc, #252]	; (8000e34 <HAL_UART_MspInit+0x13c>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <HAL_UART_MspInit+0x13c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4836      	ldr	r0, [pc, #216]	; (8000e38 <HAL_UART_MspInit+0x140>)
 8000d60:	f001 f858 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	482f      	ldr	r0, [pc, #188]	; (8000e38 <HAL_UART_MspInit+0x140>)
 8000d7a:	f001 f84b 	bl	8001e14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000d80:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <HAL_UART_MspInit+0x148>)
 8000d82:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000da4:	2220      	movs	r2, #32
 8000da6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dae:	4823      	ldr	r0, [pc, #140]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000db0:	f000 fbae 	bl	8001510 <HAL_DMA_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000dba:	f7ff fe66 	bl	8000a8a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a1e      	ldr	r2, [pc, #120]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000dc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <HAL_UART_MspInit+0x144>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000dcc:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <HAL_UART_MspInit+0x150>)
 8000dce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000dd2:	2210      	movs	r2, #16
 8000dd4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000dfa:	4812      	ldr	r0, [pc, #72]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000dfc:	f000 fb88 	bl	8001510 <HAL_DMA_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000e06:	f7ff fe40 	bl	8000a8a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_UART_MspInit+0x14c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2025      	movs	r0, #37	; 0x25
 8000e1c:	f000 fb41 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e20:	2025      	movs	r0, #37	; 0x25
 8000e22:	f000 fb5a 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40013800 	.word	0x40013800
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	2000018c 	.word	0x2000018c
 8000e40:	40020058 	.word	0x40020058
 8000e44:	200001d0 	.word	0x200001d0
 8000e48:	40020044 	.word	0x40020044

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr

08000e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e92:	f000 f9ef 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <DMA1_Channel4_IRQHandler+0x10>)
 8000ea2:	f000 fd4d 	bl	8001940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

//  HAL_UART_Transmit_DMA(&huart1, dataRec, 16);
  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001d0 	.word	0x200001d0

08000eb0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <DMA1_Channel5_IRQHandler+0x10>)
 8000eb6:	f000 fd43 	bl	8001940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
//  HAL_UART_Transmit_DMA(&huart1, dataRec, 16);
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000018c 	.word	0x2000018c

08000ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <TIM2_IRQHandler+0x4c>)
 8000ecc:	f002 f904 	bl	80030d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  uint16_t timer_temp1;
//  if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE)){
	  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <TIM2_IRQHandler+0x4c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f06f 0201 	mvn.w	r2, #1
 8000ed8:	611a      	str	r2, [r3, #16]
	  timer_temp1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <TIM2_IRQHandler+0x4c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	80fb      	strh	r3, [r7, #6]
	  if(timer_temp1 == 65535) 	count_temp1--;
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d104      	bne.n	8000ef6 <TIM2_IRQHandler+0x32>
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <TIM2_IRQHandler+0x50>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <TIM2_IRQHandler+0x50>)
 8000ef4:	6013      	str	r3, [r2, #0]
	  if(timer_temp1 == 0) 		count_temp1++;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d104      	bne.n	8000f06 <TIM2_IRQHandler+0x42>
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <TIM2_IRQHandler+0x50>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <TIM2_IRQHandler+0x50>)
 8000f04:	6013      	str	r3, [r2, #0]
//  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000028 	.word	0x20000028
 8000f14:	20000238 	.word	0x20000238

08000f18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f1e:	4811      	ldr	r0, [pc, #68]	; (8000f64 <TIM3_IRQHandler+0x4c>)
 8000f20:	f002 f8da 	bl	80030d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  uint16_t timer_temp2;
//    if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE)){
  	  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <TIM3_IRQHandler+0x4c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f06f 0201 	mvn.w	r2, #1
 8000f2c:	611a      	str	r2, [r3, #16]
  	  timer_temp2 = __HAL_TIM_GET_COUNTER(&htim3);
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <TIM3_IRQHandler+0x4c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	80fb      	strh	r3, [r7, #6]
  	  if(timer_temp2 == 65535) 	count_temp2--;
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d104      	bne.n	8000f4a <TIM3_IRQHandler+0x32>
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <TIM3_IRQHandler+0x50>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <TIM3_IRQHandler+0x50>)
 8000f48:	6013      	str	r3, [r2, #0]
  	  if(timer_temp2 == 0) 		count_temp2++;
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d104      	bne.n	8000f5a <TIM3_IRQHandler+0x42>
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <TIM3_IRQHandler+0x50>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <TIM3_IRQHandler+0x50>)
 8000f58:	6013      	str	r3, [r2, #0]
//    }
  /* USER CODE END TIM3_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000070 	.word	0x20000070
 8000f68:	2000023c 	.word	0x2000023c

08000f6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8000f70:	4870      	ldr	r0, [pc, #448]	; (8001134 <TIM4_IRQHandler+0x1c8>)
 8000f72:	f002 f8b1 	bl	80030d8 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */
//	if(__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE)){
		__HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 8000f76:	4b6f      	ldr	r3, [pc, #444]	; (8001134 <TIM4_IRQHandler+0x1c8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f06f 0201 	mvn.w	r2, #1
 8000f7e:	611a      	str	r2, [r3, #16]
		encoder_pulse1 =  __HAL_TIM_GET_COUNTER(&htim2) + 65536*count_temp1;
 8000f80:	4b6d      	ldr	r3, [pc, #436]	; (8001138 <TIM4_IRQHandler+0x1cc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f86:	4b6d      	ldr	r3, [pc, #436]	; (800113c <TIM4_IRQHandler+0x1d0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	041b      	lsls	r3, r3, #16
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a6c      	ldr	r2, [pc, #432]	; (8001140 <TIM4_IRQHandler+0x1d4>)
 8000f90:	6013      	str	r3, [r2, #0]
		encoder_pulse2 =  __HAL_TIM_GET_COUNTER(&htim3) + 65536*count_temp2;
 8000f92:	4b6c      	ldr	r3, [pc, #432]	; (8001144 <TIM4_IRQHandler+0x1d8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f98:	4b6b      	ldr	r3, [pc, #428]	; (8001148 <TIM4_IRQHandler+0x1dc>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a6a      	ldr	r2, [pc, #424]	; (800114c <TIM4_IRQHandler+0x1e0>)
 8000fa2:	6013      	str	r3, [r2, #0]
		count_recent1 = encoder_pulse1;
 8000fa4:	4b66      	ldr	r3, [pc, #408]	; (8001140 <TIM4_IRQHandler+0x1d4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a69      	ldr	r2, [pc, #420]	; (8001150 <TIM4_IRQHandler+0x1e4>)
 8000faa:	6013      	str	r3, [r2, #0]
		count_recent2 = encoder_pulse2;
 8000fac:	4b67      	ldr	r3, [pc, #412]	; (800114c <TIM4_IRQHandler+0x1e0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a68      	ldr	r2, [pc, #416]	; (8001154 <TIM4_IRQHandler+0x1e8>)
 8000fb2:	6013      	str	r3, [r2, #0]
		if (count_recent1 > count_update1)
 8000fb4:	4b66      	ldr	r3, [pc, #408]	; (8001150 <TIM4_IRQHandler+0x1e4>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b67      	ldr	r3, [pc, #412]	; (8001158 <TIM4_IRQHandler+0x1ec>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d910      	bls.n	8000fe2 <TIM4_IRQHandler+0x76>
		{
			motor_speed1 = (int16_t)((count_recent1 - count_update1)*6000*100/2970/2);  //ngat 10ms , encoder 85 xung
 8000fc0:	4b63      	ldr	r3, [pc, #396]	; (8001150 <TIM4_IRQHandler+0x1e4>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b64      	ldr	r3, [pc, #400]	; (8001158 <TIM4_IRQHandler+0x1ec>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	4a64      	ldr	r2, [pc, #400]	; (800115c <TIM4_IRQHandler+0x1f0>)
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	4a63      	ldr	r2, [pc, #396]	; (8001160 <TIM4_IRQHandler+0x1f4>)
 8000fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b61      	ldr	r3, [pc, #388]	; (8001164 <TIM4_IRQHandler+0x1f8>)
 8000fde:	801a      	strh	r2, [r3, #0]
 8000fe0:	e01c      	b.n	800101c <TIM4_IRQHandler+0xb0>
		}
		else if (count_recent1 < count_update1)
 8000fe2:	4b5b      	ldr	r3, [pc, #364]	; (8001150 <TIM4_IRQHandler+0x1e4>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <TIM4_IRQHandler+0x1ec>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d213      	bcs.n	8001016 <TIM4_IRQHandler+0xaa>
		{
			motor_speed1 = 0- (int16_t)((count_update1 - count_recent1)*6000*100/2970/2);  //ngat 10ms , encoder 85 xung
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <TIM4_IRQHandler+0x1ec>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <TIM4_IRQHandler+0x1e4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a58      	ldr	r2, [pc, #352]	; (800115c <TIM4_IRQHandler+0x1f0>)
 8000ffa:	fb02 f303 	mul.w	r3, r2, r3
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	4a57      	ldr	r2, [pc, #348]	; (8001160 <TIM4_IRQHandler+0x1f4>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	b29b      	uxth	r3, r3
 800100a:	425b      	negs	r3, r3
 800100c:	b29b      	uxth	r3, r3
 800100e:	b21a      	sxth	r2, r3
 8001010:	4b54      	ldr	r3, [pc, #336]	; (8001164 <TIM4_IRQHandler+0x1f8>)
 8001012:	801a      	strh	r2, [r3, #0]
 8001014:	e002      	b.n	800101c <TIM4_IRQHandler+0xb0>
		}
		else {	motor_speed1 = 0;  }
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <TIM4_IRQHandler+0x1f8>)
 8001018:	2200      	movs	r2, #0
 800101a:	801a      	strh	r2, [r3, #0]

		/*calculate motor 2 speed*/
		if (count_recent2 > count_update2)
 800101c:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <TIM4_IRQHandler+0x1e8>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b51      	ldr	r3, [pc, #324]	; (8001168 <TIM4_IRQHandler+0x1fc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d910      	bls.n	800104a <TIM4_IRQHandler+0xde>
		{
			motor_speed2 = (int16_t)((count_recent2 - count_update2)*6000*100/2970/2);  //ngat 10ms , encoder 85 xung
 8001028:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <TIM4_IRQHandler+0x1e8>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <TIM4_IRQHandler+0x1fc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	4a4a      	ldr	r2, [pc, #296]	; (800115c <TIM4_IRQHandler+0x1f0>)
 8001034:	fb02 f303 	mul.w	r3, r2, r3
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	4a49      	ldr	r2, [pc, #292]	; (8001160 <TIM4_IRQHandler+0x1f4>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	4b49      	ldr	r3, [pc, #292]	; (800116c <TIM4_IRQHandler+0x200>)
 8001046:	801a      	strh	r2, [r3, #0]
 8001048:	e01c      	b.n	8001084 <TIM4_IRQHandler+0x118>
		}
		else if (count_recent2 < count_update2)
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <TIM4_IRQHandler+0x1e8>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <TIM4_IRQHandler+0x1fc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d213      	bcs.n	800107e <TIM4_IRQHandler+0x112>
		{
			motor_speed2 = 0- (int16_t)((count_update2 - count_recent2)*6000*100/2970/2);  //ngat 10ms , encoder 85xung
 8001056:	4b44      	ldr	r3, [pc, #272]	; (8001168 <TIM4_IRQHandler+0x1fc>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <TIM4_IRQHandler+0x1e8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	4a3e      	ldr	r2, [pc, #248]	; (800115c <TIM4_IRQHandler+0x1f0>)
 8001062:	fb02 f303 	mul.w	r3, r2, r3
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	4a3d      	ldr	r2, [pc, #244]	; (8001160 <TIM4_IRQHandler+0x1f4>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29b      	uxth	r3, r3
 8001072:	425b      	negs	r3, r3
 8001074:	b29b      	uxth	r3, r3
 8001076:	b21a      	sxth	r2, r3
 8001078:	4b3c      	ldr	r3, [pc, #240]	; (800116c <TIM4_IRQHandler+0x200>)
 800107a:	801a      	strh	r2, [r3, #0]
 800107c:	e002      	b.n	8001084 <TIM4_IRQHandler+0x118>
		}
		else{	motor_speed2 = 0;  }
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <TIM4_IRQHandler+0x200>)
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
		/*update count 1 and count 2*/
		count_update1 = count_recent1;
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <TIM4_IRQHandler+0x1e4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a33      	ldr	r2, [pc, #204]	; (8001158 <TIM4_IRQHandler+0x1ec>)
 800108a:	6013      	str	r3, [r2, #0]
		count_update2 = count_recent2;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <TIM4_IRQHandler+0x1e8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a35      	ldr	r2, [pc, #212]	; (8001168 <TIM4_IRQHandler+0x1fc>)
 8001092:	6013      	str	r3, [r2, #0]

//	    int fb_rpm_left_, fb_rpm_right_;

	    { // Make transmit data
		    memset(dataTran, 0, UART_TRAN_BUFFER_SIZE);
 8001094:	220c      	movs	r2, #12
 8001096:	2100      	movs	r1, #0
 8001098:	4835      	ldr	r0, [pc, #212]	; (8001170 <TIM4_IRQHandler+0x204>)
 800109a:	f003 fdcf 	bl	8004c3c <memset>
		    dataTran[0] = 0x2B;
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <TIM4_IRQHandler+0x204>)
 80010a0:	222b      	movs	r2, #43	; 0x2b
 80010a2:	701a      	strb	r2, [r3, #0]
		    dataTran[1] = (uint8_t)12;
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <TIM4_IRQHandler+0x204>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	705a      	strb	r2, [r3, #1]
		    dataTran[2] = 0x00;
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <TIM4_IRQHandler+0x204>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	709a      	strb	r2, [r3, #2]

		    tran_cnt++;
 80010b0:	4b30      	ldr	r3, [pc, #192]	; (8001174 <TIM4_IRQHandler+0x208>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <TIM4_IRQHandler+0x208>)
 80010b8:	6013      	str	r3, [r2, #0]
		    dataTran[3] = tran_cnt >> 24;
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <TIM4_IRQHandler+0x208>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0e1b      	lsrs	r3, r3, #24
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <TIM4_IRQHandler+0x204>)
 80010c4:	70da      	strb	r2, [r3, #3]
			dataTran[4] = tran_cnt >> 16;
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <TIM4_IRQHandler+0x208>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <TIM4_IRQHandler+0x204>)
 80010d0:	711a      	strb	r2, [r3, #4]
			dataTran[5] = tran_cnt >> 8;
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <TIM4_IRQHandler+0x208>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <TIM4_IRQHandler+0x204>)
 80010dc:	715a      	strb	r2, [r3, #5]
			dataTran[6] = tran_cnt;
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <TIM4_IRQHandler+0x208>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <TIM4_IRQHandler+0x204>)
 80010e6:	719a      	strb	r2, [r3, #6]

			dataTran[7] = motor_speed1 >> 8;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <TIM4_IRQHandler+0x1f8>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	121b      	asrs	r3, r3, #8
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <TIM4_IRQHandler+0x204>)
 80010f6:	71da      	strb	r2, [r3, #7]
			dataTran[8] = motor_speed1;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <TIM4_IRQHandler+0x1f8>)
 80010fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <TIM4_IRQHandler+0x204>)
 8001102:	721a      	strb	r2, [r3, #8]
			dataTran[9] = motor_speed2 >> 8;
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <TIM4_IRQHandler+0x200>)
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	121b      	asrs	r3, r3, #8
 800110c:	b21b      	sxth	r3, r3
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <TIM4_IRQHandler+0x204>)
 8001112:	725a      	strb	r2, [r3, #9]
			dataTran[10] = motor_speed2;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <TIM4_IRQHandler+0x200>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <TIM4_IRQHandler+0x204>)
 800111e:	729a      	strb	r2, [r3, #10]

			dataTran[11] = 0x3F;
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <TIM4_IRQHandler+0x204>)
 8001122:	223f      	movs	r2, #63	; 0x3f
 8001124:	72da      	strb	r2, [r3, #11]
			HAL_UART_Transmit_DMA(&huart1, dataTran, UART_TRAN_BUFFER_SIZE);
 8001126:	220c      	movs	r2, #12
 8001128:	4911      	ldr	r1, [pc, #68]	; (8001170 <TIM4_IRQHandler+0x204>)
 800112a:	4813      	ldr	r0, [pc, #76]	; (8001178 <TIM4_IRQHandler+0x20c>)
 800112c:	f002 ffb6 	bl	800409c <HAL_UART_Transmit_DMA>
//			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),100);
//			count_test = 0;
//		}
//	}
  /* USER CODE END TIM4_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000b8 	.word	0x200000b8
 8001138:	20000028 	.word	0x20000028
 800113c:	20000238 	.word	0x20000238
 8001140:	20000230 	.word	0x20000230
 8001144:	20000070 	.word	0x20000070
 8001148:	2000023c 	.word	0x2000023c
 800114c:	20000234 	.word	0x20000234
 8001150:	20000240 	.word	0x20000240
 8001154:	20000244 	.word	0x20000244
 8001158:	20000248 	.word	0x20000248
 800115c:	000927c0 	.word	0x000927c0
 8001160:	2c21c9df 	.word	0x2c21c9df
 8001164:	20000258 	.word	0x20000258
 8001168:	2000024c 	.word	0x2000024c
 800116c:	2000025a 	.word	0x2000025a
 8001170:	20000220 	.word	0x20000220
 8001174:	20000250 	.word	0x20000250
 8001178:	20000148 	.word	0x20000148

0800117c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <USART1_IRQHandler+0x10>)
 8001182:	f003 f827 	bl	80041d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000148 	.word	0x20000148

08001190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	; (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c2:	f7ff ffe5 	bl	8001190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f003 fd15 	bl	8004bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff f82b 	bl	8000224 <main>
  bx lr
 80011ce:	4770      	bx	lr
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011d8:	08004c94 	.word	0x08004c94
  ldr r2, =_sbss
 80011dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011e0:	20000260 	.word	0x20000260

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f947 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fc46 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f95f 	bl	80014f6 <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001250:	f000 f927 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000008 	.word	0x20000008
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x20>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_IncTick+0x20>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000008 	.word	0x20000008
 8001294:	2000025c 	.word	0x2000025c

08001298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <HAL_GetTick+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	2000025c 	.word	0x2000025c

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff fff0 	bl	8001298 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffe0 	bl	8001298 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	; (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4906      	ldr	r1, [pc, #24]	; (800138c <__NVIC_EnableIRQ+0x34>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800146c:	f7ff ff90 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff2d 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff42 	bl	800133c <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff35 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa2 	bl	8001448 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e059      	b.n	80015da <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_DMA_Init+0xd4>)
 800152e:	429a      	cmp	r2, r3
 8001530:	d80f      	bhi.n	8001552 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_DMA_Init+0xd8>)
 800153a:	4413      	add	r3, r2
 800153c:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <HAL_DMA_Init+0xdc>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	009a      	lsls	r2, r3, #2
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <HAL_DMA_Init+0xe0>)
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001550:	e00e      	b.n	8001570 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <HAL_DMA_Init+0xe4>)
 800155a:	4413      	add	r3, r2
 800155c:	4a23      	ldr	r2, [pc, #140]	; (80015ec <HAL_DMA_Init+0xdc>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	009a      	lsls	r2, r3, #2
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_DMA_Init+0xe8>)
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001586:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800158a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40020407 	.word	0x40020407
 80015e8:	bffdfff8 	.word	0xbffdfff8
 80015ec:	cccccccd 	.word	0xcccccccd
 80015f0:	40020000 	.word	0x40020000
 80015f4:	bffdfbf8 	.word	0xbffdfbf8
 80015f8:	40020400 	.word	0x40020400

080015fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_DMA_Start_IT+0x20>
 8001618:	2302      	movs	r3, #2
 800161a:	e04a      	b.n	80016b2 <HAL_DMA_Start_IT+0xb6>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800162a:	2b01      	cmp	r3, #1
 800162c:	d13a      	bne.n	80016a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2202      	movs	r2, #2
 8001632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 fbb0 	bl	8001db8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	2b00      	cmp	r3, #0
 800165e:	d008      	beq.n	8001672 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 020e 	orr.w	r2, r2, #14
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e00f      	b.n	8001692 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0204 	bic.w	r2, r2, #4
 8001680:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 020a 	orr.w	r2, r2, #10
 8001690:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e005      	b.n	80016b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016ac:	2302      	movs	r3, #2
 80016ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d008      	beq.n	80016e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2204      	movs	r2, #4
 80016d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e020      	b.n	8001724 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 020e 	bic.w	r2, r2, #14
 80016f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0201 	bic.w	r2, r2, #1
 8001700:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	2101      	movs	r1, #1
 800170c:	fa01 f202 	lsl.w	r2, r1, r2
 8001710:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
	...

08001730 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001742:	2b02      	cmp	r3, #2
 8001744:	d005      	beq.n	8001752 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2204      	movs	r2, #4
 800174a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e0d6      	b.n	8001900 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 020e 	bic.w	r2, r2, #14
 8001760:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0201 	bic.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4b64      	ldr	r3, [pc, #400]	; (800190c <HAL_DMA_Abort_IT+0x1dc>)
 800177a:	429a      	cmp	r2, r3
 800177c:	d958      	bls.n	8001830 <HAL_DMA_Abort_IT+0x100>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a63      	ldr	r2, [pc, #396]	; (8001910 <HAL_DMA_Abort_IT+0x1e0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d04f      	beq.n	8001828 <HAL_DMA_Abort_IT+0xf8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a61      	ldr	r2, [pc, #388]	; (8001914 <HAL_DMA_Abort_IT+0x1e4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d048      	beq.n	8001824 <HAL_DMA_Abort_IT+0xf4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a60      	ldr	r2, [pc, #384]	; (8001918 <HAL_DMA_Abort_IT+0x1e8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d040      	beq.n	800181e <HAL_DMA_Abort_IT+0xee>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a5e      	ldr	r2, [pc, #376]	; (800191c <HAL_DMA_Abort_IT+0x1ec>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d038      	beq.n	8001818 <HAL_DMA_Abort_IT+0xe8>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a5d      	ldr	r2, [pc, #372]	; (8001920 <HAL_DMA_Abort_IT+0x1f0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d030      	beq.n	8001812 <HAL_DMA_Abort_IT+0xe2>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <HAL_DMA_Abort_IT+0x1f4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d028      	beq.n	800180c <HAL_DMA_Abort_IT+0xdc>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a53      	ldr	r2, [pc, #332]	; (800190c <HAL_DMA_Abort_IT+0x1dc>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d020      	beq.n	8001806 <HAL_DMA_Abort_IT+0xd6>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a57      	ldr	r2, [pc, #348]	; (8001928 <HAL_DMA_Abort_IT+0x1f8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_DMA_Abort_IT+0xd2>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a56      	ldr	r2, [pc, #344]	; (800192c <HAL_DMA_Abort_IT+0x1fc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d012      	beq.n	80017fe <HAL_DMA_Abort_IT+0xce>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a54      	ldr	r2, [pc, #336]	; (8001930 <HAL_DMA_Abort_IT+0x200>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00a      	beq.n	80017f8 <HAL_DMA_Abort_IT+0xc8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a53      	ldr	r2, [pc, #332]	; (8001934 <HAL_DMA_Abort_IT+0x204>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d102      	bne.n	80017f2 <HAL_DMA_Abort_IT+0xc2>
 80017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f0:	e01b      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 80017f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f6:	e018      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 80017f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fc:	e015      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 80017fe:	2310      	movs	r3, #16
 8001800:	e013      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 8001802:	2301      	movs	r3, #1
 8001804:	e011      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 8001806:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800180a:	e00e      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 800180c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001810:	e00b      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 8001812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001816:	e008      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 8001818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181c:	e005      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 800181e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001822:	e002      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 8001824:	2310      	movs	r3, #16
 8001826:	e000      	b.n	800182a <HAL_DMA_Abort_IT+0xfa>
 8001828:	2301      	movs	r3, #1
 800182a:	4a43      	ldr	r2, [pc, #268]	; (8001938 <HAL_DMA_Abort_IT+0x208>)
 800182c:	6053      	str	r3, [r2, #4]
 800182e:	e057      	b.n	80018e0 <HAL_DMA_Abort_IT+0x1b0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a36      	ldr	r2, [pc, #216]	; (8001910 <HAL_DMA_Abort_IT+0x1e0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d04f      	beq.n	80018da <HAL_DMA_Abort_IT+0x1aa>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a35      	ldr	r2, [pc, #212]	; (8001914 <HAL_DMA_Abort_IT+0x1e4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d048      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x1a6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a33      	ldr	r2, [pc, #204]	; (8001918 <HAL_DMA_Abort_IT+0x1e8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d040      	beq.n	80018d0 <HAL_DMA_Abort_IT+0x1a0>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a32      	ldr	r2, [pc, #200]	; (800191c <HAL_DMA_Abort_IT+0x1ec>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d038      	beq.n	80018ca <HAL_DMA_Abort_IT+0x19a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a30      	ldr	r2, [pc, #192]	; (8001920 <HAL_DMA_Abort_IT+0x1f0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d030      	beq.n	80018c4 <HAL_DMA_Abort_IT+0x194>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2f      	ldr	r2, [pc, #188]	; (8001924 <HAL_DMA_Abort_IT+0x1f4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d028      	beq.n	80018be <HAL_DMA_Abort_IT+0x18e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a26      	ldr	r2, [pc, #152]	; (800190c <HAL_DMA_Abort_IT+0x1dc>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d020      	beq.n	80018b8 <HAL_DMA_Abort_IT+0x188>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <HAL_DMA_Abort_IT+0x1f8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d019      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x184>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a29      	ldr	r2, [pc, #164]	; (800192c <HAL_DMA_Abort_IT+0x1fc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d012      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x180>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a28      	ldr	r2, [pc, #160]	; (8001930 <HAL_DMA_Abort_IT+0x200>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00a      	beq.n	80018aa <HAL_DMA_Abort_IT+0x17a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a26      	ldr	r2, [pc, #152]	; (8001934 <HAL_DMA_Abort_IT+0x204>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d102      	bne.n	80018a4 <HAL_DMA_Abort_IT+0x174>
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a2:	e01b      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a8:	e018      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ae:	e015      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018b0:	2310      	movs	r3, #16
 80018b2:	e013      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e011      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018bc:	e00e      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018c2:	e00b      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c8:	e008      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	e005      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d4:	e002      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018d6:	2310      	movs	r3, #16
 80018d8:	e000      	b.n	80018dc <HAL_DMA_Abort_IT+0x1ac>
 80018da:	2301      	movs	r3, #1
 80018dc:	4a17      	ldr	r2, [pc, #92]	; (800193c <HAL_DMA_Abort_IT+0x20c>)
 80018de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
    } 
  }
  return status;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020080 	.word	0x40020080
 8001910:	40020008 	.word	0x40020008
 8001914:	4002001c 	.word	0x4002001c
 8001918:	40020030 	.word	0x40020030
 800191c:	40020044 	.word	0x40020044
 8001920:	40020058 	.word	0x40020058
 8001924:	4002006c 	.word	0x4002006c
 8001928:	40020408 	.word	0x40020408
 800192c:	4002041c 	.word	0x4002041c
 8001930:	40020430 	.word	0x40020430
 8001934:	40020444 	.word	0x40020444
 8001938:	40020400 	.word	0x40020400
 800193c:	40020000 	.word	0x40020000

08001940 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	2204      	movs	r2, #4
 800195e:	409a      	lsls	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80f1 	beq.w	8001b4c <HAL_DMA_IRQHandler+0x20c>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80eb 	beq.w	8001b4c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0204 	bic.w	r2, r2, #4
 8001992:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <HAL_DMA_IRQHandler+0x1d8>)
 800199c:	429a      	cmp	r2, r3
 800199e:	d958      	bls.n	8001a52 <HAL_DMA_IRQHandler+0x112>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a5d      	ldr	r2, [pc, #372]	; (8001b1c <HAL_DMA_IRQHandler+0x1dc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d04f      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x10a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a5c      	ldr	r2, [pc, #368]	; (8001b20 <HAL_DMA_IRQHandler+0x1e0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d048      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x106>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5a      	ldr	r2, [pc, #360]	; (8001b24 <HAL_DMA_IRQHandler+0x1e4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d040      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x100>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a59      	ldr	r2, [pc, #356]	; (8001b28 <HAL_DMA_IRQHandler+0x1e8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d038      	beq.n	8001a3a <HAL_DMA_IRQHandler+0xfa>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a57      	ldr	r2, [pc, #348]	; (8001b2c <HAL_DMA_IRQHandler+0x1ec>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d030      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xf4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <HAL_DMA_IRQHandler+0x1f0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d028      	beq.n	8001a2e <HAL_DMA_IRQHandler+0xee>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a4d      	ldr	r2, [pc, #308]	; (8001b18 <HAL_DMA_IRQHandler+0x1d8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d020      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xe8>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_DMA_IRQHandler+0x1f4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d019      	beq.n	8001a24 <HAL_DMA_IRQHandler+0xe4>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a50      	ldr	r2, [pc, #320]	; (8001b38 <HAL_DMA_IRQHandler+0x1f8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d012      	beq.n	8001a20 <HAL_DMA_IRQHandler+0xe0>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a4f      	ldr	r2, [pc, #316]	; (8001b3c <HAL_DMA_IRQHandler+0x1fc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00a      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xda>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_DMA_IRQHandler+0x200>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d102      	bne.n	8001a14 <HAL_DMA_IRQHandler+0xd4>
 8001a0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a12:	e01b      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a18:	e018      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1e:	e015      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a20:	2340      	movs	r3, #64	; 0x40
 8001a22:	e013      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e011      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a2c:	e00e      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a32:	e00b      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a38:	e008      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a3e:	e005      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a44:	e002      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a46:	2340      	movs	r3, #64	; 0x40
 8001a48:	e000      	b.n	8001a4c <HAL_DMA_IRQHandler+0x10c>
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	4a3d      	ldr	r2, [pc, #244]	; (8001b44 <HAL_DMA_IRQHandler+0x204>)
 8001a4e:	6053      	str	r3, [r2, #4]
 8001a50:	e057      	b.n	8001b02 <HAL_DMA_IRQHandler+0x1c2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a31      	ldr	r2, [pc, #196]	; (8001b1c <HAL_DMA_IRQHandler+0x1dc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d04f      	beq.n	8001afc <HAL_DMA_IRQHandler+0x1bc>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <HAL_DMA_IRQHandler+0x1e0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d048      	beq.n	8001af8 <HAL_DMA_IRQHandler+0x1b8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2e      	ldr	r2, [pc, #184]	; (8001b24 <HAL_DMA_IRQHandler+0x1e4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d040      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x1b2>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2c      	ldr	r2, [pc, #176]	; (8001b28 <HAL_DMA_IRQHandler+0x1e8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d038      	beq.n	8001aec <HAL_DMA_IRQHandler+0x1ac>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <HAL_DMA_IRQHandler+0x1ec>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d030      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x1a6>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a29      	ldr	r2, [pc, #164]	; (8001b30 <HAL_DMA_IRQHandler+0x1f0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d028      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x1a0>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <HAL_DMA_IRQHandler+0x1d8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d020      	beq.n	8001ada <HAL_DMA_IRQHandler+0x19a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <HAL_DMA_IRQHandler+0x1f4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x196>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_DMA_IRQHandler+0x1f8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d012      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x192>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_DMA_IRQHandler+0x1fc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00a      	beq.n	8001acc <HAL_DMA_IRQHandler+0x18c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <HAL_DMA_IRQHandler+0x200>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d102      	bne.n	8001ac6 <HAL_DMA_IRQHandler+0x186>
 8001ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ac4:	e01b      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001ac6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001aca:	e018      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad0:	e015      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001ad2:	2340      	movs	r3, #64	; 0x40
 8001ad4:	e013      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e011      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001ada:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ade:	e00e      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001ae0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ae4:	e00b      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001ae6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001aea:	e008      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001af0:	e005      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af6:	e002      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001af8:	2340      	movs	r3, #64	; 0x40
 8001afa:	e000      	b.n	8001afe <HAL_DMA_IRQHandler+0x1be>
 8001afc:	2304      	movs	r3, #4
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <HAL_DMA_IRQHandler+0x208>)
 8001b00:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8136 	beq.w	8001d78 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b14:	e130      	b.n	8001d78 <HAL_DMA_IRQHandler+0x438>
 8001b16:	bf00      	nop
 8001b18:	40020080 	.word	0x40020080
 8001b1c:	40020008 	.word	0x40020008
 8001b20:	4002001c 	.word	0x4002001c
 8001b24:	40020030 	.word	0x40020030
 8001b28:	40020044 	.word	0x40020044
 8001b2c:	40020058 	.word	0x40020058
 8001b30:	4002006c 	.word	0x4002006c
 8001b34:	40020408 	.word	0x40020408
 8001b38:	4002041c 	.word	0x4002041c
 8001b3c:	40020430 	.word	0x40020430
 8001b40:	40020444 	.word	0x40020444
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	2202      	movs	r2, #2
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80dd 	beq.w	8001d18 <HAL_DMA_IRQHandler+0x3d8>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80d7 	beq.w	8001d18 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10b      	bne.n	8001b90 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 020a 	bic.w	r2, r2, #10
 8001b86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b7b      	ldr	r3, [pc, #492]	; (8001d84 <HAL_DMA_IRQHandler+0x444>)
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d958      	bls.n	8001c4e <HAL_DMA_IRQHandler+0x30e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a79      	ldr	r2, [pc, #484]	; (8001d88 <HAL_DMA_IRQHandler+0x448>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d04f      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x306>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a78      	ldr	r2, [pc, #480]	; (8001d8c <HAL_DMA_IRQHandler+0x44c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d048      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x302>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a76      	ldr	r2, [pc, #472]	; (8001d90 <HAL_DMA_IRQHandler+0x450>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d040      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x2fc>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a75      	ldr	r2, [pc, #468]	; (8001d94 <HAL_DMA_IRQHandler+0x454>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d038      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x2f6>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a73      	ldr	r2, [pc, #460]	; (8001d98 <HAL_DMA_IRQHandler+0x458>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d030      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2f0>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a72      	ldr	r2, [pc, #456]	; (8001d9c <HAL_DMA_IRQHandler+0x45c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d028      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x2ea>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a69      	ldr	r2, [pc, #420]	; (8001d84 <HAL_DMA_IRQHandler+0x444>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d020      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2e4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_DMA_IRQHandler+0x460>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d019      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x2e0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6c      	ldr	r2, [pc, #432]	; (8001da4 <HAL_DMA_IRQHandler+0x464>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d012      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x2dc>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <HAL_DMA_IRQHandler+0x468>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00a      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x2d6>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a69      	ldr	r2, [pc, #420]	; (8001dac <HAL_DMA_IRQHandler+0x46c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d102      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x2d0>
 8001c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0e:	e01b      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c14:	e018      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1a:	e015      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	e013      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e011      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c28:	e00e      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c2e:	e00b      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c34:	e008      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3a:	e005      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c40:	e002      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c42:	2320      	movs	r3, #32
 8001c44:	e000      	b.n	8001c48 <HAL_DMA_IRQHandler+0x308>
 8001c46:	2302      	movs	r3, #2
 8001c48:	4a59      	ldr	r2, [pc, #356]	; (8001db0 <HAL_DMA_IRQHandler+0x470>)
 8001c4a:	6053      	str	r3, [r2, #4]
 8001c4c:	e057      	b.n	8001cfe <HAL_DMA_IRQHandler+0x3be>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a4d      	ldr	r2, [pc, #308]	; (8001d88 <HAL_DMA_IRQHandler+0x448>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04f      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x3b8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_DMA_IRQHandler+0x44c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d048      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x3b4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <HAL_DMA_IRQHandler+0x450>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d040      	beq.n	8001cee <HAL_DMA_IRQHandler+0x3ae>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a48      	ldr	r2, [pc, #288]	; (8001d94 <HAL_DMA_IRQHandler+0x454>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d038      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x3a8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a47      	ldr	r2, [pc, #284]	; (8001d98 <HAL_DMA_IRQHandler+0x458>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d030      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x3a2>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a45      	ldr	r2, [pc, #276]	; (8001d9c <HAL_DMA_IRQHandler+0x45c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d028      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x39c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a3d      	ldr	r2, [pc, #244]	; (8001d84 <HAL_DMA_IRQHandler+0x444>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d020      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x396>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a41      	ldr	r2, [pc, #260]	; (8001da0 <HAL_DMA_IRQHandler+0x460>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d019      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x392>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a40      	ldr	r2, [pc, #256]	; (8001da4 <HAL_DMA_IRQHandler+0x464>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d012      	beq.n	8001cce <HAL_DMA_IRQHandler+0x38e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a3e      	ldr	r2, [pc, #248]	; (8001da8 <HAL_DMA_IRQHandler+0x468>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00a      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x388>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a3d      	ldr	r2, [pc, #244]	; (8001dac <HAL_DMA_IRQHandler+0x46c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d102      	bne.n	8001cc2 <HAL_DMA_IRQHandler+0x382>
 8001cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc0:	e01b      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc6:	e018      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ccc:	e015      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e013      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e011      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001cd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cda:	e00e      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001cdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ce0:	e00b      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001ce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce6:	e008      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cec:	e005      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf2:	e002      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e000      	b.n	8001cfa <HAL_DMA_IRQHandler+0x3ba>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	4a2e      	ldr	r2, [pc, #184]	; (8001db4 <HAL_DMA_IRQHandler+0x474>)
 8001cfc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d034      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d16:	e02f      	b.n	8001d78 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d028      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x43a>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d023      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 020e 	bic.w	r2, r2, #14
 8001d40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d004      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	4798      	blx	r3
    }
  }
  return;
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
}
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40020080 	.word	0x40020080
 8001d88:	40020008 	.word	0x40020008
 8001d8c:	4002001c 	.word	0x4002001c
 8001d90:	40020030 	.word	0x40020030
 8001d94:	40020044 	.word	0x40020044
 8001d98:	40020058 	.word	0x40020058
 8001d9c:	4002006c 	.word	0x4002006c
 8001da0:	40020408 	.word	0x40020408
 8001da4:	4002041c 	.word	0x4002041c
 8001da8:	40020430 	.word	0x40020430
 8001dac:	40020444 	.word	0x40020444
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020000 	.word	0x40020000

08001db8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d108      	bne.n	8001df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001df6:	e007      	b.n	8001e08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b08b      	sub	sp, #44	; 0x2c
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e179      	b.n	800211c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f040 8168 	bne.w	8002116 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a96      	ldr	r2, [pc, #600]	; (80020a4 <HAL_GPIO_Init+0x290>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d05e      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e50:	4a94      	ldr	r2, [pc, #592]	; (80020a4 <HAL_GPIO_Init+0x290>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d875      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e56:	4a94      	ldr	r2, [pc, #592]	; (80020a8 <HAL_GPIO_Init+0x294>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d058      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e5c:	4a92      	ldr	r2, [pc, #584]	; (80020a8 <HAL_GPIO_Init+0x294>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d86f      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e62:	4a92      	ldr	r2, [pc, #584]	; (80020ac <HAL_GPIO_Init+0x298>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d052      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e68:	4a90      	ldr	r2, [pc, #576]	; (80020ac <HAL_GPIO_Init+0x298>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d869      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e6e:	4a90      	ldr	r2, [pc, #576]	; (80020b0 <HAL_GPIO_Init+0x29c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d04c      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e74:	4a8e      	ldr	r2, [pc, #568]	; (80020b0 <HAL_GPIO_Init+0x29c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d863      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e7a:	4a8e      	ldr	r2, [pc, #568]	; (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d046      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
 8001e80:	4a8c      	ldr	r2, [pc, #560]	; (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d85d      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d82a      	bhi.n	8001ee0 <HAL_GPIO_Init+0xcc>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d859      	bhi.n	8001f42 <HAL_GPIO_Init+0x12e>
 8001e8e:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_GPIO_Init+0x80>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001efb 	.word	0x08001efb
 8001ea0:	08001f3d 	.word	0x08001f3d
 8001ea4:	08001f43 	.word	0x08001f43
 8001ea8:	08001f43 	.word	0x08001f43
 8001eac:	08001f43 	.word	0x08001f43
 8001eb0:	08001f43 	.word	0x08001f43
 8001eb4:	08001f43 	.word	0x08001f43
 8001eb8:	08001f43 	.word	0x08001f43
 8001ebc:	08001f43 	.word	0x08001f43
 8001ec0:	08001f43 	.word	0x08001f43
 8001ec4:	08001f43 	.word	0x08001f43
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f43 	.word	0x08001f43
 8001ed0:	08001f43 	.word	0x08001f43
 8001ed4:	08001f43 	.word	0x08001f43
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	4a75      	ldr	r2, [pc, #468]	; (80020b8 <HAL_GPIO_Init+0x2a4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ee6:	e02c      	b.n	8001f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e029      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e024      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3308      	adds	r3, #8
 8001f00:	623b      	str	r3, [r7, #32]
          break;
 8001f02:	e01f      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	330c      	adds	r3, #12
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e01a      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f16:	2304      	movs	r3, #4
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e013      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f24:	2308      	movs	r3, #8
 8001f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	611a      	str	r2, [r3, #16]
          break;
 8001f2e:	e009      	b.n	8001f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	615a      	str	r2, [r3, #20]
          break;
 8001f3a:	e003      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x130>
          break;
 8001f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d801      	bhi.n	8001f4e <HAL_GPIO_Init+0x13a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	e001      	b.n	8001f52 <HAL_GPIO_Init+0x13e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d802      	bhi.n	8001f60 <HAL_GPIO_Init+0x14c>
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x152>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3b08      	subs	r3, #8
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80c1 	beq.w	8002116 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f94:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_GPIO_Init+0x2a8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a48      	ldr	r2, [pc, #288]	; (80020bc <HAL_GPIO_Init+0x2a8>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_GPIO_Init+0x2a8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fac:	4a44      	ldr	r2, [pc, #272]	; (80020c0 <HAL_GPIO_Init+0x2ac>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3c      	ldr	r2, [pc, #240]	; (80020c4 <HAL_GPIO_Init+0x2b0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d01f      	beq.n	8002018 <HAL_GPIO_Init+0x204>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <HAL_GPIO_Init+0x2b4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d019      	beq.n	8002014 <HAL_GPIO_Init+0x200>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3a      	ldr	r2, [pc, #232]	; (80020cc <HAL_GPIO_Init+0x2b8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_GPIO_Init+0x1fc>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a39      	ldr	r2, [pc, #228]	; (80020d0 <HAL_GPIO_Init+0x2bc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00d      	beq.n	800200c <HAL_GPIO_Init+0x1f8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a38      	ldr	r2, [pc, #224]	; (80020d4 <HAL_GPIO_Init+0x2c0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <HAL_GPIO_Init+0x1f4>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a37      	ldr	r2, [pc, #220]	; (80020d8 <HAL_GPIO_Init+0x2c4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_GPIO_Init+0x1f0>
 8002000:	2305      	movs	r3, #5
 8002002:	e00a      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002004:	2306      	movs	r3, #6
 8002006:	e008      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002008:	2304      	movs	r3, #4
 800200a:	e006      	b.n	800201a <HAL_GPIO_Init+0x206>
 800200c:	2303      	movs	r3, #3
 800200e:	e004      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002010:	2302      	movs	r3, #2
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_GPIO_Init+0x206>
 8002018:	2300      	movs	r3, #0
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	f002 0203 	and.w	r2, r2, #3
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	4093      	lsls	r3, r2
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800202a:	4925      	ldr	r1, [pc, #148]	; (80020c0 <HAL_GPIO_Init+0x2ac>)
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4924      	ldr	r1, [pc, #144]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002052:	4b22      	ldr	r3, [pc, #136]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	4920      	ldr	r1, [pc, #128]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 800205c:	4013      	ands	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	491a      	ldr	r1, [pc, #104]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	43db      	mvns	r3, r3
 8002082:	4916      	ldr	r1, [pc, #88]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8002084:	4013      	ands	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d025      	beq.n	80020e0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4910      	ldr	r1, [pc, #64]	; (80020dc <HAL_GPIO_Init+0x2c8>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
 80020a0:	e025      	b.n	80020ee <HAL_GPIO_Init+0x2da>
 80020a2:	bf00      	nop
 80020a4:	10320000 	.word	0x10320000
 80020a8:	10310000 	.word	0x10310000
 80020ac:	10220000 	.word	0x10220000
 80020b0:	10210000 	.word	0x10210000
 80020b4:	10120000 	.word	0x10120000
 80020b8:	10110000 	.word	0x10110000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40010800 	.word	0x40010800
 80020c8:	40010c00 	.word	0x40010c00
 80020cc:	40011000 	.word	0x40011000
 80020d0:	40011400 	.word	0x40011400
 80020d4:	40011800 	.word	0x40011800
 80020d8:	40011c00 	.word	0x40011c00
 80020dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e0:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_GPIO_Init+0x324>)
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	4913      	ldr	r1, [pc, #76]	; (8002138 <HAL_GPIO_Init+0x324>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_GPIO_Init+0x324>)
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	490e      	ldr	r1, [pc, #56]	; (8002138 <HAL_GPIO_Init+0x324>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	60cb      	str	r3, [r1, #12]
 8002106:	e006      	b.n	8002116 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_GPIO_Init+0x324>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	43db      	mvns	r3, r3
 8002110:	4909      	ldr	r1, [pc, #36]	; (8002138 <HAL_GPIO_Init+0x324>)
 8002112:	4013      	ands	r3, r2
 8002114:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	3301      	adds	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	f47f ae7e 	bne.w	8001e28 <HAL_GPIO_Init+0x14>
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	372c      	adds	r7, #44	; 0x2c
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	40010400 	.word	0x40010400

0800213c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800214c:	787b      	ldrb	r3, [r7, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43d9      	mvns	r1, r3
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	400b      	ands	r3, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	611a      	str	r2, [r3, #16]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e272      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8087 	beq.w	80022ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c0:	4b92      	ldr	r3, [pc, #584]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d00c      	beq.n	80021e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021cc:	4b8f      	ldr	r3, [pc, #572]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d112      	bne.n	80021fe <HAL_RCC_OscConfig+0x5e>
 80021d8:	4b8c      	ldr	r3, [pc, #560]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e4:	d10b      	bne.n	80021fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e6:	4b89      	ldr	r3, [pc, #548]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d06c      	beq.n	80022cc <HAL_RCC_OscConfig+0x12c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d168      	bne.n	80022cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e24c      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x76>
 8002208:	4b80      	ldr	r3, [pc, #512]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a7f      	ldr	r2, [pc, #508]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800220e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e02e      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x98>
 800221e:	4b7b      	ldr	r3, [pc, #492]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7a      	ldr	r2, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b78      	ldr	r3, [pc, #480]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a77      	ldr	r2, [pc, #476]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e01d      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0xbc>
 8002242:	4b72      	ldr	r3, [pc, #456]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a71      	ldr	r2, [pc, #452]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b6f      	ldr	r3, [pc, #444]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6e      	ldr	r2, [pc, #440]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0xd4>
 800225c:	4b6b      	ldr	r3, [pc, #428]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a6a      	ldr	r2, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b68      	ldr	r3, [pc, #416]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a67      	ldr	r2, [pc, #412]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 800226e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002272:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7ff f80c 	bl	8001298 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7ff f808 	bl	8001298 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e200      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b5d      	ldr	r3, [pc, #372]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0xe4>
 80022a2:	e014      	b.n	80022ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fff8 	bl	8001298 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7fe fff4 	bl	8001298 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1ec      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x10c>
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d063      	beq.n	80023a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022da:	4b4c      	ldr	r3, [pc, #304]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d11c      	bne.n	800232c <HAL_RCC_OscConfig+0x18c>
 80022f2:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d116      	bne.n	800232c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_RCC_OscConfig+0x176>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1c0      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4939      	ldr	r1, [pc, #228]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	e03a      	b.n	80023a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe ffad 	bl	8001298 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002342:	f7fe ffa9 	bl	8001298 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e1a1      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4927      	ldr	r1, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x270>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe ff8c 	bl	8001298 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002384:	f7fe ff88 	bl	8001298 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e180      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d03a      	beq.n	8002424 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d019      	beq.n	80023ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7fe ff6c 	bl	8001298 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c4:	f7fe ff68 	bl	8001298 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e160      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f000 fad8 	bl	8002998 <RCC_Delay>
 80023e8:	e01c      	b.n	8002424 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_RCC_OscConfig+0x274>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7fe ff52 	bl	8001298 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f6:	e00f      	b.n	8002418 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7fe ff4e 	bl	8001298 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d908      	bls.n	8002418 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e146      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	42420000 	.word	0x42420000
 8002414:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002418:	4b92      	ldr	r3, [pc, #584]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e9      	bne.n	80023f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80a6 	beq.w	800257e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b8b      	ldr	r3, [pc, #556]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10d      	bne.n	800245e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a87      	ldr	r2, [pc, #540]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]
 800244e:	4b85      	ldr	r3, [pc, #532]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245e:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_OscConfig+0x4c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d118      	bne.n	800249c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246a:	4b7f      	ldr	r3, [pc, #508]	; (8002668 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7e      	ldr	r2, [pc, #504]	; (8002668 <HAL_RCC_OscConfig+0x4c8>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002476:	f7fe ff0f 	bl	8001298 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247e:	f7fe ff0b 	bl	8001298 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b64      	cmp	r3, #100	; 0x64
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e103      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	4b75      	ldr	r3, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x4c8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x312>
 80024a4:	4b6f      	ldr	r3, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a6e      	ldr	r2, [pc, #440]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	e02d      	b.n	800250e <HAL_RCC_OscConfig+0x36e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x334>
 80024ba:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a69      	ldr	r2, [pc, #420]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	4b67      	ldr	r3, [pc, #412]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a66      	ldr	r2, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	e01c      	b.n	800250e <HAL_RCC_OscConfig+0x36e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d10c      	bne.n	80024f6 <HAL_RCC_OscConfig+0x356>
 80024dc:	4b61      	ldr	r3, [pc, #388]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a60      	ldr	r2, [pc, #384]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	4b5e      	ldr	r3, [pc, #376]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6213      	str	r3, [r2, #32]
 80024f4:	e00b      	b.n	800250e <HAL_RCC_OscConfig+0x36e>
 80024f6:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a5a      	ldr	r2, [pc, #360]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	6213      	str	r3, [r2, #32]
 8002502:	4b58      	ldr	r3, [pc, #352]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 0304 	bic.w	r3, r3, #4
 800250c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d015      	beq.n	8002542 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe febf 	bl	8001298 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251e:	f7fe febb 	bl	8001298 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f241 3288 	movw	r2, #5000	; 0x1388
 800252c:	4293      	cmp	r3, r2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0b1      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ee      	beq.n	800251e <HAL_RCC_OscConfig+0x37e>
 8002540:	e014      	b.n	800256c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7fe fea9 	bl	8001298 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fe fea5 	bl	8001298 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e09b      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	4b40      	ldr	r3, [pc, #256]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1ee      	bne.n	800254a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d105      	bne.n	800257e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002572:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a3b      	ldr	r2, [pc, #236]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8087 	beq.w	8002696 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b08      	cmp	r3, #8
 8002592:	d061      	beq.n	8002658 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d146      	bne.n	800262a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259c:	4b33      	ldr	r3, [pc, #204]	; (800266c <HAL_RCC_OscConfig+0x4cc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fe79 	bl	8001298 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fe75 	bl	8001298 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e06d      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d0:	d108      	bne.n	80025e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4921      	ldr	r1, [pc, #132]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a19      	ldr	r1, [r3, #32]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	430b      	orrs	r3, r1
 80025f6:	491b      	ldr	r1, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x4cc>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fe49 	bl	8001298 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe fe45 	bl	8001298 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e03d      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x46a>
 8002628:	e035      	b.n	8002696 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCC_OscConfig+0x4cc>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fe32 	bl	8001298 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fe2e 	bl	8001298 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e026      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x498>
 8002656:	e01e      	b.n	8002696 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e019      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
 800266c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x500>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	429a      	cmp	r2, r3
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0d0      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b8:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d910      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0207 	bic.w	r2, r3, #7
 80026ce:	4965      	ldr	r1, [pc, #404]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b8      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800270a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	494d      	ldr	r1, [pc, #308]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d040      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d115      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07f      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002762:	4b41      	ldr	r3, [pc, #260]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e073      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	4b3d      	ldr	r3, [pc, #244]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e06b      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002782:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f023 0203 	bic.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4936      	ldr	r1, [pc, #216]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002794:	f7fe fd80 	bl	8001298 <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fe fd7c 	bl	8001298 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e053      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 020c 	and.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1eb      	bne.n	800279c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c4:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d210      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b24      	ldr	r3, [pc, #144]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4922      	ldr	r1, [pc, #136]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e032      	b.n	800285a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4916      	ldr	r1, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f821 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490a      	ldr	r1, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x1c8>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1cc>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1d0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fcde 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40022000 	.word	0x40022000
 8002868:	40021000 	.word	0x40021000
 800286c:	08004c74 	.word	0x08004c74
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b490      	push	{r4, r7}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800287e:	4b29      	ldr	r3, [pc, #164]	; (8002924 <HAL_RCC_GetSysClockFreq+0xac>)
 8002880:	1d3c      	adds	r4, r7, #4
 8002882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002888:	f240 2301 	movw	r3, #513	; 0x201
 800288c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d002      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x40>
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d003      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x46>
 80028b6:	e02b      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ba:	623b      	str	r3, [r7, #32]
      break;
 80028bc:	e02b      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	0c9b      	lsrs	r3, r3, #18
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3328      	adds	r3, #40	; 0x28
 80028c8:	443b      	add	r3, r7
 80028ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d012      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028da:	4b13      	ldr	r3, [pc, #76]	; (8002928 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0c5b      	lsrs	r3, r3, #17
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	3328      	adds	r3, #40	; 0x28
 80028e6:	443b      	add	r3, r7
 80028e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f2:	fb03 f202 	mul.w	r2, r3, r2
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	e004      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	623b      	str	r3, [r7, #32]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002912:	623b      	str	r3, [r7, #32]
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	6a3b      	ldr	r3, [r7, #32]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc90      	pop	{r4, r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	08004c64 	.word	0x08004c64
 8002928:	40021000 	.word	0x40021000
 800292c:	007a1200 	.word	0x007a1200
 8002930:	003d0900 	.word	0x003d0900

08002934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002938:	4b02      	ldr	r3, [pc, #8]	; (8002944 <HAL_RCC_GetHCLKFreq+0x10>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	20000000 	.word	0x20000000

08002948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800294c:	f7ff fff2 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <HAL_RCC_GetPCLK1Freq+0x24>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	08004c84 	.word	0x08004c84

08002970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002974:	f7ff ffde 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	0adb      	lsrs	r3, r3, #11
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4903      	ldr	r1, [pc, #12]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	08004c84 	.word	0x08004c84

08002998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <RCC_Delay+0x34>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <RCC_Delay+0x38>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b4:	bf00      	nop
  }
  while (Delay --);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <RCC_Delay+0x1c>
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000000 	.word	0x20000000
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e041      	b.n	8002a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe f8f4 	bl	8000be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f000 fe18 	bl	8003648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d001      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e044      	b.n	8002b16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_TIM_Base_Start_IT+0xac>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x6c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x6c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_TIM_Base_Start_IT+0xb8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <HAL_TIM_Base_Start_IT+0xbc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d111      	bne.n	8002b04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d010      	beq.n	8002b14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b02:	e007      	b.n	8002b14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40013400 	.word	0x40013400
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00

08002b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e041      	b.n	8002bca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f839 	bl	8002bd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f000 fd68 	bl	8003648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_TIM_PWM_Start+0x24>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e022      	b.n	8002c4e <HAL_TIM_PWM_Start+0x6a>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d109      	bne.n	8002c22 <HAL_TIM_PWM_Start+0x3e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	bf14      	ite	ne
 8002c1a:	2301      	movne	r3, #1
 8002c1c:	2300      	moveq	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	e015      	b.n	8002c4e <HAL_TIM_PWM_Start+0x6a>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d109      	bne.n	8002c3c <HAL_TIM_PWM_Start+0x58>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e008      	b.n	8002c4e <HAL_TIM_PWM_Start+0x6a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e072      	b.n	8002d3c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_PWM_Start+0x82>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c64:	e013      	b.n	8002c8e <HAL_TIM_PWM_Start+0xaa>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x92>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c74:	e00b      	b.n	8002c8e <HAL_TIM_PWM_Start+0xaa>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_PWM_Start+0xa2>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c84:	e003      	b.n	8002c8e <HAL_TIM_PWM_Start+0xaa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2201      	movs	r2, #1
 8002c94:	6839      	ldr	r1, [r7, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 ff92 	bl	8003bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <HAL_TIM_PWM_Start+0x160>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <HAL_TIM_PWM_Start+0xcc>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <HAL_TIM_PWM_Start+0x164>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIM_PWM_Start+0xd0>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_TIM_PWM_Start+0xd2>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_TIM_PWM_Start+0x160>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d018      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x122>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_TIM_PWM_Start+0x164>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x122>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d00e      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x122>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a17      	ldr	r2, [pc, #92]	; (8002d4c <HAL_TIM_PWM_Start+0x168>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x122>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a16      	ldr	r2, [pc, #88]	; (8002d50 <HAL_TIM_PWM_Start+0x16c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x122>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_TIM_PWM_Start+0x170>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d111      	bne.n	8002d2a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d010      	beq.n	8002d3a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d28:	e007      	b.n	8002d3a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40013400 	.word	0x40013400
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00

08002d58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2200      	movs	r2, #0
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 ff28 	bl	8003bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2e      	ldr	r2, [pc, #184]	; (8002e30 <HAL_TIM_PWM_Stop+0xd8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_TIM_PWM_Stop+0x2c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2d      	ldr	r2, [pc, #180]	; (8002e34 <HAL_TIM_PWM_Stop+0xdc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_TIM_PWM_Stop+0x30>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_TIM_PWM_Stop+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d017      	beq.n	8002dbe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <HAL_TIM_PWM_Stop+0x66>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	f240 4344 	movw	r3, #1092	; 0x444
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d107      	bne.n	8002dbe <HAL_TIM_PWM_Stop+0x66>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <HAL_TIM_PWM_Stop+0x96>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	f240 4344 	movw	r3, #1092	; 0x444
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_PWM_Stop+0x96>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_PWM_Stop+0xa6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dfc:	e013      	b.n	8002e26 <HAL_TIM_PWM_Stop+0xce>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_PWM_Stop+0xb6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e0c:	e00b      	b.n	8002e26 <HAL_TIM_PWM_Stop+0xce>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Stop+0xc6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e1c:	e003      	b.n	8002e26 <HAL_TIM_PWM_Stop+0xce>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40013400 	.word	0x40013400

08002e38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e093      	b.n	8002f74 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7fd fe49 	bl	8000af8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7c:	f023 0307 	bic.w	r3, r3, #7
 8002e80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f000 fbdb 	bl	8003648 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ed8:	f023 030c 	bic.w	r3, r3, #12
 8002edc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	011a      	lsls	r2, r3, #4
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	031b      	lsls	r3, r3, #12
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	4313      	orrs	r3, r2
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fa4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d110      	bne.n	8002fce <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fb2:	7b7b      	ldrb	r3, [r7, #13]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d001      	beq.n	8002fbc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e089      	b.n	80030d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fcc:	e031      	b.n	8003032 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d110      	bne.n	8002ff6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fda:	7b3b      	ldrb	r3, [r7, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e075      	b.n	80030d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ff4:	e01d      	b.n	8003032 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d108      	bne.n	800300e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ffc:	7bbb      	ldrb	r3, [r7, #14]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d105      	bne.n	800300e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003002:	7b7b      	ldrb	r3, [r7, #13]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003008:	7b3b      	ldrb	r3, [r7, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d001      	beq.n	8003012 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e05e      	b.n	80030d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b04      	cmp	r3, #4
 800303c:	d010      	beq.n	8003060 <HAL_TIM_Encoder_Start_IT+0xe4>
 800303e:	e01f      	b.n	8003080 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2201      	movs	r2, #1
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fdb9 	bl	8003bc0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0202 	orr.w	r2, r2, #2
 800305c:	60da      	str	r2, [r3, #12]
      break;
 800305e:	e02e      	b.n	80030be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2201      	movs	r2, #1
 8003066:	2104      	movs	r1, #4
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fda9 	bl	8003bc0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0204 	orr.w	r2, r2, #4
 800307c:	60da      	str	r2, [r3, #12]
      break;
 800307e:	e01e      	b.n	80030be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2201      	movs	r2, #1
 8003086:	2100      	movs	r1, #0
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fd99 	bl	8003bc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	2104      	movs	r1, #4
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fd92 	bl	8003bc0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0202 	orr.w	r2, r2, #2
 80030aa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0204 	orr.w	r2, r2, #4
 80030ba:	60da      	str	r2, [r3, #12]
      break;
 80030bc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d122      	bne.n	8003134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d11b      	bne.n	8003134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0202 	mvn.w	r2, #2
 8003104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa78 	bl	8003610 <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa6b 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa7a 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d122      	bne.n	8003188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d11b      	bne.n	8003188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0204 	mvn.w	r2, #4
 8003158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa4e 	bl	8003610 <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fa41 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fa50 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b08      	cmp	r3, #8
 8003194:	d122      	bne.n	80031dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d11b      	bne.n	80031dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0208 	mvn.w	r2, #8
 80031ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2204      	movs	r2, #4
 80031b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa24 	bl	8003610 <HAL_TIM_IC_CaptureCallback>
 80031c8:	e005      	b.n	80031d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa17 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fa26 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d122      	bne.n	8003230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d11b      	bne.n	8003230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0210 	mvn.w	r2, #16
 8003200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2208      	movs	r2, #8
 8003206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f9fa 	bl	8003610 <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f9ed 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f9fc 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10e      	bne.n	800325c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0201 	mvn.w	r2, #1
 8003254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f9c8 	bl	80035ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	d10e      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b80      	cmp	r3, #128	; 0x80
 8003276:	d107      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fe90 	bl	8003fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9c0 	bl	8003634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0220 	mvn.w	r2, #32
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fe5b 	bl	8003f96 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032fe:	2302      	movs	r3, #2
 8003300:	e0ac      	b.n	800345c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b0c      	cmp	r3, #12
 800330e:	f200 809f 	bhi.w	8003450 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003312:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	0800334d 	.word	0x0800334d
 800331c:	08003451 	.word	0x08003451
 8003320:	08003451 	.word	0x08003451
 8003324:	08003451 	.word	0x08003451
 8003328:	0800338d 	.word	0x0800338d
 800332c:	08003451 	.word	0x08003451
 8003330:	08003451 	.word	0x08003451
 8003334:	08003451 	.word	0x08003451
 8003338:	080033cf 	.word	0x080033cf
 800333c:	08003451 	.word	0x08003451
 8003340:	08003451 	.word	0x08003451
 8003344:	08003451 	.word	0x08003451
 8003348:	0800340f 	.word	0x0800340f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f9f2 	bl	800373c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0208 	orr.w	r2, r2, #8
 8003366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0204 	bic.w	r2, r2, #4
 8003376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6999      	ldr	r1, [r3, #24]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	619a      	str	r2, [r3, #24]
      break;
 800338a:	e062      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fa42 	bl	800381c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6999      	ldr	r1, [r3, #24]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	021a      	lsls	r2, r3, #8
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	619a      	str	r2, [r3, #24]
      break;
 80033cc:	e041      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fa95 	bl	8003904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0208 	orr.w	r2, r2, #8
 80033e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0204 	bic.w	r2, r2, #4
 80033f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69d9      	ldr	r1, [r3, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	61da      	str	r2, [r3, #28]
      break;
 800340c:	e021      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fae9 	bl	80039ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69d9      	ldr	r1, [r3, #28]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	021a      	lsls	r2, r3, #8
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	61da      	str	r2, [r3, #28]
      break;
 800344e:	e000      	b.n	8003452 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIM_ConfigClockSource+0x18>
 8003478:	2302      	movs	r3, #2
 800347a:	e0b3      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x180>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800349a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b4:	d03e      	beq.n	8003534 <HAL_TIM_ConfigClockSource+0xd0>
 80034b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ba:	f200 8087 	bhi.w	80035cc <HAL_TIM_ConfigClockSource+0x168>
 80034be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c2:	f000 8085 	beq.w	80035d0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ca:	d87f      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x168>
 80034cc:	2b70      	cmp	r3, #112	; 0x70
 80034ce:	d01a      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0xa2>
 80034d0:	2b70      	cmp	r3, #112	; 0x70
 80034d2:	d87b      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x168>
 80034d4:	2b60      	cmp	r3, #96	; 0x60
 80034d6:	d050      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x116>
 80034d8:	2b60      	cmp	r3, #96	; 0x60
 80034da:	d877      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x168>
 80034dc:	2b50      	cmp	r3, #80	; 0x50
 80034de:	d03c      	beq.n	800355a <HAL_TIM_ConfigClockSource+0xf6>
 80034e0:	2b50      	cmp	r3, #80	; 0x50
 80034e2:	d873      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x168>
 80034e4:	2b40      	cmp	r3, #64	; 0x40
 80034e6:	d058      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x136>
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d86f      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x168>
 80034ec:	2b30      	cmp	r3, #48	; 0x30
 80034ee:	d064      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x156>
 80034f0:	2b30      	cmp	r3, #48	; 0x30
 80034f2:	d86b      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x168>
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d060      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x156>
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d867      	bhi.n	80035cc <HAL_TIM_ConfigClockSource+0x168>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d05c      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x156>
 8003500:	2b10      	cmp	r3, #16
 8003502:	d05a      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003504:	e062      	b.n	80035cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f000 fb34 	bl	8003b82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003528:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]
      break;
 8003532:	e04e      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f000 fb1d 	bl	8003b82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003556:	609a      	str	r2, [r3, #8]
      break;
 8003558:	e03b      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	461a      	mov	r2, r3
 8003568:	f000 fa94 	bl	8003a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2150      	movs	r1, #80	; 0x50
 8003572:	4618      	mov	r0, r3
 8003574:	f000 faeb 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003578:	e02b      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	f000 fab2 	bl	8003af0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2160      	movs	r1, #96	; 0x60
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fadb 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003598:	e01b      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f000 fa74 	bl	8003a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2140      	movs	r1, #64	; 0x40
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 facb 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80035b8:	e00b      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f000 fac2 	bl	8003b4e <TIM_ITRx_SetConfig>
        break;
 80035ca:	e002      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035cc:	bf00      	nop
 80035ce:	e000      	b.n	80035d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
	...

08003648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a33      	ldr	r2, [pc, #204]	; (8003728 <TIM_Base_SetConfig+0xe0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a32      	ldr	r2, [pc, #200]	; (800372c <TIM_Base_SetConfig+0xe4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00f      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366e:	d00b      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a2f      	ldr	r2, [pc, #188]	; (8003730 <TIM_Base_SetConfig+0xe8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a2e      	ldr	r2, [pc, #184]	; (8003734 <TIM_Base_SetConfig+0xec>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a2d      	ldr	r2, [pc, #180]	; (8003738 <TIM_Base_SetConfig+0xf0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d108      	bne.n	800369a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a22      	ldr	r2, [pc, #136]	; (8003728 <TIM_Base_SetConfig+0xe0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <TIM_Base_SetConfig+0x82>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a21      	ldr	r2, [pc, #132]	; (800372c <TIM_Base_SetConfig+0xe4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00f      	beq.n	80036ca <TIM_Base_SetConfig+0x82>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b0:	d00b      	beq.n	80036ca <TIM_Base_SetConfig+0x82>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <TIM_Base_SetConfig+0xe8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <TIM_Base_SetConfig+0x82>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <TIM_Base_SetConfig+0xec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_Base_SetConfig+0x82>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <TIM_Base_SetConfig+0xf0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d108      	bne.n	80036dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a09      	ldr	r2, [pc, #36]	; (8003728 <TIM_Base_SetConfig+0xe0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_Base_SetConfig+0xc8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a08      	ldr	r2, [pc, #32]	; (800372c <TIM_Base_SetConfig+0xe4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d103      	bne.n	8003718 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	615a      	str	r2, [r3, #20]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40013400 	.word	0x40013400
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00

0800373c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 0302 	bic.w	r3, r3, #2
 8003784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a20      	ldr	r2, [pc, #128]	; (8003814 <TIM_OC1_SetConfig+0xd8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_OC1_SetConfig+0x64>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <TIM_OC1_SetConfig+0xdc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10c      	bne.n	80037ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0308 	bic.w	r3, r3, #8
 80037a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a15      	ldr	r2, [pc, #84]	; (8003814 <TIM_OC1_SetConfig+0xd8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_OC1_SetConfig+0x8e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <TIM_OC1_SetConfig+0xdc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d111      	bne.n	80037ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	621a      	str	r2, [r3, #32]
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40013400 	.word	0x40013400

0800381c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0210 	bic.w	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0320 	bic.w	r3, r3, #32
 8003866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a21      	ldr	r2, [pc, #132]	; (80038fc <TIM_OC2_SetConfig+0xe0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_OC2_SetConfig+0x68>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a20      	ldr	r2, [pc, #128]	; (8003900 <TIM_OC2_SetConfig+0xe4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10d      	bne.n	80038a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <TIM_OC2_SetConfig+0xe0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_OC2_SetConfig+0x94>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a15      	ldr	r2, [pc, #84]	; (8003900 <TIM_OC2_SetConfig+0xe4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d113      	bne.n	80038d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40013400 	.word	0x40013400

08003904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800394c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a21      	ldr	r2, [pc, #132]	; (80039e4 <TIM_OC3_SetConfig+0xe0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d003      	beq.n	800396a <TIM_OC3_SetConfig+0x66>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <TIM_OC3_SetConfig+0xe4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10d      	bne.n	8003986 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a16      	ldr	r2, [pc, #88]	; (80039e4 <TIM_OC3_SetConfig+0xe0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d003      	beq.n	8003996 <TIM_OC3_SetConfig+0x92>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <TIM_OC3_SetConfig+0xe4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d113      	bne.n	80039be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800399c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	621a      	str	r2, [r3, #32]
}
 80039d8:	bf00      	nop
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40013400 	.word	0x40013400

080039ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <TIM_OC4_SetConfig+0xa0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_OC4_SetConfig+0x68>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <TIM_OC4_SetConfig+0xa4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d109      	bne.n	8003a68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40013400 	.word	0x40013400

08003a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f023 0201 	bic.w	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 030a 	bic.w	r3, r3, #10
 8003ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f023 0210 	bic.w	r2, r3, #16
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	031b      	lsls	r3, r3, #12
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f043 0307 	orr.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	021a      	lsls	r2, r3, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	609a      	str	r2, [r3, #8]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1a      	ldr	r2, [r3, #32]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	401a      	ands	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_TIMEx_PWMN_Start+0x24>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e022      	b.n	8003c72 <HAL_TIMEx_PWMN_Start+0x6a>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d109      	bne.n	8003c46 <HAL_TIMEx_PWMN_Start+0x3e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	bf14      	ite	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	2300      	moveq	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	e015      	b.n	8003c72 <HAL_TIMEx_PWMN_Start+0x6a>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d109      	bne.n	8003c60 <HAL_TIMEx_PWMN_Start+0x58>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e008      	b.n	8003c72 <HAL_TIMEx_PWMN_Start+0x6a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e063      	b.n	8003d42 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIMEx_PWMN_Start+0x82>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	e013      	b.n	8003cb2 <HAL_TIMEx_PWMN_Start+0xaa>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIMEx_PWMN_Start+0x92>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c98:	e00b      	b.n	8003cb2 <HAL_TIMEx_PWMN_Start+0xaa>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d104      	bne.n	8003caa <HAL_TIMEx_PWMN_Start+0xa2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca8:	e003      	b.n	8003cb2 <HAL_TIMEx_PWMN_Start+0xaa>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2202      	movs	r2, #2
 8003cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f97d 	bl	8003fba <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <HAL_TIMEx_PWMN_Start+0x144>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d018      	beq.n	8003d0c <HAL_TIMEx_PWMN_Start+0x104>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_TIMEx_PWMN_Start+0x148>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <HAL_TIMEx_PWMN_Start+0x104>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d00e      	beq.n	8003d0c <HAL_TIMEx_PWMN_Start+0x104>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_TIMEx_PWMN_Start+0x14c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_TIMEx_PWMN_Start+0x104>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <HAL_TIMEx_PWMN_Start+0x150>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_TIMEx_PWMN_Start+0x104>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <HAL_TIMEx_PWMN_Start+0x154>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d111      	bne.n	8003d30 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b06      	cmp	r3, #6
 8003d1c:	d010      	beq.n	8003d40 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2e:	e007      	b.n	8003d40 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40013400 	.word	0x40013400
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00

08003d60 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	6839      	ldr	r1, [r7, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f921 	bl	8003fba <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a1a      	ldr	r2, [r3, #32]
 8003d7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <HAL_TIMEx_PWMN_Stop+0x48>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	f240 4344 	movw	r3, #1092	; 0x444
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d107      	bne.n	8003da8 <HAL_TIMEx_PWMN_Stop+0x48>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	f241 1311 	movw	r3, #4369	; 0x1111
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10f      	bne.n	8003dd8 <HAL_TIMEx_PWMN_Stop+0x78>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6a1a      	ldr	r2, [r3, #32]
 8003dbe:	f240 4344 	movw	r3, #1092	; 0x444
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_TIMEx_PWMN_Stop+0x78>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <HAL_TIMEx_PWMN_Stop+0x88>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de6:	e013      	b.n	8003e10 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d104      	bne.n	8003df8 <HAL_TIMEx_PWMN_Stop+0x98>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df6:	e00b      	b.n	8003e10 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d104      	bne.n	8003e08 <HAL_TIMEx_PWMN_Stop+0xa8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e06:	e003      	b.n	8003e10 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e050      	b.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d018      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d00e      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40013400 	.word	0x40013400
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00

08003ef4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e03d      	b.n	8003f8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2204      	movs	r2, #4
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	401a      	ands	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1a      	ldr	r2, [r3, #32]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e03f      	b.n	8004094 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fc fe65 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2224      	movs	r2, #36	; 0x24
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004044:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fd46 	bl	8004ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800405a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800406a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800407a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d153      	bne.n	800415e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_UART_Transmit_DMA+0x26>
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e04c      	b.n	8004160 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_UART_Transmit_DMA+0x38>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e045      	b.n	8004160 <HAL_UART_Transmit_DMA+0xc4>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	88fa      	ldrh	r2, [r7, #6]
 80040e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2221      	movs	r2, #33	; 0x21
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	4a19      	ldr	r2, [pc, #100]	; (8004168 <HAL_UART_Transmit_DMA+0xcc>)
 8004102:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	4a18      	ldr	r2, [pc, #96]	; (800416c <HAL_UART_Transmit_DMA+0xd0>)
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	4a17      	ldr	r2, [pc, #92]	; (8004170 <HAL_UART_Transmit_DMA+0xd4>)
 8004112:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	2200      	movs	r2, #0
 800411a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800411c:	f107 0308 	add.w	r3, r7, #8
 8004120:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	6819      	ldr	r1, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3304      	adds	r3, #4
 8004130:	461a      	mov	r2, r3
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	f7fd fa62 	bl	80015fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004140:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004158:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	08004575 	.word	0x08004575
 800416c:	080045c7 	.word	0x080045c7
 8004170:	080046af 	.word	0x080046af

08004174 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b20      	cmp	r3, #32
 800418c:	d11d      	bne.n	80041ca <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_UART_Receive_DMA+0x26>
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e016      	b.n	80041cc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Receive_DMA+0x38>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e00f      	b.n	80041cc <HAL_UART_Receive_DMA+0x58>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	461a      	mov	r2, r3
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fabf 	bl	8004744 <UART_Start_Receive_DMA>
 80041c6:	4603      	mov	r3, r0
 80041c8:	e000      	b.n	80041cc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10d      	bne.n	8004226 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_UART_IRQHandler+0x52>
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fbb0 	bl	8004984 <UART_Receive_IT>
      return;
 8004224:	e17b      	b.n	800451e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80b1 	beq.w	8004390 <HAL_UART_IRQHandler+0x1bc>
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <HAL_UART_IRQHandler+0x70>
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80a6 	beq.w	8004390 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_UART_IRQHandler+0x90>
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f043 0201 	orr.w	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_UART_IRQHandler+0xb0>
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f043 0202 	orr.w	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_UART_IRQHandler+0xd0>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	f043 0204 	orr.w	r2, r3, #4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00f      	beq.n	80042ce <HAL_UART_IRQHandler+0xfa>
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d104      	bne.n	80042c2 <HAL_UART_IRQHandler+0xee>
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f043 0208 	orr.w	r2, r3, #8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 811e 	beq.w	8004514 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_UART_IRQHandler+0x11e>
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fb49 	bl	8004984 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <HAL_UART_IRQHandler+0x146>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d031      	beq.n	800437e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa8b 	bl	8004836 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d023      	beq.n	8004376 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	2b00      	cmp	r3, #0
 8004344:	d013      	beq.n	800436e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	4a76      	ldr	r2, [pc, #472]	; (8004524 <HAL_UART_IRQHandler+0x350>)
 800434c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	4618      	mov	r0, r3
 8004354:	f7fd f9ec 	bl	8001730 <HAL_DMA_Abort_IT>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004368:	4610      	mov	r0, r2
 800436a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	e00e      	b.n	800438c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f8ec 	bl	800454c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004374:	e00a      	b.n	800438c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f8e8 	bl	800454c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	e006      	b.n	800438c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8e4 	bl	800454c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800438a:	e0c3      	b.n	8004514 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	bf00      	nop
    return;
 800438e:	e0c1      	b.n	8004514 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	2b01      	cmp	r3, #1
 8004396:	f040 80a1 	bne.w	80044dc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 809b 	beq.w	80044dc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8095 	beq.w	80044dc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d04e      	beq.n	8004474 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043e0:	8a3b      	ldrh	r3, [r7, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 8098 	beq.w	8004518 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ec:	8a3a      	ldrh	r2, [r7, #16]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	f080 8092 	bcs.w	8004518 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8a3a      	ldrh	r2, [r7, #16]
 80043f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b20      	cmp	r3, #32
 8004402:	d02b      	beq.n	800445c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004412:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004432:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0210 	bic.w	r2, r2, #16
 8004450:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd f92f 	bl	80016ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004464:	b29b      	uxth	r3, r3
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	b29b      	uxth	r3, r3
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f876 	bl	800455e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004472:	e051      	b.n	8004518 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800447c:	b29b      	uxth	r3, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d047      	beq.n	800451c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800448c:	8a7b      	ldrh	r3, [r7, #18]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d044      	beq.n	800451c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0210 	bic.w	r2, r2, #16
 80044ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044d0:	8a7b      	ldrh	r3, [r7, #18]
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f842 	bl	800455e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044da:	e01f      	b.n	800451c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_UART_IRQHandler+0x324>
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f9e0 	bl	80048b6 <UART_Transmit_IT>
    return;
 80044f6:	e012      	b.n	800451e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <HAL_UART_IRQHandler+0x34a>
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fa21 	bl	8004954 <UART_EndTransmit_IT>
    return;
 8004512:	e004      	b.n	800451e <HAL_UART_IRQHandler+0x34a>
    return;
 8004514:	bf00      	nop
 8004516:	e002      	b.n	800451e <HAL_UART_IRQHandler+0x34a>
      return;
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <HAL_UART_IRQHandler+0x34a>
      return;
 800451c:	bf00      	nop
  }
}
 800451e:	3728      	adds	r7, #40	; 0x28
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	0800488f 	.word	0x0800488f

08004528 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr

0800455e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045b6:	e002      	b.n	80045be <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7fc fa5d 	bl	8000a78 <HAL_UART_TxCpltCallback>
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7ff ffa7 	bl	8004528 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d12a      	bne.n	8004654 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004612:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004632:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0210 	bic.w	r2, r2, #16
 8004652:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	2b01      	cmp	r3, #1
 800465a:	d106      	bne.n	800466a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004660:	4619      	mov	r1, r3
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff ff7b 	bl	800455e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004668:	e002      	b.n	8004670 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7fc f944 	bl	80008f8 <HAL_UART_RxCpltCallback>
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	2b01      	cmp	r3, #1
 800468c:	d108      	bne.n	80046a0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	b29b      	uxth	r3, r3
 8004696:	4619      	mov	r1, r3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7ff ff60 	bl	800455e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800469e:	e002      	b.n	80046a6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff ff4a 	bl	800453a <HAL_UART_RxHalfCpltCallback>
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bf14      	ite	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	2300      	moveq	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b21      	cmp	r3, #33	; 0x21
 80046e0:	d108      	bne.n	80046f4 <UART_DMAError+0x46>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80046ee:	68b8      	ldr	r0, [r7, #8]
 80046f0:	f000 f88c 	bl	800480c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b22      	cmp	r3, #34	; 0x22
 8004714:	d108      	bne.n	8004728 <UART_DMAError+0x7a>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2200      	movs	r2, #0
 8004720:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004722:	68b8      	ldr	r0, [r7, #8]
 8004724:	f000 f887 	bl	8004836 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	f043 0210 	orr.w	r2, r3, #16
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004734:	68b8      	ldr	r0, [r7, #8]
 8004736:	f7ff ff09 	bl	800454c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	88fa      	ldrh	r2, [r7, #6]
 800475c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2222      	movs	r2, #34	; 0x22
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	4a23      	ldr	r2, [pc, #140]	; (8004800 <UART_Start_Receive_DMA+0xbc>)
 8004772:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	4a22      	ldr	r2, [pc, #136]	; (8004804 <UART_Start_Receive_DMA+0xc0>)
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	4a21      	ldr	r2, [pc, #132]	; (8004808 <UART_Start_Receive_DMA+0xc4>)
 8004782:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	2200      	movs	r2, #0
 800478a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800478c:	f107 0308 	add.w	r3, r7, #8
 8004790:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	f7fc ff2a 	bl	80015fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	080045e3 	.word	0x080045e3
 8004804:	08004679 	.word	0x08004679
 8004808:	080046af 	.word	0x080046af

0800480c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004822:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800484c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	2b01      	cmp	r3, #1
 8004864:	d107      	bne.n	8004876 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0210 	bic.w	r2, r2, #16
 8004874:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff fe4f 	bl	800454c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b21      	cmp	r3, #33	; 0x21
 80048c8:	d13e      	bne.n	8004948 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d2:	d114      	bne.n	80048fe <UART_Transmit_IT+0x48>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d110      	bne.n	80048fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	1c9a      	adds	r2, r3, #2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	621a      	str	r2, [r3, #32]
 80048fc:	e008      	b.n	8004910 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	1c59      	adds	r1, r3, #1
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6211      	str	r1, [r2, #32]
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29b      	uxth	r3, r3
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4619      	mov	r1, r3
 800491e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10f      	bne.n	8004944 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004932:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004942:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fc f87f 	bl	8000a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b22      	cmp	r3, #34	; 0x22
 8004996:	f040 8099 	bne.w	8004acc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a2:	d117      	bne.n	80049d4 <UART_Receive_IT+0x50>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d113      	bne.n	80049d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	1c9a      	adds	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	629a      	str	r2, [r3, #40]	; 0x28
 80049d2:	e026      	b.n	8004a22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d007      	beq.n	80049f8 <UART_Receive_IT+0x74>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <UART_Receive_IT+0x82>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d106      	bne.n	8004a06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e008      	b.n	8004a18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d148      	bne.n	8004ac8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0220 	bic.w	r2, r2, #32
 8004a44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d123      	bne.n	8004abe <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0210 	bic.w	r2, r2, #16
 8004a8a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d10a      	bne.n	8004ab0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff fd51 	bl	800455e <HAL_UARTEx_RxEventCallback>
 8004abc:	e002      	b.n	8004ac4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fb ff1a 	bl	80008f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e002      	b.n	8004ace <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b12:	f023 030c 	bic.w	r3, r3, #12
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2c      	ldr	r2, [pc, #176]	; (8004bec <UART_SetConfig+0x114>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d103      	bne.n	8004b48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fd ff16 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	e002      	b.n	8004b4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fd fefe 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8004b4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009a      	lsls	r2, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	4a22      	ldr	r2, [pc, #136]	; (8004bf0 <UART_SetConfig+0x118>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	0119      	lsls	r1, r3, #4
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009a      	lsls	r2, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b84:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <UART_SetConfig+0x118>)
 8004b86:	fba3 0302 	umull	r0, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2064      	movs	r0, #100	; 0x64
 8004b8e:	fb00 f303 	mul.w	r3, r0, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	3332      	adds	r3, #50	; 0x32
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <UART_SetConfig+0x118>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba4:	4419      	add	r1, r3
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <UART_SetConfig+0x118>)
 8004bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2064      	movs	r0, #100	; 0x64
 8004bc6:	fb00 f303 	mul.w	r3, r0, r3
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	3332      	adds	r3, #50	; 0x32
 8004bd0:	4a07      	ldr	r2, [pc, #28]	; (8004bf0 <UART_SetConfig+0x118>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 020f 	and.w	r2, r3, #15
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	440a      	add	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	51eb851f 	.word	0x51eb851f

08004bf4 <__libc_init_array>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	4d0c      	ldr	r5, [pc, #48]	; (8004c2c <__libc_init_array+0x38>)
 8004bfa:	4c0d      	ldr	r4, [pc, #52]	; (8004c30 <__libc_init_array+0x3c>)
 8004bfc:	1b64      	subs	r4, r4, r5
 8004bfe:	10a4      	asrs	r4, r4, #2
 8004c00:	42a6      	cmp	r6, r4
 8004c02:	d109      	bne.n	8004c18 <__libc_init_array+0x24>
 8004c04:	f000 f822 	bl	8004c4c <_init>
 8004c08:	2600      	movs	r6, #0
 8004c0a:	4d0a      	ldr	r5, [pc, #40]	; (8004c34 <__libc_init_array+0x40>)
 8004c0c:	4c0a      	ldr	r4, [pc, #40]	; (8004c38 <__libc_init_array+0x44>)
 8004c0e:	1b64      	subs	r4, r4, r5
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	42a6      	cmp	r6, r4
 8004c14:	d105      	bne.n	8004c22 <__libc_init_array+0x2e>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1c:	4798      	blx	r3
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7ee      	b.n	8004c00 <__libc_init_array+0xc>
 8004c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c26:	4798      	blx	r3
 8004c28:	3601      	adds	r6, #1
 8004c2a:	e7f2      	b.n	8004c12 <__libc_init_array+0x1e>
 8004c2c:	08004c8c 	.word	0x08004c8c
 8004c30:	08004c8c 	.word	0x08004c8c
 8004c34:	08004c8c 	.word	0x08004c8c
 8004c38:	08004c90 	.word	0x08004c90

08004c3c <memset>:
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4402      	add	r2, r0
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d100      	bne.n	8004c46 <memset+0xa>
 8004c44:	4770      	bx	lr
 8004c46:	f803 1b01 	strb.w	r1, [r3], #1
 8004c4a:	e7f9      	b.n	8004c40 <memset+0x4>

08004c4c <_init>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr

08004c58 <_fini>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	bf00      	nop
 8004c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5e:	bc08      	pop	{r3}
 8004c60:	469e      	mov	lr, r3
 8004c62:	4770      	bx	lr
