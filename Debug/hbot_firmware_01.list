
hbot_firmware_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d84  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f90  08004f90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f90  08004f90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f90  08004f90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  08004fa4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004fa4  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b313  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b21  00000000  00000000  0002b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002dab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a2c  00000000  00000000  0002e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb3a  00000000  00000000  000480ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009888e  00000000  00000000  00054be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed474  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a8  00000000  00000000  000ed4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08004f50 	.word	0x08004f50

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08004f50 	.word	0x08004f50

08000224 <__aeabi_f2uiz>:
 8000224:	0042      	lsls	r2, r0, #1
 8000226:	d20e      	bcs.n	8000246 <__aeabi_f2uiz+0x22>
 8000228:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800022c:	d30b      	bcc.n	8000246 <__aeabi_f2uiz+0x22>
 800022e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000232:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000236:	d409      	bmi.n	800024c <__aeabi_f2uiz+0x28>
 8000238:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800023c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000240:	fa23 f002 	lsr.w	r0, r3, r2
 8000244:	4770      	bx	lr
 8000246:	f04f 0000 	mov.w	r0, #0
 800024a:	4770      	bx	lr
 800024c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000250:	d101      	bne.n	8000256 <__aeabi_f2uiz+0x32>
 8000252:	0242      	lsls	r2, r0, #9
 8000254:	d102      	bne.n	800025c <__aeabi_f2uiz+0x38>
 8000256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800025a:	4770      	bx	lr
 800025c:	f04f 0000 	mov.w	r0, #0
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f001 f964 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f82e 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 fa66 	bl	8000740 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000274:	f000 f870 	bl	8000358 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000278:	f000 f8c2 	bl	8000400 <MX_TIM3_Init>
  MX_DMA_Init();
 800027c:	f000 fa3a 	bl	80006f4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000280:	f000 fa0e 	bl	80006a0 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000284:	f000 f95e 	bl	8000544 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000288:	f000 f90e 	bl	80004a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uart_rec_stage_ = WAITING_START;
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <main+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, dataRec, 1);
 8000292:	2201      	movs	r2, #1
 8000294:	4908      	ldr	r1, [pc, #32]	; (80002b8 <main+0x54>)
 8000296:	4809      	ldr	r0, [pc, #36]	; (80002bc <main+0x58>)
 8000298:	f004 f8ee 	bl	8004478 <HAL_UART_Receive_DMA>
  // memset(dataTran, 0, UART_TRAN_BUFFER_SIZE);
  // HAL_UART_Transmit_DMA(&huart1, dataTran, UART_TRAN_BUFFER_SIZE);
  // HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
//  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
  // HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
  HAL_TIM_Base_Start_IT(&htim4);
 800029c:	4808      	ldr	r0, [pc, #32]	; (80002c0 <main+0x5c>)
 800029e:	f002 fd6b 	bl	8002d78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80002a2:	213c      	movs	r1, #60	; 0x3c
 80002a4:	4807      	ldr	r0, [pc, #28]	; (80002c4 <main+0x60>)
 80002a6:	f002 ffeb 	bl	8003280 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80002aa:	213c      	movs	r1, #60	; 0x3c
 80002ac:	4806      	ldr	r0, [pc, #24]	; (80002c8 <main+0x64>)
 80002ae:	f002 ffe7 	bl	8003280 <HAL_TIM_Encoder_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // uint16_t pwmLeft = 0;
  // uint16_t pwmRight = 0;
  while (1)
 80002b2:	e7fe      	b.n	80002b2 <main+0x4e>
 80002b4:	2000022c 	.word	0x2000022c
 80002b8:	20000214 	.word	0x20000214
 80002bc:	20000148 	.word	0x20000148
 80002c0:	200000b8 	.word	0x200000b8
 80002c4:	20000028 	.word	0x20000028
 80002c8:	20000070 	.word	0x20000070

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	; 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f004 fe30 	bl	8004f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ee:	2301      	movs	r3, #1
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	2302      	movs	r3, #2
 8000302:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800030a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000310:	f107 0318 	add.w	r3, r7, #24
 8000314:	4618      	mov	r0, r3
 8000316:	f002 f8c5 	bl	80024a4 <HAL_RCC_OscConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000320:	f000 fdac 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	230f      	movs	r3, #15
 8000326:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000328:	2302      	movs	r3, #2
 800032a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fb32 	bl	80029a8 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800034a:	f000 fd97 	bl	8000e7c <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3740      	adds	r7, #64	; 0x40
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08c      	sub	sp, #48	; 0x30
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	2224      	movs	r2, #36	; 0x24
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f004 fdea 	bl	8004f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <MX_TIM2_Init+0xa4>)
 8000376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800037c:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <MX_TIM2_Init+0xa4>)
 800037e:	2200      	movs	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <MX_TIM2_Init+0xa4>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <MX_TIM2_Init+0xa4>)
 800038a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800038e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MX_TIM2_Init+0xa4>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <MX_TIM2_Init+0xa4>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800039c:	2301      	movs	r3, #1
 800039e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003a4:	2301      	movs	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003b0:	2300      	movs	r3, #0
 80003b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003b4:	2301      	movs	r3, #1
 80003b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	4619      	mov	r1, r3
 80003c6:	480d      	ldr	r0, [pc, #52]	; (80003fc <MX_TIM2_Init+0xa4>)
 80003c8:	f002 feb8 	bl	800313c <HAL_TIM_Encoder_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80003d2:	f000 fd53 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4806      	ldr	r0, [pc, #24]	; (80003fc <MX_TIM2_Init+0xa4>)
 80003e4:	f003 fe9c 	bl	8004120 <HAL_TIMEx_MasterConfigSynchronization>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80003ee:	f000 fd45 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	3730      	adds	r7, #48	; 0x30
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000028 	.word	0x20000028

08000400 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08c      	sub	sp, #48	; 0x30
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000406:	f107 030c 	add.w	r3, r7, #12
 800040a:	2224      	movs	r2, #36	; 0x24
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f004 fd96 	bl	8004f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800041c:	4b20      	ldr	r3, [pc, #128]	; (80004a0 <MX_TIM3_Init+0xa0>)
 800041e:	4a21      	ldr	r2, [pc, #132]	; (80004a4 <MX_TIM3_Init+0xa4>)
 8000420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_TIM3_Init+0xa0>)
 8000424:	2200      	movs	r2, #0
 8000426:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <MX_TIM3_Init+0xa0>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <MX_TIM3_Init+0xa0>)
 8000430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <MX_TIM3_Init+0xa0>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <MX_TIM3_Init+0xa0>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000442:	2301      	movs	r3, #1
 8000444:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800044a:	2301      	movs	r3, #1
 800044c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000456:	2300      	movs	r3, #0
 8000458:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800045a:	2301      	movs	r3, #1
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	4619      	mov	r1, r3
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <MX_TIM3_Init+0xa0>)
 800046e:	f002 fe65 	bl	800313c <HAL_TIM_Encoder_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000478:	f000 fd00 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047c:	2300      	movs	r3, #0
 800047e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000480:	2300      	movs	r3, #0
 8000482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	4619      	mov	r1, r3
 8000488:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_TIM3_Init+0xa0>)
 800048a:	f003 fe49 	bl	8004120 <HAL_TIMEx_MasterConfigSynchronization>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000494:	f000 fcf2 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	3730      	adds	r7, #48	; 0x30
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000070 	.word	0x20000070
 80004a4:	40000400 	.word	0x40000400

080004a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004bc:	463b      	mov	r3, r7
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004c4:	4b1d      	ldr	r3, [pc, #116]	; (800053c <MX_TIM4_Init+0x94>)
 80004c6:	4a1e      	ldr	r2, [pc, #120]	; (8000540 <MX_TIM4_Init+0x98>)
 80004c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 80004ca:	4b1c      	ldr	r3, [pc, #112]	; (800053c <MX_TIM4_Init+0x94>)
 80004cc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80004d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_TIM4_Init+0x94>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_TIM4_Init+0x94>)
 80004da:	2263      	movs	r2, #99	; 0x63
 80004dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_TIM4_Init+0x94>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_TIM4_Init+0x94>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004ea:	4814      	ldr	r0, [pc, #80]	; (800053c <MX_TIM4_Init+0x94>)
 80004ec:	f002 fbf4 	bl	8002cd8 <HAL_TIM_Base_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80004f6:	f000 fcc1 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	4619      	mov	r1, r3
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <MX_TIM4_Init+0x94>)
 8000508:	f003 f92e 	bl	8003768 <HAL_TIM_ConfigClockSource>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000512:	f000 fcb3 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800051e:	463b      	mov	r3, r7
 8000520:	4619      	mov	r1, r3
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <MX_TIM4_Init+0x94>)
 8000524:	f003 fdfc 	bl	8004120 <HAL_TIMEx_MasterConfigSynchronization>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800052e:	f000 fca5 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000b8 	.word	0x200000b8
 8000540:	40000800 	.word	0x40000800

08000544 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	; 0x58
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2220      	movs	r2, #32
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f004 fcdf 	bl	8004f40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000582:	4b45      	ldr	r3, [pc, #276]	; (8000698 <MX_TIM8_Init+0x154>)
 8000584:	4a45      	ldr	r2, [pc, #276]	; (800069c <MX_TIM8_Init+0x158>)
 8000586:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7200-1;
 8000588:	4b43      	ldr	r3, [pc, #268]	; (8000698 <MX_TIM8_Init+0x154>)
 800058a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800058e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000590:	4b41      	ldr	r3, [pc, #260]	; (8000698 <MX_TIM8_Init+0x154>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8000596:	4b40      	ldr	r3, [pc, #256]	; (8000698 <MX_TIM8_Init+0x154>)
 8000598:	f240 32e7 	movw	r2, #999	; 0x3e7
 800059c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059e:	4b3e      	ldr	r3, [pc, #248]	; (8000698 <MX_TIM8_Init+0x154>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80005a4:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <MX_TIM8_Init+0x154>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005aa:	4b3b      	ldr	r3, [pc, #236]	; (8000698 <MX_TIM8_Init+0x154>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80005b0:	4839      	ldr	r0, [pc, #228]	; (8000698 <MX_TIM8_Init+0x154>)
 80005b2:	f002 fb91 	bl	8002cd8 <HAL_TIM_Base_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80005bc:	f000 fc5e 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80005c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005ca:	4619      	mov	r1, r3
 80005cc:	4832      	ldr	r0, [pc, #200]	; (8000698 <MX_TIM8_Init+0x154>)
 80005ce:	f003 f8cb 	bl	8003768 <HAL_TIM_ConfigClockSource>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80005d8:	f000 fc50 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80005dc:	482e      	ldr	r0, [pc, #184]	; (8000698 <MX_TIM8_Init+0x154>)
 80005de:	f002 fc2b 	bl	8002e38 <HAL_TIM_PWM_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80005e8:	f000 fc48 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ec:	2300      	movs	r3, #0
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80005f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005f8:	4619      	mov	r1, r3
 80005fa:	4827      	ldr	r0, [pc, #156]	; (8000698 <MX_TIM8_Init+0x154>)
 80005fc:	f003 fd90 	bl	8004120 <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000606:	f000 fc39 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060a:	2360      	movs	r3, #96	; 0x60
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000612:	2300      	movs	r3, #0
 8000614:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000616:	2300      	movs	r3, #0
 8000618:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800061e:	2300      	movs	r3, #0
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062a:	2204      	movs	r2, #4
 800062c:	4619      	mov	r1, r3
 800062e:	481a      	ldr	r0, [pc, #104]	; (8000698 <MX_TIM8_Init+0x154>)
 8000630:	f002 ffdc 	bl	80035ec <HAL_TIM_PWM_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800063a:	f000 fc1f 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800063e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000642:	2208      	movs	r2, #8
 8000644:	4619      	mov	r1, r3
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <MX_TIM8_Init+0x154>)
 8000648:	f002 ffd0 	bl	80035ec <HAL_TIM_PWM_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8000652:	f000 fc13 	bl	8000e7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4619      	mov	r1, r3
 8000678:	4807      	ldr	r0, [pc, #28]	; (8000698 <MX_TIM8_Init+0x154>)
 800067a:	f003 fdbd 	bl	80041f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8000684:	f000 fbfa 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <MX_TIM8_Init+0x154>)
 800068a:	f000 fce1 	bl	8001050 <HAL_TIM_MspPostInit>

}
 800068e:	bf00      	nop
 8000690:	3758      	adds	r7, #88	; 0x58
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000100 	.word	0x20000100
 800069c:	40013400 	.word	0x40013400

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART1_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d8:	f003 fe15 	bl	8004306 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 fbcb 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000148 	.word	0x20000148
 80006f0:	40013800 	.word	0x40013800

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_DMA_Init+0x48>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <MX_DMA_Init+0x48>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_DMA_Init+0x48>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200e      	movs	r0, #14
 8000718:	f001 f845 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800071c:	200e      	movs	r0, #14
 800071e:	f001 f85e 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	200f      	movs	r0, #15
 8000728:	f001 f83d 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800072c:	200f      	movs	r0, #15
 800072e:	f001 f856 	bl	80017de <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800075a:	f043 0320 	orr.w	r3, r3, #32
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0320 	and.w	r3, r3, #32
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <MX_GPIO_Init+0xa4>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_GPIO_Init+0xa4>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0310 	and.w	r3, r3, #16
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2104      	movs	r1, #4
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0xa8>)
 80007ba:	f001 fe41 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80007be:	2304      	movs	r3, #4
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_GPIO_Init+0xa8>)
 80007d6:	f001 fc9f 	bl	8002118 <HAL_GPIO_Init>

}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40011400 	.word	0x40011400

080007ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	__NOP();
 80007f4:	bf00      	nop
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80007f6:	2104      	movs	r1, #4
 80007f8:	482f      	ldr	r0, [pc, #188]	; (80008b8 <HAL_UART_RxCpltCallback+0xcc>)
 80007fa:	f001 fe39 	bl	8002470 <HAL_GPIO_TogglePin>

  if (uart_rec_stage_ == WAITING_START){ //Process header
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <HAL_UART_RxCpltCallback+0xd0>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d112      	bne.n	800082c <HAL_UART_RxCpltCallback+0x40>
    if(dataRec[0] != 0x2A) {
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b2a      	cmp	r3, #42	; 0x2a
 800080c:	d005      	beq.n	800081a <HAL_UART_RxCpltCallback+0x2e>
      // Read until face start byte
      HAL_UART_Receive_DMA(&huart1, dataRec, 1);
 800080e:	2201      	movs	r2, #1
 8000810:	492b      	ldr	r1, [pc, #172]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 8000812:	482c      	ldr	r0, [pc, #176]	; (80008c4 <HAL_UART_RxCpltCallback+0xd8>)
 8000814:	f003 fe30 	bl	8004478 <HAL_UART_Receive_DMA>
    }
    else {
      uart_rec_stage_ = WAITING_HEADER;
      HAL_UART_Receive_DMA(&huart1, dataRec, UART_HEADER_SIZE-1);
    }
    return;
 8000818:	e04a      	b.n	80008b0 <HAL_UART_RxCpltCallback+0xc4>
      uart_rec_stage_ = WAITING_HEADER;
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <HAL_UART_RxCpltCallback+0xd0>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_DMA(&huart1, dataRec, UART_HEADER_SIZE-1);
 8000820:	2205      	movs	r2, #5
 8000822:	4927      	ldr	r1, [pc, #156]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 8000824:	4827      	ldr	r0, [pc, #156]	; (80008c4 <HAL_UART_RxCpltCallback+0xd8>)
 8000826:	f003 fe27 	bl	8004478 <HAL_UART_Receive_DMA>
    return;
 800082a:	e041      	b.n	80008b0 <HAL_UART_RxCpltCallback+0xc4>
  }

  if (uart_rec_stage_ == WAITING_HEADER){
 800082c:	4b23      	ldr	r3, [pc, #140]	; (80008bc <HAL_UART_RxCpltCallback+0xd0>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d12d      	bne.n	8000890 <HAL_UART_RxCpltCallback+0xa4>
    u_int8_t cmd_count_index = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	75fb      	strb	r3, [r7, #23]
    uint32_t curr_rec_count = (uint32_t)dataRec[cmd_count_index]   << 24
 8000838:	7dfb      	ldrb	r3, [r7, #23]
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	061a      	lsls	r2, r3, #24
                            | (uint32_t)dataRec[cmd_count_index+1] << 16
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	3301      	adds	r3, #1
 8000844:	491e      	ldr	r1, [pc, #120]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 8000846:	5ccb      	ldrb	r3, [r1, r3]
 8000848:	041b      	lsls	r3, r3, #16
 800084a:	431a      	orrs	r2, r3
                            | (uint32_t)dataRec[cmd_count_index+2] << 8
 800084c:	7dfb      	ldrb	r3, [r7, #23]
 800084e:	3302      	adds	r3, #2
 8000850:	491b      	ldr	r1, [pc, #108]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 8000852:	5ccb      	ldrb	r3, [r1, r3]
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	4313      	orrs	r3, r2
                            | dataRec[cmd_count_index+3];
 8000858:	7dfa      	ldrb	r2, [r7, #23]
 800085a:	3203      	adds	r2, #3
 800085c:	4918      	ldr	r1, [pc, #96]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 800085e:	5c8a      	ldrb	r2, [r1, r2]
    uint32_t curr_rec_count = (uint32_t)dataRec[cmd_count_index]   << 24
 8000860:	4313      	orrs	r3, r2
 8000862:	613b      	str	r3, [r7, #16]
    if(curr_rec_count == rec_cnt) return;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_UART_RxCpltCallback+0xdc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	429a      	cmp	r2, r3
 800086c:	d01f      	beq.n	80008ae <HAL_UART_RxCpltCallback+0xc2>
    rec_cnt = curr_rec_count;
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_UART_RxCpltCallback+0xdc>)
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	6013      	str	r3, [r2, #0]
    u_int8_t cmdLen = dataRec[cmd_count_index + 4];
 8000874:	7dfb      	ldrb	r3, [r7, #23]
 8000876:	3304      	adds	r3, #4
 8000878:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 800087a:	5cd3      	ldrb	r3, [r2, r3]
 800087c:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Receive_DMA(&huart1, dataRec, cmdLen - UART_HEADER_SIZE);
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	b29b      	uxth	r3, r3
 8000882:	3b06      	subs	r3, #6
 8000884:	b29b      	uxth	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	490d      	ldr	r1, [pc, #52]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <HAL_UART_RxCpltCallback+0xd8>)
 800088c:	f003 fdf4 	bl	8004478 <HAL_UART_Receive_DMA>
  }

  if (uart_rec_stage_ == WAITING_MSG) {
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_UART_RxCpltCallback+0xd0>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d10b      	bne.n	80008b0 <HAL_UART_RxCpltCallback+0xc4>
    handleMessage();
 8000898:	f000 f822 	bl	80008e0 <handleMessage>
    uart_rec_stage_ = WAITING_START;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HAL_UART_RxCpltCallback+0xd0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_DMA(&huart1, dataRec, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <HAL_UART_RxCpltCallback+0xd4>)
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <HAL_UART_RxCpltCallback+0xd8>)
 80008a8:	f003 fde6 	bl	8004478 <HAL_UART_Receive_DMA>
 80008ac:	e000      	b.n	80008b0 <HAL_UART_RxCpltCallback+0xc4>
    if(curr_rec_count == rec_cnt) return;
 80008ae:	bf00      	nop

//	char msg[30];
//	sprintf(msg, "velL: %i, velR: %i\n", velLeft, velRight);
//
//	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)msg, strlen(msg));
}
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40011400 	.word	0x40011400
 80008bc:	2000022c 	.word	0x2000022c
 80008c0:	20000214 	.word	0x20000214
 80008c4:	20000148 	.word	0x20000148
 80008c8:	20000258 	.word	0x20000258

080008cc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
//	dataTran[7] += 1;
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
	...

080008e0 <handleMessage>:

void handleMessage(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	u_int8_t cmd	= dataRec[0];
 80008e6:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <handleMessage+0xe4>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
	uint8_t params_index = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	71bb      	strb	r3, [r7, #6]
	switch (cmd) {
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	3b50      	subs	r3, #80	; 0x50
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d85f      	bhi.n	80009b8 <handleMessage+0xd8>
 80008f8:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <handleMessage+0x20>)
 80008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fe:	bf00      	nop
 8000900:	08000921 	.word	0x08000921
 8000904:	080009b9 	.word	0x080009b9
 8000908:	080009b9 	.word	0x080009b9
 800090c:	080009b9 	.word	0x080009b9
 8000910:	080009b9 	.word	0x080009b9
 8000914:	08000977 	.word	0x08000977
 8000918:	0800098d 	.word	0x0800098d
 800091c:	080009a3 	.word	0x080009a3
		case 0x50: // Set rpm
			velLeft = (int)dataRec[params_index] << 8 | dataRec[params_index+1];
 8000920:	79bb      	ldrb	r3, [r7, #6]
 8000922:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <handleMessage+0xe4>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	b21a      	sxth	r2, r3
 800092a:	79bb      	ldrb	r3, [r7, #6]
 800092c:	3301      	adds	r3, #1
 800092e:	4925      	ldr	r1, [pc, #148]	; (80009c4 <handleMessage+0xe4>)
 8000930:	5ccb      	ldrb	r3, [r1, r3]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <handleMessage+0xe8>)
 800093a:	801a      	strh	r2, [r3, #0]
			velRight = (int)dataRec[params_index+2] << 8 | dataRec[params_index+3];
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	3302      	adds	r3, #2
 8000940:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <handleMessage+0xe4>)
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b21a      	sxth	r2, r3
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	3303      	adds	r3, #3
 800094c:	491d      	ldr	r1, [pc, #116]	; (80009c4 <handleMessage+0xe4>)
 800094e:	5ccb      	ldrb	r3, [r1, r3]
 8000950:	b21b      	sxth	r3, r3
 8000952:	4313      	orrs	r3, r2
 8000954:	b21a      	sxth	r2, r3
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <handleMessage+0xec>)
 8000958:	801a      	strh	r2, [r3, #0]
      setRpm(velLeft, velRight);
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <handleMessage+0xe8>)
 800095c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000960:	4a1a      	ldr	r2, [pc, #104]	; (80009cc <handleMessage+0xec>)
 8000962:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f837 	bl	80009dc <setRpm>
      responseCmd(CMD_SET_VEL);
 800096e:	2050      	movs	r0, #80	; 0x50
 8000970:	f000 f8cc 	bl	8000b0c <responseCmd>
      break;
 8000974:	e021      	b.n	80009ba <handleMessage+0xda>
    case 0x55: // Set Kp
      memcpy(&kp, &dataRec[params_index], 4);
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <handleMessage+0xe4>)
 800097a:	4413      	add	r3, r2
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <handleMessage+0xf0>)
 8000982:	601a      	str	r2, [r3, #0]
      responseCmd(CMD_SET_PID_KP);
 8000984:	2055      	movs	r0, #85	; 0x55
 8000986:	f000 f8c1 	bl	8000b0c <responseCmd>
			break;
 800098a:	e016      	b.n	80009ba <handleMessage+0xda>
    case 0x56: // Set Kp
      memcpy(&ki, &dataRec[params_index], 4);
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <handleMessage+0xe4>)
 8000990:	4413      	add	r3, r2
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <handleMessage+0xf4>)
 8000998:	601a      	str	r2, [r3, #0]
      responseCmd(CMD_SET_PID_KI);
 800099a:	2056      	movs	r0, #86	; 0x56
 800099c:	f000 f8b6 	bl	8000b0c <responseCmd>
			break;
 80009a0:	e00b      	b.n	80009ba <handleMessage+0xda>
    case 0x57: // Set Kp
      memcpy(&kd, &dataRec[params_index], 4);
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <handleMessage+0xe4>)
 80009a6:	4413      	add	r3, r2
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <handleMessage+0xf8>)
 80009ae:	601a      	str	r2, [r3, #0]
      responseCmd(CMD_SET_PID_KD);
 80009b0:	2057      	movs	r0, #87	; 0x57
 80009b2:	f000 f8ab 	bl	8000b0c <responseCmd>
			break;
 80009b6:	e000      	b.n	80009ba <handleMessage+0xda>
		default:
			break;
 80009b8:	bf00      	nop
	}
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000214 	.word	0x20000214
 80009c8:	2000022e 	.word	0x2000022e
 80009cc:	20000230 	.word	0x20000230
 80009d0:	20000260 	.word	0x20000260
 80009d4:	20000264 	.word	0x20000264
 80009d8:	20000268 	.word	0x20000268

080009dc <setRpm>:

void setRpm(int16_t velLeft, int16_t velRight) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	460a      	mov	r2, r1
 80009e6:	80fb      	strh	r3, [r7, #6]
 80009e8:	4613      	mov	r3, r2
 80009ea:	80bb      	strh	r3, [r7, #4]
  uint16_t pwmLeft = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	81fb      	strh	r3, [r7, #14]
  uint16_t pwmRight = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	81bb      	strh	r3, [r7, #12]
  pwmLeft = abs((uint16_t)(velLeft*1000/37));
 80009f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a3f      	ldr	r2, [pc, #252]	; (8000b00 <setRpm+0x124>)
 8000a02:	fb82 1203 	smull	r1, r2, r2, r3
 8000a06:	441a      	add	r2, r3
 8000a08:	1152      	asrs	r2, r2, #5
 8000a0a:	17db      	asrs	r3, r3, #31
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	81fb      	strh	r3, [r7, #14]
  pwmRight = abs((uint16_t)(velRight*1000/37));
 8000a10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	4a38      	ldr	r2, [pc, #224]	; (8000b00 <setRpm+0x124>)
 8000a1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a22:	441a      	add	r2, r3
 8000a24:	1152      	asrs	r2, r2, #5
 8000a26:	17db      	asrs	r3, r3, #31
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	81bb      	strh	r3, [r7, #12]
  pwmLeft = (pwmLeft > 1000) ? 1000 : pwmLeft;
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a32:	bf28      	it	cs
 8000a34:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 8000a38:	81fb      	strh	r3, [r7, #14]
  pwmRight = (pwmRight> 1000) ? 1000 : pwmRight;
 8000a3a:	89bb      	ldrh	r3, [r7, #12]
 8000a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a40:	bf28      	it	cs
 8000a42:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 8000a46:	81bb      	strh	r3, [r7, #12]
  if(velLeft > 0){
 8000a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	dd0c      	ble.n	8000a6a <setRpm+0x8e>
    HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8000a50:	2104      	movs	r1, #4
 8000a52:	482c      	ldr	r0, [pc, #176]	; (8000b04 <setRpm+0x128>)
 8000a54:	f003 fb06 	bl	8004064 <HAL_TIMEx_PWMN_Stop>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000a58:	2104      	movs	r1, #4
 8000a5a:	482a      	ldr	r0, [pc, #168]	; (8000b04 <setRpm+0x128>)
 8000a5c:	f002 fa44 	bl	8002ee8 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmLeft);
 8000a60:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <setRpm+0x128>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	89fa      	ldrh	r2, [r7, #14]
 8000a66:	639a      	str	r2, [r3, #56]	; 0x38
 8000a68:	e018      	b.n	8000a9c <setRpm+0xc0>
  }
  else if (velLeft < 0) {
 8000a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	da0c      	bge.n	8000a8c <setRpm+0xb0>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8000a72:	2104      	movs	r1, #4
 8000a74:	4823      	ldr	r0, [pc, #140]	; (8000b04 <setRpm+0x128>)
 8000a76:	f002 faf1 	bl	800305c <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	4821      	ldr	r0, [pc, #132]	; (8000b04 <setRpm+0x128>)
 8000a7e:	f003 fa45 	bl	8003f0c <HAL_TIMEx_PWMN_Start>
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwmLeft);
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <setRpm+0x128>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	89fa      	ldrh	r2, [r7, #14]
 8000a88:	639a      	str	r2, [r3, #56]	; 0x38
 8000a8a:	e007      	b.n	8000a9c <setRpm+0xc0>
  }
  else {
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	481d      	ldr	r0, [pc, #116]	; (8000b04 <setRpm+0x128>)
 8000a90:	f002 fae4 	bl	800305c <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8000a94:	2104      	movs	r1, #4
 8000a96:	481b      	ldr	r0, [pc, #108]	; (8000b04 <setRpm+0x128>)
 8000a98:	f003 fae4 	bl	8004064 <HAL_TIMEx_PWMN_Stop>
  }

  if(velRight < 0){
 8000a9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da0c      	bge.n	8000abe <setRpm+0xe2>
    HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	4817      	ldr	r0, [pc, #92]	; (8000b04 <setRpm+0x128>)
 8000aa8:	f003 fadc 	bl	8004064 <HAL_TIMEx_PWMN_Stop>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000aac:	2108      	movs	r1, #8
 8000aae:	4815      	ldr	r0, [pc, #84]	; (8000b04 <setRpm+0x128>)
 8000ab0:	f002 fa1a 	bl	8002ee8 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwmRight);
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <setRpm+0x128>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	89ba      	ldrh	r2, [r7, #12]
 8000aba:	63da      	str	r2, [r3, #60]	; 0x3c
 8000abc:	e018      	b.n	8000af0 <setRpm+0x114>
  }
  else if (velRight > 0){
 8000abe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	dd0c      	ble.n	8000ae0 <setRpm+0x104>
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	480e      	ldr	r0, [pc, #56]	; (8000b04 <setRpm+0x128>)
 8000aca:	f002 fac7 	bl	800305c <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8000ace:	2108      	movs	r1, #8
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <setRpm+0x128>)
 8000ad2:	f003 fa1b 	bl	8003f0c <HAL_TIMEx_PWMN_Start>
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwmRight);
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <setRpm+0x128>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	89ba      	ldrh	r2, [r7, #12]
 8000adc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ade:	e007      	b.n	8000af0 <setRpm+0x114>
  }
  else {
    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	4808      	ldr	r0, [pc, #32]	; (8000b04 <setRpm+0x128>)
 8000ae4:	f002 faba 	bl	800305c <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8000ae8:	2108      	movs	r1, #8
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <setRpm+0x128>)
 8000aec:	f003 faba 	bl	8004064 <HAL_TIMEx_PWMN_Stop>
  }
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000af0:	2104      	movs	r1, #4
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <setRpm+0x12c>)
 8000af4:	f001 fcbc 	bl	8002470 <HAL_GPIO_TogglePin>
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	dd67c8a7 	.word	0xdd67c8a7
 8000b04:	20000100 	.word	0x20000100
 8000b08:	40011400 	.word	0x40011400

08000b0c <responseCmd>:

void responseCmd(CMD_Type cmd_type) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  memset(dataTran, 0, UART_TRAN_BUFFER_SIZE);
 8000b16:	220c      	movs	r2, #12
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4878      	ldr	r0, [pc, #480]	; (8000cfc <responseCmd+0x1f0>)
 8000b1c:	f004 fa10 	bl	8004f40 <memset>
  dataTran[0] = 0x2B;
 8000b20:	4b76      	ldr	r3, [pc, #472]	; (8000cfc <responseCmd+0x1f0>)
 8000b22:	222b      	movs	r2, #43	; 0x2b
 8000b24:	701a      	strb	r2, [r3, #0]
  tran_cnt++;
 8000b26:	4b76      	ldr	r3, [pc, #472]	; (8000d00 <responseCmd+0x1f4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a74      	ldr	r2, [pc, #464]	; (8000d00 <responseCmd+0x1f4>)
 8000b2e:	6013      	str	r3, [r2, #0]
  uint8_t cnt_index = 1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73bb      	strb	r3, [r7, #14]
  dataTran[cnt_index] = tran_cnt >> 24;
 8000b34:	4b72      	ldr	r3, [pc, #456]	; (8000d00 <responseCmd+0x1f4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	0e1a      	lsrs	r2, r3, #24
 8000b3a:	7bbb      	ldrb	r3, [r7, #14]
 8000b3c:	b2d1      	uxtb	r1, r2
 8000b3e:	4a6f      	ldr	r2, [pc, #444]	; (8000cfc <responseCmd+0x1f0>)
 8000b40:	54d1      	strb	r1, [r2, r3]
  dataTran[cnt_index + 1] = tran_cnt >> 16;
 8000b42:	4b6f      	ldr	r3, [pc, #444]	; (8000d00 <responseCmd+0x1f4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	0c1a      	lsrs	r2, r3, #16
 8000b48:	7bbb      	ldrb	r3, [r7, #14]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	b2d1      	uxtb	r1, r2
 8000b4e:	4a6b      	ldr	r2, [pc, #428]	; (8000cfc <responseCmd+0x1f0>)
 8000b50:	54d1      	strb	r1, [r2, r3]
  dataTran[cnt_index + 2] = tran_cnt >> 8;
 8000b52:	4b6b      	ldr	r3, [pc, #428]	; (8000d00 <responseCmd+0x1f4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	0a1a      	lsrs	r2, r3, #8
 8000b58:	7bbb      	ldrb	r3, [r7, #14]
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	b2d1      	uxtb	r1, r2
 8000b5e:	4a67      	ldr	r2, [pc, #412]	; (8000cfc <responseCmd+0x1f0>)
 8000b60:	54d1      	strb	r1, [r2, r3]
  dataTran[cnt_index + 3] = tran_cnt;
 8000b62:	4b67      	ldr	r3, [pc, #412]	; (8000d00 <responseCmd+0x1f4>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	7bbb      	ldrb	r3, [r7, #14]
 8000b68:	3303      	adds	r3, #3
 8000b6a:	b2d1      	uxtb	r1, r2
 8000b6c:	4a63      	ldr	r2, [pc, #396]	; (8000cfc <responseCmd+0x1f0>)
 8000b6e:	54d1      	strb	r1, [r2, r3]
  uint8_t msg_length_index = cnt_index + 4;
 8000b70:	7bbb      	ldrb	r3, [r7, #14]
 8000b72:	3304      	adds	r3, #4
 8000b74:	737b      	strb	r3, [r7, #13]
  uint8_t cmd_type_index = msg_length_index + 1;
 8000b76:	7b7b      	ldrb	r3, [r7, #13]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	733b      	strb	r3, [r7, #12]
  uint8_t msg_index = cmd_type_index + 1;
 8000b7c:	7b3b      	ldrb	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	72fb      	strb	r3, [r7, #11]
  dataTran[cmd_type_index] = cmd_type;
 8000b82:	7b3b      	ldrb	r3, [r7, #12]
 8000b84:	495d      	ldr	r1, [pc, #372]	; (8000cfc <responseCmd+0x1f0>)
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	54ca      	strb	r2, [r1, r3]
  uint8_t msg_length = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]
  switch (cmd_type)
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d05f      	beq.n	8000c54 <responseCmd+0x148>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f2c0 815a 	blt.w	8000e4e <responseCmd+0x342>
 8000b9a:	2b57      	cmp	r3, #87	; 0x57
 8000b9c:	f300 8157 	bgt.w	8000e4e <responseCmd+0x342>
 8000ba0:	2b30      	cmp	r3, #48	; 0x30
 8000ba2:	f2c0 8154 	blt.w	8000e4e <responseCmd+0x342>
 8000ba6:	3b30      	subs	r3, #48	; 0x30
 8000ba8:	2b27      	cmp	r3, #39	; 0x27
 8000baa:	f200 8150 	bhi.w	8000e4e <responseCmd+0x342>
 8000bae:	a201      	add	r2, pc, #4	; (adr r2, 8000bb4 <responseCmd+0xa8>)
 8000bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb4:	08000e4f 	.word	0x08000e4f
 8000bb8:	08000e4f 	.word	0x08000e4f
 8000bbc:	08000e4f 	.word	0x08000e4f
 8000bc0:	08000e4f 	.word	0x08000e4f
 8000bc4:	08000e4f 	.word	0x08000e4f
 8000bc8:	08000e4f 	.word	0x08000e4f
 8000bcc:	08000e4f 	.word	0x08000e4f
 8000bd0:	08000e4f 	.word	0x08000e4f
 8000bd4:	08000e4f 	.word	0x08000e4f
 8000bd8:	08000e4f 	.word	0x08000e4f
 8000bdc:	08000e4f 	.word	0x08000e4f
 8000be0:	08000e4f 	.word	0x08000e4f
 8000be4:	08000e4f 	.word	0x08000e4f
 8000be8:	08000e4f 	.word	0x08000e4f
 8000bec:	08000e4f 	.word	0x08000e4f
 8000bf0:	08000e4f 	.word	0x08000e4f
 8000bf4:	08000e4f 	.word	0x08000e4f
 8000bf8:	08000e4f 	.word	0x08000e4f
 8000bfc:	08000e4f 	.word	0x08000e4f
 8000c00:	08000e4f 	.word	0x08000e4f
 8000c04:	08000e4f 	.word	0x08000e4f
 8000c08:	08000e4f 	.word	0x08000e4f
 8000c0c:	08000e4f 	.word	0x08000e4f
 8000c10:	08000e4f 	.word	0x08000e4f
 8000c14:	08000e4f 	.word	0x08000e4f
 8000c18:	08000e4f 	.word	0x08000e4f
 8000c1c:	08000e4f 	.word	0x08000e4f
 8000c20:	08000e4f 	.word	0x08000e4f
 8000c24:	08000e4f 	.word	0x08000e4f
 8000c28:	08000e4f 	.word	0x08000e4f
 8000c2c:	08000e4f 	.word	0x08000e4f
 8000c30:	08000e4f 	.word	0x08000e4f
 8000c34:	08000ca9 	.word	0x08000ca9
 8000c38:	08000e4f 	.word	0x08000e4f
 8000c3c:	08000e4f 	.word	0x08000e4f
 8000c40:	08000e4f 	.word	0x08000e4f
 8000c44:	08000e4f 	.word	0x08000e4f
 8000c48:	08000d15 	.word	0x08000d15
 8000c4c:	08000d7d 	.word	0x08000d7d
 8000c50:	08000de5 	.word	0x08000de5
  {
  case CMD_FB_VEL:
    msg_length = (uint8_t)12;
 8000c54:	230c      	movs	r3, #12
 8000c56:	73fb      	strb	r3, [r7, #15]
    dataTran[msg_length_index] = msg_length;
 8000c58:	7b7b      	ldrb	r3, [r7, #13]
 8000c5a:	4928      	ldr	r1, [pc, #160]	; (8000cfc <responseCmd+0x1f0>)
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	54ca      	strb	r2, [r1, r3]
    dataTran[msg_index] = motor_speed1 >> 8;
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <responseCmd+0x1f8>)
 8000c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c66:	121b      	asrs	r3, r3, #8
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	7afb      	ldrb	r3, [r7, #11]
 8000c6c:	b2d1      	uxtb	r1, r2
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <responseCmd+0x1f0>)
 8000c70:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+1] = motor_speed1;
 8000c72:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <responseCmd+0x1f8>)
 8000c74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c78:	7afb      	ldrb	r3, [r7, #11]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b2d1      	uxtb	r1, r2
 8000c7e:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <responseCmd+0x1f0>)
 8000c80:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+2] = motor_speed2 >> 8;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <responseCmd+0x1fc>)
 8000c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c88:	121b      	asrs	r3, r3, #8
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	b2d1      	uxtb	r1, r2
 8000c92:	4a1a      	ldr	r2, [pc, #104]	; (8000cfc <responseCmd+0x1f0>)
 8000c94:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+3] = motor_speed2;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <responseCmd+0x1fc>)
 8000c98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	b2d1      	uxtb	r1, r2
 8000ca2:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <responseCmd+0x1f0>)
 8000ca4:	54d1      	strb	r1, [r2, r3]
    break;
 8000ca6:	e0d3      	b.n	8000e50 <responseCmd+0x344>
  case CMD_SET_VEL:
    msg_length = (uint8_t)12;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	73fb      	strb	r3, [r7, #15]
    dataTran[msg_length_index] = msg_length;
 8000cac:	7b7b      	ldrb	r3, [r7, #13]
 8000cae:	4913      	ldr	r1, [pc, #76]	; (8000cfc <responseCmd+0x1f0>)
 8000cb0:	7bfa      	ldrb	r2, [r7, #15]
 8000cb2:	54ca      	strb	r2, [r1, r3]
    dataTran[msg_index] = velLeft >> 8;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <responseCmd+0x200>)
 8000cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cba:	121b      	asrs	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	7afb      	ldrb	r3, [r7, #11]
 8000cc0:	b2d1      	uxtb	r1, r2
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <responseCmd+0x1f0>)
 8000cc4:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+1] = velLeft;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <responseCmd+0x200>)
 8000cc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ccc:	7afb      	ldrb	r3, [r7, #11]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b2d1      	uxtb	r1, r2
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <responseCmd+0x1f0>)
 8000cd4:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+2] = velRight >> 8;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <responseCmd+0x204>)
 8000cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cdc:	121b      	asrs	r3, r3, #8
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	b2d1      	uxtb	r1, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <responseCmd+0x1f0>)
 8000ce8:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+3] = velRight;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <responseCmd+0x204>)
 8000cec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cf0:	7afb      	ldrb	r3, [r7, #11]
 8000cf2:	3303      	adds	r3, #3
 8000cf4:	b2d1      	uxtb	r1, r2
 8000cf6:	4a01      	ldr	r2, [pc, #4]	; (8000cfc <responseCmd+0x1f0>)
 8000cf8:	54d1      	strb	r1, [r2, r3]
    break;
 8000cfa:	e0a9      	b.n	8000e50 <responseCmd+0x344>
 8000cfc:	20000220 	.word	0x20000220
 8000d00:	20000254 	.word	0x20000254
 8000d04:	2000025c 	.word	0x2000025c
 8000d08:	2000025e 	.word	0x2000025e
 8000d0c:	2000022e 	.word	0x2000022e
 8000d10:	20000230 	.word	0x20000230
  case CMD_SET_PID_KP:
    msg_length = (uint8_t)12;
 8000d14:	230c      	movs	r3, #12
 8000d16:	73fb      	strb	r3, [r7, #15]
    dataTran[msg_length_index] = msg_length;
 8000d18:	7b7b      	ldrb	r3, [r7, #13]
 8000d1a:	4955      	ldr	r1, [pc, #340]	; (8000e70 <responseCmd+0x364>)
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	54ca      	strb	r2, [r1, r3]
    dataTran[msg_index] = (uint32_t)kp >> 24;
 8000d20:	4b54      	ldr	r3, [pc, #336]	; (8000e74 <responseCmd+0x368>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa7d 	bl	8000224 <__aeabi_f2uiz>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	0e1a      	lsrs	r2, r3, #24
 8000d2e:	7afb      	ldrb	r3, [r7, #11]
 8000d30:	b2d1      	uxtb	r1, r2
 8000d32:	4a4f      	ldr	r2, [pc, #316]	; (8000e70 <responseCmd+0x364>)
 8000d34:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+1] = (uint32_t)kp >> 16;
 8000d36:	4b4f      	ldr	r3, [pc, #316]	; (8000e74 <responseCmd+0x368>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fa72 	bl	8000224 <__aeabi_f2uiz>
 8000d40:	4603      	mov	r3, r0
 8000d42:	0c1a      	lsrs	r2, r3, #16
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	3301      	adds	r3, #1
 8000d48:	b2d1      	uxtb	r1, r2
 8000d4a:	4a49      	ldr	r2, [pc, #292]	; (8000e70 <responseCmd+0x364>)
 8000d4c:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+2] = (uint32_t)kp >> 8;
 8000d4e:	4b49      	ldr	r3, [pc, #292]	; (8000e74 <responseCmd+0x368>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fa66 	bl	8000224 <__aeabi_f2uiz>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	0a1a      	lsrs	r2, r3, #8
 8000d5c:	7afb      	ldrb	r3, [r7, #11]
 8000d5e:	3302      	adds	r3, #2
 8000d60:	b2d1      	uxtb	r1, r2
 8000d62:	4a43      	ldr	r2, [pc, #268]	; (8000e70 <responseCmd+0x364>)
 8000d64:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+3] = (uint32_t)kp;
 8000d66:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <responseCmd+0x368>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fa5a 	bl	8000224 <__aeabi_f2uiz>
 8000d70:	4602      	mov	r2, r0
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	3303      	adds	r3, #3
 8000d76:	b2d1      	uxtb	r1, r2
 8000d78:	4a3d      	ldr	r2, [pc, #244]	; (8000e70 <responseCmd+0x364>)
 8000d7a:	54d1      	strb	r1, [r2, r3]
  case CMD_SET_PID_KI:
    msg_length = (uint8_t)12;
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	73fb      	strb	r3, [r7, #15]
    dataTran[msg_length_index] = msg_length;
 8000d80:	7b7b      	ldrb	r3, [r7, #13]
 8000d82:	493b      	ldr	r1, [pc, #236]	; (8000e70 <responseCmd+0x364>)
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	54ca      	strb	r2, [r1, r3]
    dataTran[msg_index] = (uint32_t)kp >> 24;
 8000d88:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <responseCmd+0x368>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fa49 	bl	8000224 <__aeabi_f2uiz>
 8000d92:	4603      	mov	r3, r0
 8000d94:	0e1a      	lsrs	r2, r3, #24
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	b2d1      	uxtb	r1, r2
 8000d9a:	4a35      	ldr	r2, [pc, #212]	; (8000e70 <responseCmd+0x364>)
 8000d9c:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+1] = (uint32_t)kp >> 16;
 8000d9e:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <responseCmd+0x368>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fa3e 	bl	8000224 <__aeabi_f2uiz>
 8000da8:	4603      	mov	r3, r0
 8000daa:	0c1a      	lsrs	r2, r3, #16
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b2d1      	uxtb	r1, r2
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <responseCmd+0x364>)
 8000db4:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+2] = (uint32_t)kp >> 8;
 8000db6:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <responseCmd+0x368>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fa32 	bl	8000224 <__aeabi_f2uiz>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	0a1a      	lsrs	r2, r3, #8
 8000dc4:	7afb      	ldrb	r3, [r7, #11]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	b2d1      	uxtb	r1, r2
 8000dca:	4a29      	ldr	r2, [pc, #164]	; (8000e70 <responseCmd+0x364>)
 8000dcc:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+3] = (uint32_t)kp;
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <responseCmd+0x368>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fa26 	bl	8000224 <__aeabi_f2uiz>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	3303      	adds	r3, #3
 8000dde:	b2d1      	uxtb	r1, r2
 8000de0:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <responseCmd+0x364>)
 8000de2:	54d1      	strb	r1, [r2, r3]
  case CMD_SET_PID_KD:
    msg_length = (uint8_t)12;
 8000de4:	230c      	movs	r3, #12
 8000de6:	73fb      	strb	r3, [r7, #15]
    dataTran[msg_length_index] = msg_length;
 8000de8:	7b7b      	ldrb	r3, [r7, #13]
 8000dea:	4921      	ldr	r1, [pc, #132]	; (8000e70 <responseCmd+0x364>)
 8000dec:	7bfa      	ldrb	r2, [r7, #15]
 8000dee:	54ca      	strb	r2, [r1, r3]
    dataTran[msg_index] = (uint32_t)kp >> 24;
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <responseCmd+0x368>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fa15 	bl	8000224 <__aeabi_f2uiz>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	0e1a      	lsrs	r2, r3, #24
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	b2d1      	uxtb	r1, r2
 8000e02:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <responseCmd+0x364>)
 8000e04:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+1] = (uint32_t)kp >> 16;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <responseCmd+0x368>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa0a 	bl	8000224 <__aeabi_f2uiz>
 8000e10:	4603      	mov	r3, r0
 8000e12:	0c1a      	lsrs	r2, r3, #16
 8000e14:	7afb      	ldrb	r3, [r7, #11]
 8000e16:	3301      	adds	r3, #1
 8000e18:	b2d1      	uxtb	r1, r2
 8000e1a:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <responseCmd+0x364>)
 8000e1c:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+2] = (uint32_t)kp >> 8;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <responseCmd+0x368>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f9fe 	bl	8000224 <__aeabi_f2uiz>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	0a1a      	lsrs	r2, r3, #8
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	3302      	adds	r3, #2
 8000e30:	b2d1      	uxtb	r1, r2
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <responseCmd+0x364>)
 8000e34:	54d1      	strb	r1, [r2, r3]
    dataTran[msg_index+3] = (uint32_t)kp;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <responseCmd+0x368>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff f9f2 	bl	8000224 <__aeabi_f2uiz>
 8000e40:	4602      	mov	r2, r0
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	3303      	adds	r3, #3
 8000e46:	b2d1      	uxtb	r1, r2
 8000e48:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <responseCmd+0x364>)
 8000e4a:	54d1      	strb	r1, [r2, r3]
  case CMD_STATUS:
    break;
 8000e4c:	e000      	b.n	8000e50 <responseCmd+0x344>
  default:
    break;
 8000e4e:	bf00      	nop
  }
  dataTran[msg_length-1] = 0x3F;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <responseCmd+0x364>)
 8000e56:	213f      	movs	r1, #63	; 0x3f
 8000e58:	54d1      	strb	r1, [r2, r3]
  HAL_UART_Transmit_DMA(&huart1, dataTran, msg_length);
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4903      	ldr	r1, [pc, #12]	; (8000e70 <responseCmd+0x364>)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <responseCmd+0x36c>)
 8000e64:	f003 fa9c 	bl	80043a0 <HAL_UART_Transmit_DMA>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000220 	.word	0x20000220
 8000e74:	20000260 	.word	0x20000260
 8000e78:	20000148 	.word	0x20000148

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6193      	str	r3, [r2, #24]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_MspInit+0x60>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_MspInit+0x60>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000

08000eec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f0a:	d12c      	bne.n	8000f66 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f0c:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	4a2f      	ldr	r2, [pc, #188]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	61d3      	str	r3, [r2, #28]
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4821      	ldr	r0, [pc, #132]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000f50:	f001 f8e2 	bl	8002118 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	201c      	movs	r0, #28
 8000f5a:	f000 fc24 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f5e:	201c      	movs	r0, #28
 8000f60:	f000 fc3d 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f64:	e030      	b.n	8000fc8 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM3)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <HAL_TIM_Encoder_MspInit+0xec>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d12b      	bne.n	8000fc8 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	61d3      	str	r3, [r2, #28]
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa0:	23c0      	movs	r3, #192	; 0xc0
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000fb4:	f001 f8b0 	bl	8002118 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	201d      	movs	r0, #29
 8000fbe:	f000 fbf2 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fc2:	201d      	movs	r0, #29
 8000fc4:	f000 fc0b 	bl	80017de <HAL_NVIC_EnableIRQ>
}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40000400 	.word	0x40000400

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_TIM_Base_MspInit+0x68>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d114      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	201e      	movs	r0, #30
 800100c:	f000 fbcb 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001010:	201e      	movs	r0, #30
 8001012:	f000 fbe4 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001016:	e010      	b.n	800103a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM8)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_TIM_Base_MspInit+0x70>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10b      	bne.n	800103a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8001028:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_TIM_Base_MspInit+0x6c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40000800 	.word	0x40000800
 8001048:	40021000 	.word	0x40021000
 800104c:	40013400 	.word	0x40013400

08001050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_TIM_MspPostInit+0x8c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d130      	bne.n	80010d2 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_TIM_MspPostInit+0x90>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <HAL_TIM_MspPostInit+0x90>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_TIM_MspPostInit+0x90>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_TIM_MspPostInit+0x90>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <HAL_TIM_MspPostInit+0x90>)
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_TIM_MspPostInit+0x90>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM8_CH2N
    PB1     ------> TIM8_CH3N
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010a0:	2303      	movs	r3, #3
 80010a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <HAL_TIM_MspPostInit+0x94>)
 80010b4:	f001 f830 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80010b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4619      	mov	r1, r3
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <HAL_TIM_MspPostInit+0x98>)
 80010ce:	f001 f823 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40013400 	.word	0x40013400
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010c00 	.word	0x40010c00
 80010e8:	40011000 	.word	0x40011000

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a47      	ldr	r2, [pc, #284]	; (8001224 <HAL_UART_MspInit+0x138>)
 8001108:	4293      	cmp	r3, r2
 800110a:	f040 8086 	bne.w	800121a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <HAL_UART_MspInit+0x13c>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	4a45      	ldr	r2, [pc, #276]	; (8001228 <HAL_UART_MspInit+0x13c>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	6193      	str	r3, [r2, #24]
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <HAL_UART_MspInit+0x13c>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <HAL_UART_MspInit+0x13c>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a3f      	ldr	r2, [pc, #252]	; (8001228 <HAL_UART_MspInit+0x13c>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_UART_MspInit+0x13c>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800113e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	4836      	ldr	r0, [pc, #216]	; (800122c <HAL_UART_MspInit+0x140>)
 8001154:	f000 ffe0 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	482f      	ldr	r0, [pc, #188]	; (800122c <HAL_UART_MspInit+0x140>)
 800116e:	f000 ffd3 	bl	8002118 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <HAL_UART_MspInit+0x144>)
 8001174:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <HAL_UART_MspInit+0x148>)
 8001176:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_UART_MspInit+0x144>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_UART_MspInit+0x144>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <HAL_UART_MspInit+0x144>)
 8001186:	2280      	movs	r2, #128	; 0x80
 8001188:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <HAL_UART_MspInit+0x144>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <HAL_UART_MspInit+0x144>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <HAL_UART_MspInit+0x144>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_UART_MspInit+0x144>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <HAL_UART_MspInit+0x144>)
 80011a4:	f000 fb36 	bl	8001814 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80011ae:	f7ff fe65 	bl	8000e7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_UART_MspInit+0x144>)
 80011b6:	639a      	str	r2, [r3, #56]	; 0x38
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_UART_MspInit+0x144>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <HAL_UART_MspInit+0x150>)
 80011c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011c6:	2210      	movs	r2, #16
 80011c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011ee:	4812      	ldr	r0, [pc, #72]	; (8001238 <HAL_UART_MspInit+0x14c>)
 80011f0:	f000 fb10 	bl	8001814 <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80011fa:	f7ff fe3f 	bl	8000e7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_UART_MspInit+0x14c>)
 8001202:	635a      	str	r2, [r3, #52]	; 0x34
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <HAL_UART_MspInit+0x14c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2025      	movs	r0, #37	; 0x25
 8001210:	f000 fac9 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001214:	2025      	movs	r0, #37	; 0x25
 8001216:	f000 fae2 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40013800 	.word	0x40013800
 8001228:	40021000 	.word	0x40021000
 800122c:	40010800 	.word	0x40010800
 8001230:	2000018c 	.word	0x2000018c
 8001234:	40020058 	.word	0x40020058
 8001238:	200001d0 	.word	0x200001d0
 800123c:	40020044 	.word	0x40020044

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001286:	f000 f99b 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DMA1_Channel4_IRQHandler+0x10>)
 8001296:	f000 fcd5 	bl	8001c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

//  HAL_UART_Transmit_DMA(&huart1, dataRec, 16);
  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200001d0 	.word	0x200001d0

080012a4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <DMA1_Channel5_IRQHandler+0x10>)
 80012aa:	f000 fccb 	bl	8001c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
//  HAL_UART_Transmit_DMA(&huart1, dataRec, 16);
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000018c 	.word	0x2000018c

080012b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <TIM2_IRQHandler+0x4c>)
 80012c0:	f002 f88c 	bl	80033dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  uint16_t timer_temp1;
//  if(__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE)){
	  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <TIM2_IRQHandler+0x4c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f06f 0201 	mvn.w	r2, #1
 80012cc:	611a      	str	r2, [r3, #16]
	  timer_temp1 = __HAL_TIM_GET_COUNTER(&htim2);
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <TIM2_IRQHandler+0x4c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	80fb      	strh	r3, [r7, #6]
	  if(timer_temp1 == 65535) 	count_temp1--;
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012dc:	4293      	cmp	r3, r2
 80012de:	d104      	bne.n	80012ea <TIM2_IRQHandler+0x32>
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <TIM2_IRQHandler+0x50>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <TIM2_IRQHandler+0x50>)
 80012e8:	6013      	str	r3, [r2, #0]
	  if(timer_temp1 == 0) 		count_temp1++;
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d104      	bne.n	80012fa <TIM2_IRQHandler+0x42>
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <TIM2_IRQHandler+0x50>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <TIM2_IRQHandler+0x50>)
 80012f8:	6013      	str	r3, [r2, #0]
//  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000028 	.word	0x20000028
 8001308:	2000023c 	.word	0x2000023c

0800130c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <TIM3_IRQHandler+0x4c>)
 8001314:	f002 f862 	bl	80033dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  uint16_t timer_temp2;
//    if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE)){
  	  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <TIM3_IRQHandler+0x4c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f06f 0201 	mvn.w	r2, #1
 8001320:	611a      	str	r2, [r3, #16]
  	  timer_temp2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <TIM3_IRQHandler+0x4c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	80fb      	strh	r3, [r7, #6]
  	  if(timer_temp2 == 65535) 	count_temp2--;
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001330:	4293      	cmp	r3, r2
 8001332:	d104      	bne.n	800133e <TIM3_IRQHandler+0x32>
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <TIM3_IRQHandler+0x50>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <TIM3_IRQHandler+0x50>)
 800133c:	6013      	str	r3, [r2, #0]
  	  if(timer_temp2 == 0) 		count_temp2++;
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d104      	bne.n	800134e <TIM3_IRQHandler+0x42>
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <TIM3_IRQHandler+0x50>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <TIM3_IRQHandler+0x50>)
 800134c:	6013      	str	r3, [r2, #0]
//    }
  /* USER CODE END TIM3_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000070 	.word	0x20000070
 800135c:	20000240 	.word	0x20000240

08001360 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001364:	4849      	ldr	r0, [pc, #292]	; (800148c <TIM4_IRQHandler+0x12c>)
 8001366:	f002 f839 	bl	80033dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
//	if(__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE)){
		__HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 800136a:	4b48      	ldr	r3, [pc, #288]	; (800148c <TIM4_IRQHandler+0x12c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f06f 0201 	mvn.w	r2, #1
 8001372:	611a      	str	r2, [r3, #16]
		encoder_pulse1 =  __HAL_TIM_GET_COUNTER(&htim2) + 65536*count_temp1;
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <TIM4_IRQHandler+0x130>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <TIM4_IRQHandler+0x134>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	041b      	lsls	r3, r3, #16
 8001380:	4413      	add	r3, r2
 8001382:	4a45      	ldr	r2, [pc, #276]	; (8001498 <TIM4_IRQHandler+0x138>)
 8001384:	6013      	str	r3, [r2, #0]
		encoder_pulse2 =  __HAL_TIM_GET_COUNTER(&htim3) + 65536*count_temp2;
 8001386:	4b45      	ldr	r3, [pc, #276]	; (800149c <TIM4_IRQHandler+0x13c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <TIM4_IRQHandler+0x140>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	4413      	add	r3, r2
 8001394:	4a43      	ldr	r2, [pc, #268]	; (80014a4 <TIM4_IRQHandler+0x144>)
 8001396:	6013      	str	r3, [r2, #0]
		count_recent1 = encoder_pulse1;
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <TIM4_IRQHandler+0x138>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a42      	ldr	r2, [pc, #264]	; (80014a8 <TIM4_IRQHandler+0x148>)
 800139e:	6013      	str	r3, [r2, #0]
		count_recent2 = encoder_pulse2;
 80013a0:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <TIM4_IRQHandler+0x144>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a41      	ldr	r2, [pc, #260]	; (80014ac <TIM4_IRQHandler+0x14c>)
 80013a6:	6013      	str	r3, [r2, #0]
		if (count_recent1 > count_update1)
 80013a8:	4b3f      	ldr	r3, [pc, #252]	; (80014a8 <TIM4_IRQHandler+0x148>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <TIM4_IRQHandler+0x150>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d910      	bls.n	80013d6 <TIM4_IRQHandler+0x76>
		{
			motor_speed1 = (int16_t)((count_recent1 - count_update1)*6000*100/2970/2);  //ngat 10ms , encoder 85 xung
 80013b4:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <TIM4_IRQHandler+0x148>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <TIM4_IRQHandler+0x150>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <TIM4_IRQHandler+0x154>)
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	4a3c      	ldr	r2, [pc, #240]	; (80014b8 <TIM4_IRQHandler+0x158>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <TIM4_IRQHandler+0x15c>)
 80013d2:	801a      	strh	r2, [r3, #0]
 80013d4:	e01c      	b.n	8001410 <TIM4_IRQHandler+0xb0>
		}
		else if (count_recent1 < count_update1)
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <TIM4_IRQHandler+0x148>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <TIM4_IRQHandler+0x150>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d213      	bcs.n	800140a <TIM4_IRQHandler+0xaa>
		{
			motor_speed1 = 0- (int16_t)((count_update1 - count_recent1)*6000*100/2970/2);  //ngat 10ms , encoder 85 xung
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <TIM4_IRQHandler+0x150>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <TIM4_IRQHandler+0x148>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4a31      	ldr	r2, [pc, #196]	; (80014b4 <TIM4_IRQHandler+0x154>)
 80013ee:	fb02 f303 	mul.w	r3, r2, r3
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <TIM4_IRQHandler+0x158>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	425b      	negs	r3, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <TIM4_IRQHandler+0x15c>)
 8001406:	801a      	strh	r2, [r3, #0]
 8001408:	e002      	b.n	8001410 <TIM4_IRQHandler+0xb0>
		}
		else {	motor_speed1 = 0;  }
 800140a:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <TIM4_IRQHandler+0x15c>)
 800140c:	2200      	movs	r2, #0
 800140e:	801a      	strh	r2, [r3, #0]

		/*calculate motor 2 speed*/
		if (count_recent2 > count_update2)
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <TIM4_IRQHandler+0x14c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <TIM4_IRQHandler+0x160>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d910      	bls.n	800143e <TIM4_IRQHandler+0xde>
		{
			motor_speed2 = (int16_t)((count_recent2 - count_update2)*6000*100/2970/2);  //ngat 10ms , encoder 85 xung
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <TIM4_IRQHandler+0x14c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <TIM4_IRQHandler+0x160>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <TIM4_IRQHandler+0x154>)
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <TIM4_IRQHandler+0x158>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <TIM4_IRQHandler+0x164>)
 800143a:	801a      	strh	r2, [r3, #0]
 800143c:	e01c      	b.n	8001478 <TIM4_IRQHandler+0x118>
		}
		else if (count_recent2 < count_update2)
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <TIM4_IRQHandler+0x14c>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <TIM4_IRQHandler+0x160>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d213      	bcs.n	8001472 <TIM4_IRQHandler+0x112>
		{
			motor_speed2 = 0- (int16_t)((count_update2 - count_recent2)*6000*100/2970/2);  //ngat 10ms , encoder 85xung
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <TIM4_IRQHandler+0x160>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <TIM4_IRQHandler+0x14c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <TIM4_IRQHandler+0x154>)
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <TIM4_IRQHandler+0x158>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	425b      	negs	r3, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	b21a      	sxth	r2, r3
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <TIM4_IRQHandler+0x164>)
 800146e:	801a      	strh	r2, [r3, #0]
 8001470:	e002      	b.n	8001478 <TIM4_IRQHandler+0x118>
		}
		else{	motor_speed2 = 0;  }
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <TIM4_IRQHandler+0x164>)
 8001474:	2200      	movs	r2, #0
 8001476:	801a      	strh	r2, [r3, #0]
		/*update count 1 and count 2*/
		count_update1 = count_recent1;
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <TIM4_IRQHandler+0x148>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <TIM4_IRQHandler+0x150>)
 800147e:	6013      	str	r3, [r2, #0]
		count_update2 = count_recent2;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <TIM4_IRQHandler+0x14c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <TIM4_IRQHandler+0x160>)
 8001486:	6013      	str	r3, [r2, #0]
//			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),100);
//			count_test = 0;
//		}
//	}
  /* USER CODE END TIM4_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000b8 	.word	0x200000b8
 8001490:	20000028 	.word	0x20000028
 8001494:	2000023c 	.word	0x2000023c
 8001498:	20000234 	.word	0x20000234
 800149c:	20000070 	.word	0x20000070
 80014a0:	20000240 	.word	0x20000240
 80014a4:	20000238 	.word	0x20000238
 80014a8:	20000244 	.word	0x20000244
 80014ac:	20000248 	.word	0x20000248
 80014b0:	2000024c 	.word	0x2000024c
 80014b4:	000927c0 	.word	0x000927c0
 80014b8:	2c21c9df 	.word	0x2c21c9df
 80014bc:	2000025c 	.word	0x2000025c
 80014c0:	20000250 	.word	0x20000250
 80014c4:	2000025e 	.word	0x2000025e

080014c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <USART1_IRQHandler+0x10>)
 80014ce:	f003 f803 	bl	80044d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000148 	.word	0x20000148

080014dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	; (800152c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800150e:	f7ff ffe5 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f003 fcf1 	bl	8004ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001516:	f7fe fea5 	bl	8000264 <main>
  bx lr
 800151a:	4770      	bx	lr
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001524:	08004f98 	.word	0x08004f98
  ldr r2, =_sbss
 8001528:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800152c:	20000270 	.word	0x20000270

08001530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_2_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x28>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x28>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f923 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	200f      	movs	r0, #15
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fc9a 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f93b 	bl	80017fa <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800159c:	f000 f903 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_IncTick+0x1c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_IncTick+0x20>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <HAL_IncTick+0x20>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000008 	.word	0x20000008
 80015e0:	2000026c 	.word	0x2000026c

080015e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <HAL_GetTick+0x10>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	2000026c 	.word	0x2000026c

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4906      	ldr	r1, [pc, #24]	; (8001690 <__NVIC_EnableIRQ+0x34>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001770:	f7ff ff90 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff2d 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff42 	bl	8001640 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff90 	bl	80016e8 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5f 	bl	8001694 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff35 	bl	800165c <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e059      	b.n	80018de <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_DMA_Init+0xd4>)
 8001832:	429a      	cmp	r2, r3
 8001834:	d80f      	bhi.n	8001856 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_DMA_Init+0xd8>)
 800183e:	4413      	add	r3, r2
 8001840:	4a2b      	ldr	r2, [pc, #172]	; (80018f0 <HAL_DMA_Init+0xdc>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	009a      	lsls	r2, r3, #2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <HAL_DMA_Init+0xe0>)
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
 8001854:	e00e      	b.n	8001874 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_DMA_Init+0xe4>)
 800185e:	4413      	add	r3, r2
 8001860:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <HAL_DMA_Init+0xdc>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	009a      	lsls	r2, r3, #2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_DMA_Init+0xe8>)
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800188a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800188e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40020407 	.word	0x40020407
 80018ec:	bffdfff8 	.word	0xbffdfff8
 80018f0:	cccccccd 	.word	0xcccccccd
 80018f4:	40020000 	.word	0x40020000
 80018f8:	bffdfbf8 	.word	0xbffdfbf8
 80018fc:	40020400 	.word	0x40020400

08001900 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_DMA_Start_IT+0x20>
 800191c:	2302      	movs	r3, #2
 800191e:	e04a      	b.n	80019b6 <HAL_DMA_Start_IT+0xb6>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800192e:	2b01      	cmp	r3, #1
 8001930:	d13a      	bne.n	80019a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2202      	movs	r2, #2
 8001936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fbb0 	bl	80020bc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 020e 	orr.w	r2, r2, #14
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e00f      	b.n	8001996 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0204 	bic.w	r2, r2, #4
 8001984:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 020a 	orr.w	r2, r2, #10
 8001994:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e005      	b.n	80019b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019b0:	2302      	movs	r3, #2
 80019b2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019be:	b480      	push	{r7}
 80019c0:	b085      	sub	sp, #20
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d008      	beq.n	80019e6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2204      	movs	r2, #4
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e020      	b.n	8001a28 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 020e 	bic.w	r2, r2, #14
 80019f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f202 	lsl.w	r2, r1, r2
 8001a14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d005      	beq.n	8001a56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e0d6      	b.n	8001c04 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 020e 	bic.w	r2, r2, #14
 8001a64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b64      	ldr	r3, [pc, #400]	; (8001c10 <HAL_DMA_Abort_IT+0x1dc>)
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d958      	bls.n	8001b34 <HAL_DMA_Abort_IT+0x100>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a63      	ldr	r2, [pc, #396]	; (8001c14 <HAL_DMA_Abort_IT+0x1e0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d04f      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xf8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a61      	ldr	r2, [pc, #388]	; (8001c18 <HAL_DMA_Abort_IT+0x1e4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d048      	beq.n	8001b28 <HAL_DMA_Abort_IT+0xf4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a60      	ldr	r2, [pc, #384]	; (8001c1c <HAL_DMA_Abort_IT+0x1e8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d040      	beq.n	8001b22 <HAL_DMA_Abort_IT+0xee>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5e      	ldr	r2, [pc, #376]	; (8001c20 <HAL_DMA_Abort_IT+0x1ec>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d038      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xe8>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <HAL_DMA_Abort_IT+0x1f0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d030      	beq.n	8001b16 <HAL_DMA_Abort_IT+0xe2>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a5b      	ldr	r2, [pc, #364]	; (8001c28 <HAL_DMA_Abort_IT+0x1f4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d028      	beq.n	8001b10 <HAL_DMA_Abort_IT+0xdc>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a53      	ldr	r2, [pc, #332]	; (8001c10 <HAL_DMA_Abort_IT+0x1dc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d020      	beq.n	8001b0a <HAL_DMA_Abort_IT+0xd6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_DMA_Abort_IT+0x1f8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_DMA_Abort_IT+0xd2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_DMA_Abort_IT+0x1fc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d012      	beq.n	8001b02 <HAL_DMA_Abort_IT+0xce>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <HAL_DMA_Abort_IT+0x200>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00a      	beq.n	8001afc <HAL_DMA_Abort_IT+0xc8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a53      	ldr	r2, [pc, #332]	; (8001c38 <HAL_DMA_Abort_IT+0x204>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d102      	bne.n	8001af6 <HAL_DMA_Abort_IT+0xc2>
 8001af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af4:	e01b      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001afa:	e018      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b00:	e015      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001b02:	2310      	movs	r3, #16
 8001b04:	e013      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e011      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001b0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b0e:	e00e      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001b10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b14:	e00b      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b1a:	e008      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b20:	e005      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b26:	e002      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001b28:	2310      	movs	r3, #16
 8001b2a:	e000      	b.n	8001b2e <HAL_DMA_Abort_IT+0xfa>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	4a43      	ldr	r2, [pc, #268]	; (8001c3c <HAL_DMA_Abort_IT+0x208>)
 8001b30:	6053      	str	r3, [r2, #4]
 8001b32:	e057      	b.n	8001be4 <HAL_DMA_Abort_IT+0x1b0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a36      	ldr	r2, [pc, #216]	; (8001c14 <HAL_DMA_Abort_IT+0x1e0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d04f      	beq.n	8001bde <HAL_DMA_Abort_IT+0x1aa>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a35      	ldr	r2, [pc, #212]	; (8001c18 <HAL_DMA_Abort_IT+0x1e4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d048      	beq.n	8001bda <HAL_DMA_Abort_IT+0x1a6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a33      	ldr	r2, [pc, #204]	; (8001c1c <HAL_DMA_Abort_IT+0x1e8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d040      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x1a0>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a32      	ldr	r2, [pc, #200]	; (8001c20 <HAL_DMA_Abort_IT+0x1ec>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d038      	beq.n	8001bce <HAL_DMA_Abort_IT+0x19a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <HAL_DMA_Abort_IT+0x1f0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d030      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x194>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2f      	ldr	r2, [pc, #188]	; (8001c28 <HAL_DMA_Abort_IT+0x1f4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d028      	beq.n	8001bc2 <HAL_DMA_Abort_IT+0x18e>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <HAL_DMA_Abort_IT+0x1dc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d020      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x188>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <HAL_DMA_Abort_IT+0x1f8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d019      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x184>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_DMA_Abort_IT+0x1fc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d012      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x180>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <HAL_DMA_Abort_IT+0x200>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00a      	beq.n	8001bae <HAL_DMA_Abort_IT+0x17a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <HAL_DMA_Abort_IT+0x204>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d102      	bne.n	8001ba8 <HAL_DMA_Abort_IT+0x174>
 8001ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba6:	e01b      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bac:	e018      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb2:	e015      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	e013      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e011      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc0:	e00e      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bc6:	e00b      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bcc:	e008      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	e005      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	e002      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bda:	2310      	movs	r3, #16
 8001bdc:	e000      	b.n	8001be0 <HAL_DMA_Abort_IT+0x1ac>
 8001bde:	2301      	movs	r3, #1
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_DMA_Abort_IT+0x20c>)
 8001be2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
    } 
  }
  return status;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40020080 	.word	0x40020080
 8001c14:	40020008 	.word	0x40020008
 8001c18:	4002001c 	.word	0x4002001c
 8001c1c:	40020030 	.word	0x40020030
 8001c20:	40020044 	.word	0x40020044
 8001c24:	40020058 	.word	0x40020058
 8001c28:	4002006c 	.word	0x4002006c
 8001c2c:	40020408 	.word	0x40020408
 8001c30:	4002041c 	.word	0x4002041c
 8001c34:	40020430 	.word	0x40020430
 8001c38:	40020444 	.word	0x40020444
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020000 	.word	0x40020000

08001c44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	2204      	movs	r2, #4
 8001c62:	409a      	lsls	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80f1 	beq.w	8001e50 <HAL_DMA_IRQHandler+0x20c>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80eb 	beq.w	8001e50 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0204 	bic.w	r2, r2, #4
 8001c96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_DMA_IRQHandler+0x1d8>)
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d958      	bls.n	8001d56 <HAL_DMA_IRQHandler+0x112>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a5d      	ldr	r2, [pc, #372]	; (8001e20 <HAL_DMA_IRQHandler+0x1dc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d04f      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x10a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <HAL_DMA_IRQHandler+0x1e0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d048      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x106>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <HAL_DMA_IRQHandler+0x1e4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d040      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x100>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a59      	ldr	r2, [pc, #356]	; (8001e2c <HAL_DMA_IRQHandler+0x1e8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d038      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xfa>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a57      	ldr	r2, [pc, #348]	; (8001e30 <HAL_DMA_IRQHandler+0x1ec>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d030      	beq.n	8001d38 <HAL_DMA_IRQHandler+0xf4>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a56      	ldr	r2, [pc, #344]	; (8001e34 <HAL_DMA_IRQHandler+0x1f0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d028      	beq.n	8001d32 <HAL_DMA_IRQHandler+0xee>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_DMA_IRQHandler+0x1d8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d020      	beq.n	8001d2c <HAL_DMA_IRQHandler+0xe8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HAL_DMA_IRQHandler+0x1f4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d019      	beq.n	8001d28 <HAL_DMA_IRQHandler+0xe4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a50      	ldr	r2, [pc, #320]	; (8001e3c <HAL_DMA_IRQHandler+0x1f8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d012      	beq.n	8001d24 <HAL_DMA_IRQHandler+0xe0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a4f      	ldr	r2, [pc, #316]	; (8001e40 <HAL_DMA_IRQHandler+0x1fc>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00a      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xda>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a4d      	ldr	r2, [pc, #308]	; (8001e44 <HAL_DMA_IRQHandler+0x200>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d102      	bne.n	8001d18 <HAL_DMA_IRQHandler+0xd4>
 8001d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d16:	e01b      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d1c:	e018      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d22:	e015      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d24:	2340      	movs	r3, #64	; 0x40
 8001d26:	e013      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e011      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d30:	e00e      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d36:	e00b      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d3c:	e008      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d42:	e005      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d48:	e002      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d4a:	2340      	movs	r3, #64	; 0x40
 8001d4c:	e000      	b.n	8001d50 <HAL_DMA_IRQHandler+0x10c>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	4a3d      	ldr	r2, [pc, #244]	; (8001e48 <HAL_DMA_IRQHandler+0x204>)
 8001d52:	6053      	str	r3, [r2, #4]
 8001d54:	e057      	b.n	8001e06 <HAL_DMA_IRQHandler+0x1c2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a31      	ldr	r2, [pc, #196]	; (8001e20 <HAL_DMA_IRQHandler+0x1dc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d04f      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x1bc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <HAL_DMA_IRQHandler+0x1e0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d048      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x1b8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <HAL_DMA_IRQHandler+0x1e4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d040      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x1b2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <HAL_DMA_IRQHandler+0x1e8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d038      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x1ac>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2b      	ldr	r2, [pc, #172]	; (8001e30 <HAL_DMA_IRQHandler+0x1ec>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d030      	beq.n	8001dea <HAL_DMA_IRQHandler+0x1a6>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <HAL_DMA_IRQHandler+0x1f0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d028      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x1a0>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <HAL_DMA_IRQHandler+0x1d8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d020      	beq.n	8001dde <HAL_DMA_IRQHandler+0x19a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_DMA_IRQHandler+0x1f4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_DMA_IRQHandler+0x196>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <HAL_DMA_IRQHandler+0x1f8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x192>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <HAL_DMA_IRQHandler+0x1fc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00a      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x18c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_DMA_IRQHandler+0x200>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d102      	bne.n	8001dca <HAL_DMA_IRQHandler+0x186>
 8001dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dc8:	e01b      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001dca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001dce:	e018      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd4:	e015      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001dd6:	2340      	movs	r3, #64	; 0x40
 8001dd8:	e013      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e011      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001dde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001de2:	e00e      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001de4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001de8:	e00b      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001dea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001dee:	e008      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001df4:	e005      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dfa:	e002      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001dfc:	2340      	movs	r3, #64	; 0x40
 8001dfe:	e000      	b.n	8001e02 <HAL_DMA_IRQHandler+0x1be>
 8001e00:	2304      	movs	r3, #4
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_DMA_IRQHandler+0x208>)
 8001e04:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8136 	beq.w	800207c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e18:	e130      	b.n	800207c <HAL_DMA_IRQHandler+0x438>
 8001e1a:	bf00      	nop
 8001e1c:	40020080 	.word	0x40020080
 8001e20:	40020008 	.word	0x40020008
 8001e24:	4002001c 	.word	0x4002001c
 8001e28:	40020030 	.word	0x40020030
 8001e2c:	40020044 	.word	0x40020044
 8001e30:	40020058 	.word	0x40020058
 8001e34:	4002006c 	.word	0x4002006c
 8001e38:	40020408 	.word	0x40020408
 8001e3c:	4002041c 	.word	0x4002041c
 8001e40:	40020430 	.word	0x40020430
 8001e44:	40020444 	.word	0x40020444
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	2202      	movs	r2, #2
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80dd 	beq.w	800201c <HAL_DMA_IRQHandler+0x3d8>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80d7 	beq.w	800201c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10b      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 020a 	bic.w	r2, r2, #10
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b7b      	ldr	r3, [pc, #492]	; (8002088 <HAL_DMA_IRQHandler+0x444>)
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d958      	bls.n	8001f52 <HAL_DMA_IRQHandler+0x30e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a79      	ldr	r2, [pc, #484]	; (800208c <HAL_DMA_IRQHandler+0x448>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d04f      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x306>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a78      	ldr	r2, [pc, #480]	; (8002090 <HAL_DMA_IRQHandler+0x44c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d048      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x302>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a76      	ldr	r2, [pc, #472]	; (8002094 <HAL_DMA_IRQHandler+0x450>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d040      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x2fc>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a75      	ldr	r2, [pc, #468]	; (8002098 <HAL_DMA_IRQHandler+0x454>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d038      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x2f6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a73      	ldr	r2, [pc, #460]	; (800209c <HAL_DMA_IRQHandler+0x458>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d030      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x2f0>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a72      	ldr	r2, [pc, #456]	; (80020a0 <HAL_DMA_IRQHandler+0x45c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d028      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x2ea>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a69      	ldr	r2, [pc, #420]	; (8002088 <HAL_DMA_IRQHandler+0x444>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d020      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x2e4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6e      	ldr	r2, [pc, #440]	; (80020a4 <HAL_DMA_IRQHandler+0x460>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d019      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x2e0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6c      	ldr	r2, [pc, #432]	; (80020a8 <HAL_DMA_IRQHandler+0x464>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d012      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x2dc>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6b      	ldr	r2, [pc, #428]	; (80020ac <HAL_DMA_IRQHandler+0x468>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00a      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x2d6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a69      	ldr	r2, [pc, #420]	; (80020b0 <HAL_DMA_IRQHandler+0x46c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d102      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x2d0>
 8001f0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f12:	e01b      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f18:	e018      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1e:	e015      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f20:	2320      	movs	r3, #32
 8001f22:	e013      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e011      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f2c:	e00e      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f32:	e00b      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f38:	e008      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3e:	e005      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f44:	e002      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f46:	2320      	movs	r3, #32
 8001f48:	e000      	b.n	8001f4c <HAL_DMA_IRQHandler+0x308>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	4a59      	ldr	r2, [pc, #356]	; (80020b4 <HAL_DMA_IRQHandler+0x470>)
 8001f4e:	6053      	str	r3, [r2, #4]
 8001f50:	e057      	b.n	8002002 <HAL_DMA_IRQHandler+0x3be>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a4d      	ldr	r2, [pc, #308]	; (800208c <HAL_DMA_IRQHandler+0x448>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d04f      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x3b8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a4b      	ldr	r2, [pc, #300]	; (8002090 <HAL_DMA_IRQHandler+0x44c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d048      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x3b4>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_DMA_IRQHandler+0x450>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d040      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x3ae>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_DMA_IRQHandler+0x454>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d038      	beq.n	8001fec <HAL_DMA_IRQHandler+0x3a8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a47      	ldr	r2, [pc, #284]	; (800209c <HAL_DMA_IRQHandler+0x458>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d030      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x3a2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a45      	ldr	r2, [pc, #276]	; (80020a0 <HAL_DMA_IRQHandler+0x45c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d028      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x39c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <HAL_DMA_IRQHandler+0x444>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d020      	beq.n	8001fda <HAL_DMA_IRQHandler+0x396>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a41      	ldr	r2, [pc, #260]	; (80020a4 <HAL_DMA_IRQHandler+0x460>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d019      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x392>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a40      	ldr	r2, [pc, #256]	; (80020a8 <HAL_DMA_IRQHandler+0x464>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d012      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x38e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3e      	ldr	r2, [pc, #248]	; (80020ac <HAL_DMA_IRQHandler+0x468>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00a      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x388>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a3d      	ldr	r2, [pc, #244]	; (80020b0 <HAL_DMA_IRQHandler+0x46c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d102      	bne.n	8001fc6 <HAL_DMA_IRQHandler+0x382>
 8001fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc4:	e01b      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fca:	e018      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd0:	e015      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e013      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e011      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fde:	e00e      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001fe0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fe4:	e00b      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fea:	e008      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff0:	e005      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff6:	e002      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	e000      	b.n	8001ffe <HAL_DMA_IRQHandler+0x3ba>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	4a2e      	ldr	r2, [pc, #184]	; (80020b8 <HAL_DMA_IRQHandler+0x474>)
 8002000:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	2b00      	cmp	r3, #0
 8002010:	d034      	beq.n	800207c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800201a:	e02f      	b.n	800207c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	2208      	movs	r2, #8
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d028      	beq.n	800207e <HAL_DMA_IRQHandler+0x43a>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d023      	beq.n	800207e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 020e 	bic.w	r2, r2, #14
 8002044:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	2b00      	cmp	r3, #0
 8002072:	d004      	beq.n	800207e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
    }
  }
  return;
 800207c:	bf00      	nop
 800207e:	bf00      	nop
}
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40020080 	.word	0x40020080
 800208c:	40020008 	.word	0x40020008
 8002090:	4002001c 	.word	0x4002001c
 8002094:	40020030 	.word	0x40020030
 8002098:	40020044 	.word	0x40020044
 800209c:	40020058 	.word	0x40020058
 80020a0:	4002006c 	.word	0x4002006c
 80020a4:	40020408 	.word	0x40020408
 80020a8:	4002041c 	.word	0x4002041c
 80020ac:	40020430 	.word	0x40020430
 80020b0:	40020444 	.word	0x40020444
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40020000 	.word	0x40020000

080020bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f202 	lsl.w	r2, r1, r2
 80020d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	d108      	bne.n	80020fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020fa:	e007      	b.n	800210c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	60da      	str	r2, [r3, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
	...

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b08b      	sub	sp, #44	; 0x2c
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212a:	e179      	b.n	8002420 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800212c:	2201      	movs	r2, #1
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 8168 	bne.w	800241a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a96      	ldr	r2, [pc, #600]	; (80023a8 <HAL_GPIO_Init+0x290>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d05e      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002154:	4a94      	ldr	r2, [pc, #592]	; (80023a8 <HAL_GPIO_Init+0x290>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d875      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 800215a:	4a94      	ldr	r2, [pc, #592]	; (80023ac <HAL_GPIO_Init+0x294>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d058      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002160:	4a92      	ldr	r2, [pc, #584]	; (80023ac <HAL_GPIO_Init+0x294>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d86f      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 8002166:	4a92      	ldr	r2, [pc, #584]	; (80023b0 <HAL_GPIO_Init+0x298>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d052      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 800216c:	4a90      	ldr	r2, [pc, #576]	; (80023b0 <HAL_GPIO_Init+0x298>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d869      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 8002172:	4a90      	ldr	r2, [pc, #576]	; (80023b4 <HAL_GPIO_Init+0x29c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d04c      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002178:	4a8e      	ldr	r2, [pc, #568]	; (80023b4 <HAL_GPIO_Init+0x29c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d863      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 800217e:	4a8e      	ldr	r2, [pc, #568]	; (80023b8 <HAL_GPIO_Init+0x2a0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d046      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002184:	4a8c      	ldr	r2, [pc, #560]	; (80023b8 <HAL_GPIO_Init+0x2a0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d85d      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 800218a:	2b12      	cmp	r3, #18
 800218c:	d82a      	bhi.n	80021e4 <HAL_GPIO_Init+0xcc>
 800218e:	2b12      	cmp	r3, #18
 8002190:	d859      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 8002192:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <HAL_GPIO_Init+0x80>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	08002213 	.word	0x08002213
 800219c:	080021ed 	.word	0x080021ed
 80021a0:	080021ff 	.word	0x080021ff
 80021a4:	08002241 	.word	0x08002241
 80021a8:	08002247 	.word	0x08002247
 80021ac:	08002247 	.word	0x08002247
 80021b0:	08002247 	.word	0x08002247
 80021b4:	08002247 	.word	0x08002247
 80021b8:	08002247 	.word	0x08002247
 80021bc:	08002247 	.word	0x08002247
 80021c0:	08002247 	.word	0x08002247
 80021c4:	08002247 	.word	0x08002247
 80021c8:	08002247 	.word	0x08002247
 80021cc:	08002247 	.word	0x08002247
 80021d0:	08002247 	.word	0x08002247
 80021d4:	08002247 	.word	0x08002247
 80021d8:	08002247 	.word	0x08002247
 80021dc:	080021f5 	.word	0x080021f5
 80021e0:	08002209 	.word	0x08002209
 80021e4:	4a75      	ldr	r2, [pc, #468]	; (80023bc <HAL_GPIO_Init+0x2a4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ea:	e02c      	b.n	8002246 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	623b      	str	r3, [r7, #32]
          break;
 80021f2:	e029      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	3304      	adds	r3, #4
 80021fa:	623b      	str	r3, [r7, #32]
          break;
 80021fc:	e024      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	3308      	adds	r3, #8
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e01f      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	330c      	adds	r3, #12
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e01a      	b.n	8002248 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800221a:	2304      	movs	r3, #4
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e013      	b.n	8002248 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002228:	2308      	movs	r3, #8
 800222a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	611a      	str	r2, [r3, #16]
          break;
 8002232:	e009      	b.n	8002248 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002234:	2308      	movs	r3, #8
 8002236:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	615a      	str	r2, [r3, #20]
          break;
 800223e:	e003      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
          break;
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x130>
          break;
 8002246:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2bff      	cmp	r3, #255	; 0xff
 800224c:	d801      	bhi.n	8002252 <HAL_GPIO_Init+0x13a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	e001      	b.n	8002256 <HAL_GPIO_Init+0x13e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	; 0xff
 800225c:	d802      	bhi.n	8002264 <HAL_GPIO_Init+0x14c>
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	e002      	b.n	800226a <HAL_GPIO_Init+0x152>
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	3b08      	subs	r3, #8
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	210f      	movs	r1, #15
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	431a      	orrs	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80c1 	beq.w	800241a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002298:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_GPIO_Init+0x2a8>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a48      	ldr	r2, [pc, #288]	; (80023c0 <HAL_GPIO_Init+0x2a8>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <HAL_GPIO_Init+0x2a8>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022b0:	4a44      	ldr	r2, [pc, #272]	; (80023c4 <HAL_GPIO_Init+0x2ac>)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3c      	ldr	r2, [pc, #240]	; (80023c8 <HAL_GPIO_Init+0x2b0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d01f      	beq.n	800231c <HAL_GPIO_Init+0x204>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3b      	ldr	r2, [pc, #236]	; (80023cc <HAL_GPIO_Init+0x2b4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d019      	beq.n	8002318 <HAL_GPIO_Init+0x200>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a3a      	ldr	r2, [pc, #232]	; (80023d0 <HAL_GPIO_Init+0x2b8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_GPIO_Init+0x1fc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a39      	ldr	r2, [pc, #228]	; (80023d4 <HAL_GPIO_Init+0x2bc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_GPIO_Init+0x1f8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a38      	ldr	r2, [pc, #224]	; (80023d8 <HAL_GPIO_Init+0x2c0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x1f4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a37      	ldr	r2, [pc, #220]	; (80023dc <HAL_GPIO_Init+0x2c4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_GPIO_Init+0x1f0>
 8002304:	2305      	movs	r3, #5
 8002306:	e00a      	b.n	800231e <HAL_GPIO_Init+0x206>
 8002308:	2306      	movs	r3, #6
 800230a:	e008      	b.n	800231e <HAL_GPIO_Init+0x206>
 800230c:	2304      	movs	r3, #4
 800230e:	e006      	b.n	800231e <HAL_GPIO_Init+0x206>
 8002310:	2303      	movs	r3, #3
 8002312:	e004      	b.n	800231e <HAL_GPIO_Init+0x206>
 8002314:	2302      	movs	r3, #2
 8002316:	e002      	b.n	800231e <HAL_GPIO_Init+0x206>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_GPIO_Init+0x206>
 800231c:	2300      	movs	r3, #0
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	f002 0203 	and.w	r2, r2, #3
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	4093      	lsls	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800232e:	4925      	ldr	r1, [pc, #148]	; (80023c4 <HAL_GPIO_Init+0x2ac>)
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4924      	ldr	r1, [pc, #144]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	4920      	ldr	r1, [pc, #128]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002360:	4013      	ands	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	491a      	ldr	r1, [pc, #104]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	4916      	ldr	r1, [pc, #88]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002388:	4013      	ands	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d025      	beq.n	80023e4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	4910      	ldr	r1, [pc, #64]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
 80023a4:	e025      	b.n	80023f2 <HAL_GPIO_Init+0x2da>
 80023a6:	bf00      	nop
 80023a8:	10320000 	.word	0x10320000
 80023ac:	10310000 	.word	0x10310000
 80023b0:	10220000 	.word	0x10220000
 80023b4:	10210000 	.word	0x10210000
 80023b8:	10120000 	.word	0x10120000
 80023bc:	10110000 	.word	0x10110000
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010800 	.word	0x40010800
 80023cc:	40010c00 	.word	0x40010c00
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40011400 	.word	0x40011400
 80023d8:	40011800 	.word	0x40011800
 80023dc:	40011c00 	.word	0x40011c00
 80023e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_GPIO_Init+0x324>)
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4913      	ldr	r1, [pc, #76]	; (800243c <HAL_GPIO_Init+0x324>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <HAL_GPIO_Init+0x324>)
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_GPIO_Init+0x324>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]
 800240a:	e006      	b.n	800241a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_GPIO_Init+0x324>)
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	43db      	mvns	r3, r3
 8002414:	4909      	ldr	r1, [pc, #36]	; (800243c <HAL_GPIO_Init+0x324>)
 8002416:	4013      	ands	r3, r2
 8002418:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	3301      	adds	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	f47f ae7e 	bne.w	800212c <HAL_GPIO_Init+0x14>
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	372c      	adds	r7, #44	; 0x2c
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	40010400 	.word	0x40010400

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	611a      	str	r2, [r3, #16]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43d9      	mvns	r1, r3
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	400b      	ands	r3, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	611a      	str	r2, [r3, #16]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e272      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8087 	beq.w	80025d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c4:	4b92      	ldr	r3, [pc, #584]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d00c      	beq.n	80024ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d0:	4b8f      	ldr	r3, [pc, #572]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d112      	bne.n	8002502 <HAL_RCC_OscConfig+0x5e>
 80024dc:	4b8c      	ldr	r3, [pc, #560]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e8:	d10b      	bne.n	8002502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ea:	4b89      	ldr	r3, [pc, #548]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d06c      	beq.n	80025d0 <HAL_RCC_OscConfig+0x12c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d168      	bne.n	80025d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e24c      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x76>
 800250c:	4b80      	ldr	r3, [pc, #512]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a7f      	ldr	r2, [pc, #508]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	e02e      	b.n	8002578 <HAL_RCC_OscConfig+0xd4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x98>
 8002522:	4b7b      	ldr	r3, [pc, #492]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7a      	ldr	r2, [pc, #488]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b78      	ldr	r3, [pc, #480]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a77      	ldr	r2, [pc, #476]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xd4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0xbc>
 8002546:	4b72      	ldr	r3, [pc, #456]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a71      	ldr	r2, [pc, #452]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6f      	ldr	r3, [pc, #444]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6e      	ldr	r2, [pc, #440]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xd4>
 8002560:	4b6b      	ldr	r3, [pc, #428]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6a      	ldr	r2, [pc, #424]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b68      	ldr	r3, [pc, #416]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a67      	ldr	r2, [pc, #412]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002576:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff f830 	bl	80015e4 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff f82c 	bl	80015e4 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e200      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b5d      	ldr	r3, [pc, #372]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xe4>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff f81c 	bl	80015e4 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff f818 	bl	80015e4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1ec      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b53      	ldr	r3, [pc, #332]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x10c>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025de:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ea:	4b49      	ldr	r3, [pc, #292]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d11c      	bne.n	8002630 <HAL_RCC_OscConfig+0x18c>
 80025f6:	4b46      	ldr	r3, [pc, #280]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	4b43      	ldr	r3, [pc, #268]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x176>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e1c0      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4939      	ldr	r1, [pc, #228]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	e03a      	b.n	80026a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCC_OscConfig+0x270>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fe ffd1 	bl	80015e4 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002646:	f7fe ffcd 	bl	80015e4 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1a1      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4927      	ldr	r1, [pc, #156]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_RCC_OscConfig+0x270>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe ffb0 	bl	80015e4 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe ffac 	bl	80015e4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e180      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d03a      	beq.n	8002728 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d019      	beq.n	80026ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <HAL_RCC_OscConfig+0x274>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7fe ff90 	bl	80015e4 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe ff8c 	bl	80015e4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e160      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f000 fad8 	bl	8002c9c <RCC_Delay>
 80026ec:	e01c      	b.n	8002728 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_RCC_OscConfig+0x274>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe ff76 	bl	80015e4 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fa:	e00f      	b.n	800271c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fc:	f7fe ff72 	bl	80015e4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d908      	bls.n	800271c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e146      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	42420000 	.word	0x42420000
 8002718:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b92      	ldr	r3, [pc, #584]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e9      	bne.n	80026fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a6 	beq.w	8002882 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273a:	4b8b      	ldr	r3, [pc, #556]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	4a87      	ldr	r2, [pc, #540]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	61d3      	str	r3, [r2, #28]
 8002752:	4b85      	ldr	r3, [pc, #532]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275e:	2301      	movs	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002762:	4b82      	ldr	r3, [pc, #520]	; (800296c <HAL_RCC_OscConfig+0x4c8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d118      	bne.n	80027a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x4c8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7e      	ldr	r2, [pc, #504]	; (800296c <HAL_RCC_OscConfig+0x4c8>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277a:	f7fe ff33 	bl	80015e4 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002782:	f7fe ff2f 	bl	80015e4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b64      	cmp	r3, #100	; 0x64
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e103      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	4b75      	ldr	r3, [pc, #468]	; (800296c <HAL_RCC_OscConfig+0x4c8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x312>
 80027a8:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4a6e      	ldr	r2, [pc, #440]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6213      	str	r3, [r2, #32]
 80027b4:	e02d      	b.n	8002812 <HAL_RCC_OscConfig+0x36e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x334>
 80027be:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a69      	ldr	r2, [pc, #420]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	4b67      	ldr	r3, [pc, #412]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a66      	ldr	r2, [pc, #408]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6213      	str	r3, [r2, #32]
 80027d6:	e01c      	b.n	8002812 <HAL_RCC_OscConfig+0x36e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d10c      	bne.n	80027fa <HAL_RCC_OscConfig+0x356>
 80027e0:	4b61      	ldr	r3, [pc, #388]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a60      	ldr	r2, [pc, #384]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6213      	str	r3, [r2, #32]
 80027f8:	e00b      	b.n	8002812 <HAL_RCC_OscConfig+0x36e>
 80027fa:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a5a      	ldr	r2, [pc, #360]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	4b58      	ldr	r3, [pc, #352]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d015      	beq.n	8002846 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7fe fee3 	bl	80015e4 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fedf 	bl	80015e4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e0b1      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ee      	beq.n	8002822 <HAL_RCC_OscConfig+0x37e>
 8002844:	e014      	b.n	8002870 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7fe fecd 	bl	80015e4 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fec9 	bl	80015e4 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	; 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e09b      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	4b40      	ldr	r3, [pc, #256]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ee      	bne.n	800284e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d105      	bne.n	8002882 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002876:	4b3c      	ldr	r3, [pc, #240]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4a3b      	ldr	r2, [pc, #236]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002880:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8087 	beq.w	800299a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288c:	4b36      	ldr	r3, [pc, #216]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b08      	cmp	r3, #8
 8002896:	d061      	beq.n	800295c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d146      	bne.n	800292e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a0:	4b33      	ldr	r3, [pc, #204]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7fe fe9d 	bl	80015e4 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ae:	f7fe fe99 	bl	80015e4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e06d      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c0:	4b29      	ldr	r3, [pc, #164]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d4:	d108      	bne.n	80028e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4921      	ldr	r1, [pc, #132]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e8:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a19      	ldr	r1, [r3, #32]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	430b      	orrs	r3, r1
 80028fa:	491b      	ldr	r1, [pc, #108]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe fe6d 	bl	80015e4 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe fe69 	bl	80015e4 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e03d      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x46a>
 800292c:	e035      	b.n	800299a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fe56 	bl	80015e4 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe fe52 	bl	80015e4 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e026      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x498>
 800295a:	e01e      	b.n	800299a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e019      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
 8002970:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x500>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	429a      	cmp	r2, r3
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0d0      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	4965      	ldr	r1, [pc, #404]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0b8      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a52      	ldr	r2, [pc, #328]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	494d      	ldr	r1, [pc, #308]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d040      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d115      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e073      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06b      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4936      	ldr	r1, [pc, #216]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fda4 	bl	80015e4 <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe fda0 	bl	80015e4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e053      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d210      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	4922      	ldr	r1, [pc, #136]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e032      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4916      	ldr	r1, [pc, #88]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	490e      	ldr	r1, [pc, #56]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b36:	f000 f821 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	490a      	ldr	r1, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	5ccb      	ldrb	r3, [r1, r3]
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1cc>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1d0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fd02 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40022000 	.word	0x40022000
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08004f78 	.word	0x08004f78
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	b490      	push	{r4, r7}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b82:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b84:	1d3c      	adds	r4, r7, #4
 8002b86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b8c:	f240 2301 	movw	r3, #513	; 0x201
 8002b90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ba6:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d002      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x40>
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x46>
 8002bba:	e02b      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bbe:	623b      	str	r3, [r7, #32]
      break;
 8002bc0:	e02b      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	0c9b      	lsrs	r3, r3, #18
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3328      	adds	r3, #40	; 0x28
 8002bcc:	443b      	add	r3, r7
 8002bce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bd2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d012      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0c5b      	lsrs	r3, r3, #17
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	3328      	adds	r3, #40	; 0x28
 8002bea:	443b      	add	r3, r7
 8002bec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bf0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bf6:	fb03 f202 	mul.w	r2, r3, r2
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
 8002c02:	e004      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c08:	fb02 f303 	mul.w	r3, r2, r3
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	623b      	str	r3, [r7, #32]
      break;
 8002c12:	e002      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c16:	623b      	str	r3, [r7, #32]
      break;
 8002c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc90      	pop	{r4, r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	08004f68 	.word	0x08004f68
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	007a1200 	.word	0x007a1200
 8002c34:	003d0900 	.word	0x003d0900

08002c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c3c:	4b02      	ldr	r3, [pc, #8]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	20000000 	.word	0x20000000

08002c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c50:	f7ff fff2 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	4903      	ldr	r1, [pc, #12]	; (8002c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c62:	5ccb      	ldrb	r3, [r1, r3]
 8002c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	08004f88 	.word	0x08004f88

08002c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c78:	f7ff ffde 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0adb      	lsrs	r3, r3, #11
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4903      	ldr	r1, [pc, #12]	; (8002c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08004f88 	.word	0x08004f88

08002c9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <RCC_Delay+0x34>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <RCC_Delay+0x38>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0a5b      	lsrs	r3, r3, #9
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cb8:	bf00      	nop
  }
  while (Delay --);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1e5a      	subs	r2, r3, #1
 8002cbe:	60fa      	str	r2, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f9      	bne.n	8002cb8 <RCC_Delay+0x1c>
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	10624dd3 	.word	0x10624dd3

08002cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e041      	b.n	8002d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe f96c 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f000 fe18 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d001      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e044      	b.n	8002e1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_TIM_Base_Start_IT+0xac>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d018      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x6c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <HAL_TIM_Base_Start_IT+0xb0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d00e      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_TIM_Base_Start_IT+0xb4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_TIM_Base_Start_IT+0xb8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x6c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <HAL_TIM_Base_Start_IT+0xbc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d111      	bne.n	8002e08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d010      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e06:	e007      	b.n	8002e18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40013400 	.word	0x40013400
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	40000800 	.word	0x40000800
 8002e34:	40000c00 	.word	0x40000c00

08002e38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e041      	b.n	8002ece <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f839 	bl	8002ed6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 fd68 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_TIM_PWM_Start+0x24>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e022      	b.n	8002f52 <HAL_TIM_PWM_Start+0x6a>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d109      	bne.n	8002f26 <HAL_TIM_PWM_Start+0x3e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	bf14      	ite	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	2300      	moveq	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	e015      	b.n	8002f52 <HAL_TIM_PWM_Start+0x6a>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d109      	bne.n	8002f40 <HAL_TIM_PWM_Start+0x58>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e008      	b.n	8002f52 <HAL_TIM_PWM_Start+0x6a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e072      	b.n	8003040 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Start+0x82>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f68:	e013      	b.n	8002f92 <HAL_TIM_PWM_Start+0xaa>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Start+0x92>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f78:	e00b      	b.n	8002f92 <HAL_TIM_PWM_Start+0xaa>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_PWM_Start+0xa2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f88:	e003      	b.n	8002f92 <HAL_TIM_PWM_Start+0xaa>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2201      	movs	r2, #1
 8002f98:	6839      	ldr	r1, [r7, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 ff92 	bl	8003ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a28      	ldr	r2, [pc, #160]	; (8003048 <HAL_TIM_PWM_Start+0x160>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_TIM_PWM_Start+0xcc>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a27      	ldr	r2, [pc, #156]	; (800304c <HAL_TIM_PWM_Start+0x164>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIM_PWM_Start+0xd0>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_TIM_PWM_Start+0xd2>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <HAL_TIM_PWM_Start+0x160>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d018      	beq.n	800300a <HAL_TIM_PWM_Start+0x122>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1b      	ldr	r2, [pc, #108]	; (800304c <HAL_TIM_PWM_Start+0x164>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_TIM_PWM_Start+0x122>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d00e      	beq.n	800300a <HAL_TIM_PWM_Start+0x122>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_TIM_PWM_Start+0x168>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d009      	beq.n	800300a <HAL_TIM_PWM_Start+0x122>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a16      	ldr	r2, [pc, #88]	; (8003054 <HAL_TIM_PWM_Start+0x16c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d004      	beq.n	800300a <HAL_TIM_PWM_Start+0x122>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <HAL_TIM_PWM_Start+0x170>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d111      	bne.n	800302e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b06      	cmp	r3, #6
 800301a:	d010      	beq.n	800303e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302c:	e007      	b.n	800303e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40012c00 	.word	0x40012c00
 800304c:	40013400 	.word	0x40013400
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800
 8003058:	40000c00 	.word	0x40000c00

0800305c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 ff28 	bl	8003ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2e      	ldr	r2, [pc, #184]	; (8003134 <HAL_TIM_PWM_Stop+0xd8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <HAL_TIM_PWM_Stop+0x2c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <HAL_TIM_PWM_Stop+0xdc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_TIM_PWM_Stop+0x30>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_TIM_PWM_Stop+0x32>
 800308c:	2300      	movs	r3, #0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d017      	beq.n	80030c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	f241 1311 	movw	r3, #4369	; 0x1111
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <HAL_TIM_PWM_Stop+0x66>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	f240 4344 	movw	r3, #1092	; 0x444
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <HAL_TIM_PWM_Stop+0x66>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_TIM_PWM_Stop+0x96>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a1a      	ldr	r2, [r3, #32]
 80030d8:	f240 4344 	movw	r3, #1092	; 0x444
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_TIM_PWM_Stop+0x96>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_PWM_Stop+0xa6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	e013      	b.n	800312a <HAL_TIM_PWM_Stop+0xce>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d104      	bne.n	8003112 <HAL_TIM_PWM_Stop+0xb6>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003110:	e00b      	b.n	800312a <HAL_TIM_PWM_Stop+0xce>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d104      	bne.n	8003122 <HAL_TIM_PWM_Stop+0xc6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003120:	e003      	b.n	800312a <HAL_TIM_PWM_Stop+0xce>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40013400 	.word	0x40013400

0800313c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e093      	b.n	8003278 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd fec1 	bl	8000eec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003180:	f023 0307 	bic.w	r3, r3, #7
 8003184:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3304      	adds	r3, #4
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f000 fbdb 	bl	800394c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	4313      	orrs	r3, r2
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80031dc:	f023 030c 	bic.w	r3, r3, #12
 80031e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4313      	orrs	r3, r2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	011a      	lsls	r2, r3, #4
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	031b      	lsls	r3, r3, #12
 800320c:	4313      	orrs	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800321a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	4313      	orrs	r3, r2
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003290:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003298:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d110      	bne.n	80032d2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d102      	bne.n	80032bc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032b6:	7b7b      	ldrb	r3, [r7, #13]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d001      	beq.n	80032c0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e089      	b.n	80033d4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d0:	e031      	b.n	8003336 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d110      	bne.n	80032fa <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032d8:	7bbb      	ldrb	r3, [r7, #14]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d102      	bne.n	80032e4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032de:	7b3b      	ldrb	r3, [r7, #12]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d001      	beq.n	80032e8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e075      	b.n	80033d4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032f8:	e01d      	b.n	8003336 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d108      	bne.n	8003312 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003300:	7bbb      	ldrb	r3, [r7, #14]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003306:	7b7b      	ldrb	r3, [r7, #13]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800330c:	7b3b      	ldrb	r3, [r7, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e05e      	b.n	80033d4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_TIM_Encoder_Start_IT+0xc4>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b04      	cmp	r3, #4
 8003340:	d010      	beq.n	8003364 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003342:	e01f      	b.n	8003384 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fdb9 	bl	8003ec4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0202 	orr.w	r2, r2, #2
 8003360:	60da      	str	r2, [r3, #12]
      break;
 8003362:	e02e      	b.n	80033c2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2201      	movs	r2, #1
 800336a:	2104      	movs	r1, #4
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fda9 	bl	8003ec4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0204 	orr.w	r2, r2, #4
 8003380:	60da      	str	r2, [r3, #12]
      break;
 8003382:	e01e      	b.n	80033c2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2201      	movs	r2, #1
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd99 	bl	8003ec4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	2104      	movs	r1, #4
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fd92 	bl	8003ec4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0202 	orr.w	r2, r2, #2
 80033ae:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0204 	orr.w	r2, r2, #4
 80033be:	60da      	str	r2, [r3, #12]
      break;
 80033c0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d122      	bne.n	8003438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d11b      	bne.n	8003438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0202 	mvn.w	r2, #2
 8003408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa78 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fa6b 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fa7a 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d122      	bne.n	800348c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d11b      	bne.n	800348c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0204 	mvn.w	r2, #4
 800345c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa4e 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 8003478:	e005      	b.n	8003486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fa41 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fa50 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b08      	cmp	r3, #8
 8003498:	d122      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d11b      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0208 	mvn.w	r2, #8
 80034b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2204      	movs	r2, #4
 80034b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa24 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa17 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fa26 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d122      	bne.n	8003534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d11b      	bne.n	8003534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0210 	mvn.w	r2, #16
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2208      	movs	r2, #8
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9fa 	bl	8003914 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9ed 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f9fc 	bl	8003926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0201 	mvn.w	r2, #1
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9c8 	bl	80038f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b80      	cmp	r3, #128	; 0x80
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d107      	bne.n	800358c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fe90 	bl	80042ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d10e      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d107      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f9c0 	bl	8003938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d10e      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d107      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0220 	mvn.w	r2, #32
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fe5b 	bl	800429a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003602:	2302      	movs	r3, #2
 8003604:	e0ac      	b.n	8003760 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b0c      	cmp	r3, #12
 8003612:	f200 809f 	bhi.w	8003754 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003616:	a201      	add	r2, pc, #4	; (adr r2, 800361c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	08003651 	.word	0x08003651
 8003620:	08003755 	.word	0x08003755
 8003624:	08003755 	.word	0x08003755
 8003628:	08003755 	.word	0x08003755
 800362c:	08003691 	.word	0x08003691
 8003630:	08003755 	.word	0x08003755
 8003634:	08003755 	.word	0x08003755
 8003638:	08003755 	.word	0x08003755
 800363c:	080036d3 	.word	0x080036d3
 8003640:	08003755 	.word	0x08003755
 8003644:	08003755 	.word	0x08003755
 8003648:	08003755 	.word	0x08003755
 800364c:	08003713 	.word	0x08003713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f9f2 	bl	8003a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0208 	orr.w	r2, r2, #8
 800366a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6999      	ldr	r1, [r3, #24]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	619a      	str	r2, [r3, #24]
      break;
 800368e:	e062      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fa42 	bl	8003b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6999      	ldr	r1, [r3, #24]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	619a      	str	r2, [r3, #24]
      break;
 80036d0:	e041      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fa95 	bl	8003c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69da      	ldr	r2, [r3, #28]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0208 	orr.w	r2, r2, #8
 80036ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0204 	bic.w	r2, r2, #4
 80036fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69d9      	ldr	r1, [r3, #28]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	61da      	str	r2, [r3, #28]
      break;
 8003710:	e021      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fae9 	bl	8003cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69d9      	ldr	r1, [r3, #28]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	021a      	lsls	r2, r3, #8
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	61da      	str	r2, [r3, #28]
      break;
 8003752:	e000      	b.n	8003756 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_TIM_ConfigClockSource+0x18>
 800377c:	2302      	movs	r3, #2
 800377e:	e0b3      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x180>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800379e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b8:	d03e      	beq.n	8003838 <HAL_TIM_ConfigClockSource+0xd0>
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037be:	f200 8087 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c6:	f000 8085 	beq.w	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d87f      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037d0:	2b70      	cmp	r3, #112	; 0x70
 80037d2:	d01a      	beq.n	800380a <HAL_TIM_ConfigClockSource+0xa2>
 80037d4:	2b70      	cmp	r3, #112	; 0x70
 80037d6:	d87b      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037d8:	2b60      	cmp	r3, #96	; 0x60
 80037da:	d050      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x116>
 80037dc:	2b60      	cmp	r3, #96	; 0x60
 80037de:	d877      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037e0:	2b50      	cmp	r3, #80	; 0x50
 80037e2:	d03c      	beq.n	800385e <HAL_TIM_ConfigClockSource+0xf6>
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d873      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d058      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x136>
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d86f      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037f0:	2b30      	cmp	r3, #48	; 0x30
 80037f2:	d064      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x156>
 80037f4:	2b30      	cmp	r3, #48	; 0x30
 80037f6:	d86b      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d060      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x156>
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d867      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d05c      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x156>
 8003804:	2b10      	cmp	r3, #16
 8003806:	d05a      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003808:	e062      	b.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f000 fb34 	bl	8003e86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800382c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	609a      	str	r2, [r3, #8]
      break;
 8003836:	e04e      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f000 fb1d 	bl	8003e86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800385a:	609a      	str	r2, [r3, #8]
      break;
 800385c:	e03b      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	461a      	mov	r2, r3
 800386c:	f000 fa94 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2150      	movs	r1, #80	; 0x50
 8003876:	4618      	mov	r0, r3
 8003878:	f000 faeb 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 800387c:	e02b      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	461a      	mov	r2, r3
 800388c:	f000 fab2 	bl	8003df4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2160      	movs	r1, #96	; 0x60
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fadb 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 800389c:	e01b      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 fa74 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2140      	movs	r1, #64	; 0x40
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 facb 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e00b      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f000 fac2 	bl	8003e52 <TIM_ITRx_SetConfig>
        break;
 80038ce:	e002      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
	...

0800394c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a33      	ldr	r2, [pc, #204]	; (8003a2c <TIM_Base_SetConfig+0xe0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a32      	ldr	r2, [pc, #200]	; (8003a30 <TIM_Base_SetConfig+0xe4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00f      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <TIM_Base_SetConfig+0xe8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a2e      	ldr	r2, [pc, #184]	; (8003a38 <TIM_Base_SetConfig+0xec>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <TIM_Base_SetConfig+0xf0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <TIM_Base_SetConfig+0xe0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <TIM_Base_SetConfig+0x82>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <TIM_Base_SetConfig+0xe4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_Base_SetConfig+0x82>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d00b      	beq.n	80039ce <TIM_Base_SetConfig+0x82>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <TIM_Base_SetConfig+0xe8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_Base_SetConfig+0x82>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <TIM_Base_SetConfig+0xec>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_Base_SetConfig+0x82>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1c      	ldr	r2, [pc, #112]	; (8003a3c <TIM_Base_SetConfig+0xf0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <TIM_Base_SetConfig+0xe0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_Base_SetConfig+0xc8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <TIM_Base_SetConfig+0xe4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d103      	bne.n	8003a1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	615a      	str	r2, [r3, #20]
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40013400 	.word	0x40013400
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00

08003a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f023 0201 	bic.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0303 	bic.w	r3, r3, #3
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f023 0302 	bic.w	r3, r3, #2
 8003a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <TIM_OC1_SetConfig+0xd8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_OC1_SetConfig+0x64>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <TIM_OC1_SetConfig+0xdc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10c      	bne.n	8003abe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0308 	bic.w	r3, r3, #8
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <TIM_OC1_SetConfig+0xd8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <TIM_OC1_SetConfig+0x8e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <TIM_OC1_SetConfig+0xdc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d111      	bne.n	8003af2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40013400 	.word	0x40013400

08003b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0210 	bic.w	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0320 	bic.w	r3, r3, #32
 8003b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_OC2_SetConfig+0xe0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_OC2_SetConfig+0x68>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a20      	ldr	r2, [pc, #128]	; (8003c04 <TIM_OC2_SetConfig+0xe4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10d      	bne.n	8003ba4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <TIM_OC2_SetConfig+0xe0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_OC2_SetConfig+0x94>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <TIM_OC2_SetConfig+0xe4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d113      	bne.n	8003bdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40013400 	.word	0x40013400

08003c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <TIM_OC3_SetConfig+0xe0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_OC3_SetConfig+0x66>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a20      	ldr	r2, [pc, #128]	; (8003cec <TIM_OC3_SetConfig+0xe4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d10d      	bne.n	8003c8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <TIM_OC3_SetConfig+0xe0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d003      	beq.n	8003c9a <TIM_OC3_SetConfig+0x92>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a15      	ldr	r2, [pc, #84]	; (8003cec <TIM_OC3_SetConfig+0xe4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d113      	bne.n	8003cc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40013400 	.word	0x40013400

08003cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	021b      	lsls	r3, r3, #8
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	031b      	lsls	r3, r3, #12
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <TIM_OC4_SetConfig+0xa0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <TIM_OC4_SetConfig+0x68>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <TIM_OC4_SetConfig+0xa4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d109      	bne.n	8003d6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	019b      	lsls	r3, r3, #6
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40013400 	.word	0x40013400

08003d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 030a 	bic.w	r3, r3, #10
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f023 0210 	bic.w	r2, r3, #16
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	031b      	lsls	r3, r3, #12
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f043 0307 	orr.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	609a      	str	r2, [r3, #8]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <HAL_TIMEx_PWMN_Start+0x24>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	e022      	b.n	8003f76 <HAL_TIMEx_PWMN_Start+0x6a>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d109      	bne.n	8003f4a <HAL_TIMEx_PWMN_Start+0x3e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	bf14      	ite	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	2300      	moveq	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	e015      	b.n	8003f76 <HAL_TIMEx_PWMN_Start+0x6a>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d109      	bne.n	8003f64 <HAL_TIMEx_PWMN_Start+0x58>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	e008      	b.n	8003f76 <HAL_TIMEx_PWMN_Start+0x6a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	bf14      	ite	ne
 8003f70:	2301      	movne	r3, #1
 8003f72:	2300      	moveq	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e063      	b.n	8004046 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <HAL_TIMEx_PWMN_Start+0x82>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f8c:	e013      	b.n	8003fb6 <HAL_TIMEx_PWMN_Start+0xaa>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d104      	bne.n	8003f9e <HAL_TIMEx_PWMN_Start+0x92>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f9c:	e00b      	b.n	8003fb6 <HAL_TIMEx_PWMN_Start+0xaa>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d104      	bne.n	8003fae <HAL_TIMEx_PWMN_Start+0xa2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	e003      	b.n	8003fb6 <HAL_TIMEx_PWMN_Start+0xaa>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2204      	movs	r2, #4
 8003fbc:	6839      	ldr	r1, [r7, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f97d 	bl	80042be <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <HAL_TIMEx_PWMN_Start+0x144>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_TIMEx_PWMN_Start+0x104>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <HAL_TIMEx_PWMN_Start+0x148>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_TIMEx_PWMN_Start+0x104>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d00e      	beq.n	8004010 <HAL_TIMEx_PWMN_Start+0x104>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	; (8004058 <HAL_TIMEx_PWMN_Start+0x14c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_TIMEx_PWMN_Start+0x104>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_TIMEx_PWMN_Start+0x150>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_TIMEx_PWMN_Start+0x104>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_TIMEx_PWMN_Start+0x154>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d111      	bne.n	8004034 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b06      	cmp	r3, #6
 8004020:	d010      	beq.n	8004044 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004032:	e007      	b.n	8004044 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40013400 	.word	0x40013400
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00

08004064 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f921 	bl	80042be <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	f241 1311 	movw	r3, #4369	; 0x1111
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <HAL_TIMEx_PWMN_Stop+0x48>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	f240 4344 	movw	r3, #1092	; 0x444
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <HAL_TIMEx_PWMN_Stop+0x48>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6a1a      	ldr	r2, [r3, #32]
 80040b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10f      	bne.n	80040dc <HAL_TIMEx_PWMN_Stop+0x78>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6a1a      	ldr	r2, [r3, #32]
 80040c2:	f240 4344 	movw	r3, #1092	; 0x444
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_TIMEx_PWMN_Stop+0x78>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <HAL_TIMEx_PWMN_Stop+0x88>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ea:	e013      	b.n	8004114 <HAL_TIMEx_PWMN_Stop+0xb0>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d104      	bne.n	80040fc <HAL_TIMEx_PWMN_Stop+0x98>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040fa:	e00b      	b.n	8004114 <HAL_TIMEx_PWMN_Stop+0xb0>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d104      	bne.n	800410c <HAL_TIMEx_PWMN_Stop+0xa8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410a:	e003      	b.n	8004114 <HAL_TIMEx_PWMN_Stop+0xb0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004134:	2302      	movs	r3, #2
 8004136:	e050      	b.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d018      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d00e      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10c      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40013400 	.word	0x40013400
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00

080041f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004210:	2302      	movs	r3, #2
 8004212:	e03d      	b.n	8004290 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80042be:	b480      	push	{r7}
 80042c0:	b087      	sub	sp, #28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2204      	movs	r2, #4
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	43db      	mvns	r3, r3
 80042e0:	401a      	ands	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	621a      	str	r2, [r3, #32]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e03f      	b.n	8004398 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fc fedd 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2224      	movs	r2, #36	; 0x24
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004348:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fd46 	bl	8004ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800435e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800436e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800437e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d153      	bne.n	8004462 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_UART_Transmit_DMA+0x26>
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e04c      	b.n	8004464 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_UART_Transmit_DMA+0x38>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e045      	b.n	8004464 <HAL_UART_Transmit_DMA+0xc4>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2221      	movs	r2, #33	; 0x21
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_UART_Transmit_DMA+0xcc>)
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <HAL_UART_Transmit_DMA+0xd0>)
 800440e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	4a17      	ldr	r2, [pc, #92]	; (8004474 <HAL_UART_Transmit_DMA+0xd4>)
 8004416:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	2200      	movs	r2, #0
 800441e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3304      	adds	r3, #4
 8004434:	461a      	mov	r2, r3
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	f7fd fa62 	bl	8001900 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004444:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800445c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	08004879 	.word	0x08004879
 8004470:	080048cb 	.word	0x080048cb
 8004474:	080049b3 	.word	0x080049b3

08004478 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b20      	cmp	r3, #32
 8004490:	d11d      	bne.n	80044ce <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_UART_Receive_DMA+0x26>
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e016      	b.n	80044d0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Receive_DMA+0x38>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e00f      	b.n	80044d0 <HAL_UART_Receive_DMA+0x58>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	461a      	mov	r2, r3
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fabf 	bl	8004a48 <UART_Start_Receive_DMA>
 80044ca:	4603      	mov	r3, r0
 80044cc:	e000      	b.n	80044d0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_UART_IRQHandler+0x52>
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fbb0 	bl	8004c88 <UART_Receive_IT>
      return;
 8004528:	e17b      	b.n	8004822 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80b1 	beq.w	8004694 <HAL_UART_IRQHandler+0x1bc>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <HAL_UART_IRQHandler+0x70>
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80a6 	beq.w	8004694 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_UART_IRQHandler+0x90>
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	f043 0201 	orr.w	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_UART_IRQHandler+0xb0>
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f043 0202 	orr.w	r2, r3, #2
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_UART_IRQHandler+0xd0>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0204 	orr.w	r2, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00f      	beq.n	80045d2 <HAL_UART_IRQHandler+0xfa>
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <HAL_UART_IRQHandler+0xee>
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f043 0208 	orr.w	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 811e 	beq.w	8004818 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_UART_IRQHandler+0x11e>
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fb49 	bl	8004c88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <HAL_UART_IRQHandler+0x146>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d031      	beq.n	8004682 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa8b 	bl	8004b3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d023      	beq.n	800467a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004640:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	2b00      	cmp	r3, #0
 8004648:	d013      	beq.n	8004672 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	4a76      	ldr	r2, [pc, #472]	; (8004828 <HAL_UART_IRQHandler+0x350>)
 8004650:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	4618      	mov	r0, r3
 8004658:	f7fd f9ec 	bl	8001a34 <HAL_DMA_Abort_IT>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800466c:	4610      	mov	r0, r2
 800466e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	e00e      	b.n	8004690 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8ec 	bl	8004850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	e00a      	b.n	8004690 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8e8 	bl	8004850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004680:	e006      	b.n	8004690 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8e4 	bl	8004850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800468e:	e0c3      	b.n	8004818 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	bf00      	nop
    return;
 8004692:	e0c1      	b.n	8004818 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	2b01      	cmp	r3, #1
 800469a:	f040 80a1 	bne.w	80047e0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 809b 	beq.w	80047e0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8095 	beq.w	80047e0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04e      	beq.n	8004778 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80046e4:	8a3b      	ldrh	r3, [r7, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8098 	beq.w	800481c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046f0:	8a3a      	ldrh	r2, [r7, #16]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f080 8092 	bcs.w	800481c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8a3a      	ldrh	r2, [r7, #16]
 80046fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b20      	cmp	r3, #32
 8004706:	d02b      	beq.n	8004760 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004716:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695a      	ldr	r2, [r3, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0210 	bic.w	r2, r2, #16
 8004754:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd f92f 	bl	80019be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004768:	b29b      	uxth	r3, r3
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	b29b      	uxth	r3, r3
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f876 	bl	8004862 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004776:	e051      	b.n	800481c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004780:	b29b      	uxth	r3, r3
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d047      	beq.n	8004820 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004790:	8a7b      	ldrh	r3, [r7, #18]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d044      	beq.n	8004820 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047a4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0210 	bic.w	r2, r2, #16
 80047d2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047d4:	8a7b      	ldrh	r3, [r7, #18]
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f842 	bl	8004862 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047de:	e01f      	b.n	8004820 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_UART_IRQHandler+0x324>
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f9e0 	bl	8004bba <UART_Transmit_IT>
    return;
 80047fa:	e012      	b.n	8004822 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <HAL_UART_IRQHandler+0x34a>
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa21 	bl	8004c58 <UART_EndTransmit_IT>
    return;
 8004816:	e004      	b.n	8004822 <HAL_UART_IRQHandler+0x34a>
    return;
 8004818:	bf00      	nop
 800481a:	e002      	b.n	8004822 <HAL_UART_IRQHandler+0x34a>
      return;
 800481c:	bf00      	nop
 800481e:	e000      	b.n	8004822 <HAL_UART_IRQHandler+0x34a>
      return;
 8004820:	bf00      	nop
  }
}
 8004822:	3728      	adds	r7, #40	; 0x28
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	08004b93 	.word	0x08004b93

0800482c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr

0800483e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr

08004862 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d113      	bne.n	80048bc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048a8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048ba:	e002      	b.n	80048c2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7fc f805 	bl	80008cc <HAL_UART_TxCpltCallback>
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff ffa7 	bl	800482c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d12a      	bne.n	8004958 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004916:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004936:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	2b01      	cmp	r3, #1
 8004946:	d107      	bne.n	8004958 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0210 	bic.w	r2, r2, #16
 8004956:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	2b01      	cmp	r3, #1
 800495e:	d106      	bne.n	800496e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004964:	4619      	mov	r1, r3
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ff7b 	bl	8004862 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800496c:	e002      	b.n	8004974 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7fb ff3c 	bl	80007ec <HAL_UART_RxCpltCallback>
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	2b01      	cmp	r3, #1
 8004990:	d108      	bne.n	80049a4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	b29b      	uxth	r3, r3
 800499a:	4619      	mov	r1, r3
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff ff60 	bl	8004862 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049a2:	e002      	b.n	80049aa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff ff4a 	bl	800483e <HAL_UART_RxHalfCpltCallback>
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b21      	cmp	r3, #33	; 0x21
 80049e4:	d108      	bne.n	80049f8 <UART_DMAError+0x46>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2200      	movs	r2, #0
 80049f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80049f2:	68b8      	ldr	r0, [r7, #8]
 80049f4:	f000 f88c 	bl	8004b10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b22      	cmp	r3, #34	; 0x22
 8004a18:	d108      	bne.n	8004a2c <UART_DMAError+0x7a>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2200      	movs	r2, #0
 8004a24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a26:	68b8      	ldr	r0, [r7, #8]
 8004a28:	f000 f887 	bl	8004b3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f043 0210 	orr.w	r2, r3, #16
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a38:	68b8      	ldr	r0, [r7, #8]
 8004a3a:	f7ff ff09 	bl	8004850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2222      	movs	r2, #34	; 0x22
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <UART_Start_Receive_DMA+0xbc>)
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <UART_Start_Receive_DMA+0xc0>)
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <UART_Start_Receive_DMA+0xc4>)
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	f7fc ff2a 	bl	8001900 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	080048e7 	.word	0x080048e7
 8004b08:	0800497d 	.word	0x0800497d
 8004b0c:	080049b3 	.word	0x080049b3

08004b10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b26:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b50:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d107      	bne.n	8004b7a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0210 	bic.w	r2, r2, #16
 8004b78:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff fe4f 	bl	8004850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b21      	cmp	r3, #33	; 0x21
 8004bcc:	d13e      	bne.n	8004c4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	d114      	bne.n	8004c02 <UART_Transmit_IT+0x48>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d110      	bne.n	8004c02 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bf4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	621a      	str	r2, [r3, #32]
 8004c00:	e008      	b.n	8004c14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	1c59      	adds	r1, r3, #1
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6211      	str	r1, [r2, #32]
 8004c0c:	781a      	ldrb	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4619      	mov	r1, r3
 8004c22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10f      	bne.n	8004c48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e000      	b.n	8004c4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fb fe27 	bl	80008cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b22      	cmp	r3, #34	; 0x22
 8004c9a:	f040 8099 	bne.w	8004dd0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	d117      	bne.n	8004cd8 <UART_Receive_IT+0x50>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d113      	bne.n	8004cd8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	1c9a      	adds	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	629a      	str	r2, [r3, #40]	; 0x28
 8004cd6:	e026      	b.n	8004d26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cea:	d007      	beq.n	8004cfc <UART_Receive_IT+0x74>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <UART_Receive_IT+0x82>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e008      	b.n	8004d1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4619      	mov	r1, r3
 8004d34:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d148      	bne.n	8004dcc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0220 	bic.w	r2, r2, #32
 8004d48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d123      	bne.n	8004dc2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0210 	bic.w	r2, r2, #16
 8004d8e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d10a      	bne.n	8004db4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004db8:	4619      	mov	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff fd51 	bl	8004862 <HAL_UARTEx_RxEventCallback>
 8004dc0:	e002      	b.n	8004dc8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fb fd12 	bl	80007ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e002      	b.n	8004dd2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e000      	b.n	8004dd2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004dd0:	2302      	movs	r3, #2
  }
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e16:	f023 030c 	bic.w	r3, r3, #12
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	430b      	orrs	r3, r1
 8004e22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <UART_SetConfig+0x114>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d103      	bne.n	8004e4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fd ff16 	bl	8002c74 <HAL_RCC_GetPCLK2Freq>
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	e002      	b.n	8004e52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7fd fefe 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004e50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009a      	lsls	r2, r3, #2
 8004e5c:	441a      	add	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	4a22      	ldr	r2, [pc, #136]	; (8004ef4 <UART_SetConfig+0x118>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	0119      	lsls	r1, r3, #4
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009a      	lsls	r2, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e88:	4b1a      	ldr	r3, [pc, #104]	; (8004ef4 <UART_SetConfig+0x118>)
 8004e8a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	2064      	movs	r0, #100	; 0x64
 8004e92:	fb00 f303 	mul.w	r3, r0, r3
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	3332      	adds	r3, #50	; 0x32
 8004e9c:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <UART_SetConfig+0x118>)
 8004e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea8:	4419      	add	r1, r3
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <UART_SetConfig+0x118>)
 8004ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2064      	movs	r0, #100	; 0x64
 8004eca:	fb00 f303 	mul.w	r3, r0, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	3332      	adds	r3, #50	; 0x32
 8004ed4:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <UART_SetConfig+0x118>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	f003 020f 	and.w	r2, r3, #15
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40013800 	.word	0x40013800
 8004ef4:	51eb851f 	.word	0x51eb851f

08004ef8 <__libc_init_array>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	2600      	movs	r6, #0
 8004efc:	4d0c      	ldr	r5, [pc, #48]	; (8004f30 <__libc_init_array+0x38>)
 8004efe:	4c0d      	ldr	r4, [pc, #52]	; (8004f34 <__libc_init_array+0x3c>)
 8004f00:	1b64      	subs	r4, r4, r5
 8004f02:	10a4      	asrs	r4, r4, #2
 8004f04:	42a6      	cmp	r6, r4
 8004f06:	d109      	bne.n	8004f1c <__libc_init_array+0x24>
 8004f08:	f000 f822 	bl	8004f50 <_init>
 8004f0c:	2600      	movs	r6, #0
 8004f0e:	4d0a      	ldr	r5, [pc, #40]	; (8004f38 <__libc_init_array+0x40>)
 8004f10:	4c0a      	ldr	r4, [pc, #40]	; (8004f3c <__libc_init_array+0x44>)
 8004f12:	1b64      	subs	r4, r4, r5
 8004f14:	10a4      	asrs	r4, r4, #2
 8004f16:	42a6      	cmp	r6, r4
 8004f18:	d105      	bne.n	8004f26 <__libc_init_array+0x2e>
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f20:	4798      	blx	r3
 8004f22:	3601      	adds	r6, #1
 8004f24:	e7ee      	b.n	8004f04 <__libc_init_array+0xc>
 8004f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2a:	4798      	blx	r3
 8004f2c:	3601      	adds	r6, #1
 8004f2e:	e7f2      	b.n	8004f16 <__libc_init_array+0x1e>
 8004f30:	08004f90 	.word	0x08004f90
 8004f34:	08004f90 	.word	0x08004f90
 8004f38:	08004f90 	.word	0x08004f90
 8004f3c:	08004f94 	.word	0x08004f94

08004f40 <memset>:
 8004f40:	4603      	mov	r3, r0
 8004f42:	4402      	add	r2, r0
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d100      	bne.n	8004f4a <memset+0xa>
 8004f48:	4770      	bx	lr
 8004f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4e:	e7f9      	b.n	8004f44 <memset+0x4>

08004f50 <_init>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	bf00      	nop
 8004f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f56:	bc08      	pop	{r3}
 8004f58:	469e      	mov	lr, r3
 8004f5a:	4770      	bx	lr

08004f5c <_fini>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr
